<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>node</title>
      <link href="/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/node/"/>
      <url>/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/node/</url>
      
        <content type="html"><![CDATA[<h1 id="node"><a href="#node" class="headerlink" title="node"></a>node</h1><h1 id="JavaScript模块化"><a href="#JavaScript模块化" class="headerlink" title="JavaScript模块化"></a>JavaScript模块化</h1><p>ES Module模块采用export和import关键字来实现模块化</p><ul><li><code>export</code>负责将模块内的内容导出</li><li><code>import</code>负责从其他模块导入内容</li></ul><h2 id="export关键字"><a href="#export关键字" class="headerlink" title="export关键字"></a>export关键字</h2><p><code>export</code>关键字将一个模块中的变量、函数、类等导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> height = <span class="number">1.88</span></span><br></pre></td></tr></table></figure><p>上面的代码还有另外一种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;why&#x27;</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> height = <span class="number">1.88</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>&#123;name,age,height&#125;</span><br></pre></td></tr></table></figure><h2 id="导出函数或类"><a href="#导出函数或类" class="headerlink" title="导出函数或类"></a>导出函数或类</h2><p>上面我们主要是输出变量，也可以输出函数或者输出类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">content</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在奔跑&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码也可以写成这种形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;在奔跑&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;test,<span class="title class_">Person</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><ul><li>某些情况下，一个模块中包含某个功能，我们并不希望给这个功能命名，而是让导入者可以自己来命名</li><li>这个时候就可以使用 <code>export default</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;default function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来到 <code>main.js</code> 中，这样使用就可以了</p><p>这里的 <code>myFunc</code> 是我自己命名的，你可以根据需要命名它对应的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunc form <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunc</span>()</span><br></pre></td></tr></table></figure><p>另外，需要注意：</p><p><code>export default</code> 在同一个模块中，不允许同时存在多个</p><h2 id="ES6-import的使用"><a href="#ES6-import的使用" class="headerlink" title="ES6 import的使用"></a>ES6 import的使用</h2><p>我们使用 export 指令导出了模块对外提供的接口，下面我们就可以通过 <code>import</code> 命令来加载对应的这个模块了</p><ul><li>首先，我们需要在 HTML 代码中引入两个js文件，并且类型需要设置为 module</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src = <span class="string">&quot;info.js&quot;</span> type = <span class="string">&quot;module&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span> = <span class="string">&quot;main.js&quot;</span> <span class="attr">type</span> = <span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>import</code> 指令用于导入模块中的内容，比如 <code>main.js</code> 的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,age,height&#125; <span class="keyword">from</span> <span class="string">&quot;./info.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age,height);</span><br></pre></td></tr></table></figure><p>如果我们希望某个模块中所有的信息都导入，一个个导入显然有些麻烦</p><ul><li>p通过<code>*</code>可以导入模块中所有的export变量</li><li>p但是通常情况下我们需要给<code>*</code>起一个别名，方便后续的使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> info <span class="keyword">from</span> <span class="string">&#x27;./info.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>,info.<span class="property">age</span>,info.<span class="property">height</span>);</span><br></pre></td></tr></table></figure><h1 id="✍Node是什么"><a href="#✍Node是什么" class="headerlink" title="✍Node是什么"></a>✍Node是什么</h1><p>Node 是一个基于 Chrome V8 引擎的 JavaScript 代码运行环境。</p><p>浏览器（软件）能够运行JavaScript代码，浏览器就是JavaScript代码的运行环境</p><p>Node（软件）能够运行JavaScript代码，Node就是JavaScript代码的运行环境</p><p>Node文档中文网：<a href="http://nodejs.cn/api/url.html#url_new_url_input_base">http://nodejs.cn/api/url.html#url_new_url_input_base</a></p><h2 id="Node使用"><a href="#Node使用" class="headerlink" title="Node使用"></a>Node使用</h2><p>1.新建 app.js</p><p>2.输入代码块 <code>node-http-server</code>,自动生成 Node 结构（安装插件：Node-snippets就可以快捷生成）</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220317151155184.png" alt="image-20220317151155184"></p><p>3.在终端使用 <code>node app.js</code> 运行程序</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/2becf15aab2d49e99b732ac741b7e885.png" alt="img"></p><h2 id="解析第一个Node程序"><a href="#解析第一个Node程序" class="headerlink" title="解析第一个Node程序"></a>解析第一个Node程序</h2><p>1.引入 http 模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure><p>2.创建服务器</p><p>接下来我们使用 <code>http.createServer()</code> 方法创建服务器，并使用 <code>listen</code> 方法绑定 3000 端口。函数通过 request、response 参数来接收和响应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    request    获取客户端(浏览器)传过来的信息</span></span><br><span class="line"><span class="comment">    response   给浏览器响应信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送响应头</span></span><br><span class="line">  <span class="comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span></span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span>&#125;);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);  <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">write</span>(<span class="string">&quot;&lt;head&gt; &lt;meta charset=&#x27;UTF-8&#x27;&gt;&lt;/head&gt;&quot;</span>); <span class="comment">//解决乱码  </span></span><br></pre></td></tr></table></figure><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><p>创建服务器对象，我们是通过 createServer 来完成的</p><ul><li>req：request请求对象，包含请求相关的信息</li><li>res：response响应对象，包含我们要发送给客户端的信息</li></ul><p>旧版本 Node 的 url 用法如下：</p><table><thead><tr><th align="center">url模块的使用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">url.parse()</td><td align="center">解析 url(第二个参数为true,可以将 query 里面的数据转换为对象)</td></tr><tr><td align="center">url.format(urlObject)</td><td align="center">是上面 url.parse() 操作的逆向操作</td></tr><tr><td align="center">url.resolve(from,to)</td><td align="center">添加或者替换地址</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="string">&#x27;http://www.itying.com?name=zhangsan&amp;age=20&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(url.parse(api, true));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getValue = url.<span class="title function_">parse</span>(api, <span class="literal">true</span>).<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6中模板字符串写法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名：<span class="subst">$&#123;getValue.name&#125;</span>--年龄:<span class="subst">$&#123;getValue.age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>新版本 Node 的 url 用法如下：</p><ul><li>```<br>new URL(input,[,base])<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - `input` 类型：String，要解析的绝对或相对的输入网址。如果 input 是相对的，则需要 base。如果 input 是绝对的，则忽略 base。</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">const myURL = new URL(&#x27;/foo&#x27;, &#x27;https://example.org/&#x27;);</span><br><span class="line">// https://example.org/foo</span><br><span class="line">const url = require(&#x27;url&#x27;);</span><br><span class="line"></span><br><span class="line">const myURL = new URL(</span><br><span class="line">    &quot;http://localhost:3000/p/a/t/h?name=zhangsan&amp;age=20#hash&quot;);</span><br><span class="line"></span><br><span class="line">console.log(myURL);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>searchParams 可以获取到 url 参数的 value</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;https://example.org/?abc=123&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="comment">// 打印 123</span></span><br><span class="line"></span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">append</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">href</span>);</span><br><span class="line"><span class="comment">// 打印 https://example.org/?abc=123&amp;abc=xyz</span></span><br><span class="line"></span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">delete</span>(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">myURL.<span class="property">searchParams</span>.<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myURL.<span class="property">href</span>);</span><br><span class="line"><span class="comment">// 打印 https://example.org/?a=b</span></span><br></pre></td></tr></table></figure><h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><h2 id="同步API、异步API"><a href="#同步API、异步API" class="headerlink" title="同步API、异步API"></a>同步API、异步API</h2><ul><li><strong>同步API可以从返回值中拿到API执行的结果, 但是异步API是不可以的</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (n1, n2) &#123; </span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> result = sum (<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 30</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMsg</span> () &#123; </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">  <span class="comment">// return undefined;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> msg = getMsg (); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li><strong>同步API从上到下依次执行，前面代码会阻塞后面代码的执行</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for循环后面的代码&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>异步API不会等待API执行完成后再向下执行代码</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代码开始执行&#x27;</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2秒后执行的代码&#x27;</span>)&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&quot;0秒&quot;后执行的代码&#x27;</span>)&#125;, <span class="number">0</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;代码结束执行&#x27;</span>);</span><br><span class="line"><span class="comment">//代码开始执行</span></span><br><span class="line"><span class="comment">//代码结束执行</span></span><br><span class="line"><span class="comment">//&quot;0秒&quot;后执行的代码</span></span><br><span class="line"><span class="comment">//2秒后执行的代码</span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/6d86977de88c4ee49cfefba1458a11ee.png" alt="img"></p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>自己定义函数让别人去调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getData函数定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span> (callback) &#123;&#125;</span><br><span class="line"><span class="comment">// getData函数调用</span></span><br><span class="line">getData ( <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>getData 函数有一个形参 <code>callback</code>，传递的实参是一个函数，将一个函数作为另外一个函数的形参，则此形参就叫做回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="string">&#x27;123&#x27;</span>);<span class="comment">// 使用callback可以调用下面的匿名函数function,并给callback传递参数</span></span><br><span class="line">    <span class="comment">//callback函数被调用了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;callback函数被调用了&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">    <span class="comment">// 123</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>我们可以调用 callback 回调函数将异步API执行的结果传递出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMsg</span> (callback) &#123;</span><br><span class="line">    <span class="comment">// 调用callback将异步API执行的结果传递出来</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        callback (&#123; <span class="attr">msg</span>: <span class="string">&#x27;Hello Node.js&#x27;</span> &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line">getMsg (<span class="keyword">function</span> (<span class="params">msg</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">    <span class="comment">// &#123; msg: &#x27;Hello Node.js&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Nodejs里面的异步API"><a href="#Nodejs里面的异步API" class="headerlink" title="Nodejs里面的异步API"></a>Nodejs里面的异步API</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./demo.txt&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>读取文件是需要时间的，文件读取的结果不能通过返回值的方式获取，需要通过回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>事件监测也是异步API</li></ul><blockquote><p>如果异步API后面代码的执行依赖当前异步API的执行结果，但实际上后续代码在执行的时候异步API还没有返回结果，这个问题要怎么解决呢？</p></blockquote><p>例如，我们需要依次读取A文件、B文件、C文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result2</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,(err,result3)=&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result3);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise 出现的目的是解决 Node.js 异步编程中回调地狱的问题。</p><p>实际上，Promise 本身是一个构造函数，我们要解决回调地狱的问题，需要先使用 new 运算符创建 Promise 实例，在创建 Promise 实例的过程中，需要传入一个匿名函数，在匿名函数中有两个参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(成功了做的事)</span><br><span class="line">       .<span class="title function_">catch</span>(失败了做的事)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;失败了&#x27;</span>) </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &#123;name: &#x27;张三&#x27;&#125;)</span></span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error); <span class="comment">// 失败了)</span></span><br></pre></td></tr></table></figure><p>例如，我们需要依次读取A文件、B文件、C文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./1.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./2.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">p3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    lreturn <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./3.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">p1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">r1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p2</span>();         <span class="comment">//返回一个promise对象</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r2);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(r3);</span><br><span class="line">    <span class="keyword">return</span> p3;</span><br><span class="line">&#125;)<span class="title class_">ES7</span>异步函数</span><br></pre></td></tr></table></figure><h2 id="ES7异步函数"><a href="#ES7异步函数" class="headerlink" title="ES7异步函数"></a>ES7异步函数</h2><p>异步函数是异步编程语法的终极解决方案，它可以让我们将异步代码写成同步的形式，让代码不再有回调函数嵌套，使代码变得清晰明了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="async关键字"><a href="#async关键字" class="headerlink" title="async关键字"></a>async关键字</h3><p>异步（Asynchronous）</p><ol><li>普通函数定义前加<code>async</code>关键字 普通函数变成异步函数</li><li>异步函数默认返回<code>promise</code>对象</li><li>在异步函数内部使用return关键字进行结果返回 结果会被包裹在promise对象中 <code>return</code>关键字代替了<code>resolve</code>方法</li><li>在异步函数内部使用<code>throw</code>关键字抛出程序异常</li><li>调用异步函数再链式调用<code>then</code>方法获取异步函数执行结果</li><li>调用异步函数再链式调用<code>catch</code>方法获取异步函数执行的错误信息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 普通函数定义前加async关键字，普通函数变成异步函数</span></span><br><span class="line"><span class="comment">// 2. 异步函数默认的返回值是promise 对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;发生了一些错误&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn ().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">//123</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);    <span class="comment">//发生了一些错误</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a>await关键字</h3><ul><li><strong>await关键字只能出现在异步函数中</strong></li><li><strong>await promise</strong> await后面只能写promise对象 写其他类型的API是不可以的</li><li><strong>await关键字是暂停异步函数向下执行 直到promise返回结果</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p1&#x27;</span>;<span class="comment">// 返回的是 promise 对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p2&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">p3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;p3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p1</span>();</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p2</span>();</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">p3</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><p>简单理解：</p><ul><li>async 是让方法变成异步</li><li>await 是等待异步方法执行完成</li></ul><h2 id="Node-js全局对象global"><a href="#Node-js全局对象global" class="headerlink" title="Node.js全局对象global"></a>Node.js全局对象global</h2><p>在浏览器中全局对象是 <code>window</code>，在 Node 中全局对象是 <code>global</code>。</p><p>Node 中全局对象有以下方法，可以在任何地方使用，global 可以省略</p><table><thead><tr><th align="center">方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">console.log()</td><td align="center">在控制台输出</td></tr><tr><td align="center">setTimeout()</td><td align="center">设置超时定时器</td></tr><tr><td align="center">clearTimeout()</td><td align="center">清除超时定时器</td></tr><tr><td align="center">setInterval()</td><td align="center">设置间歇定时器</td></tr><tr><td align="center">clearInterval()</td><td align="center">清除间歇定时器</td></tr></tbody></table><p>注意：Node中不存在 BOM、DOM，所以全局对象是 global。但是在 DOM、BOM 中也有这些方法，只是全局对象是 window。</p><h2 id="获取异步方法里面的数据"><a href="#获取异步方法里面的数据" class="headerlink" title="获取异步方法里面的数据"></a>获取异步方法里面的数据</h2><h3 id="回调函数获取"><a href="#回调函数获取" class="headerlink" title="回调函数获取"></a>回调函数获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调函数 获取异步方法里面的数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">callbck</span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> name=<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">        <span class="title function_">callbck</span>(name);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部获取异步方法里面的数据</span></span><br><span class="line"><span class="title function_">getData</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(data+<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise获取"><a href="#Promise获取" class="headerlink" title="Promise获取"></a>Promise获取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise来处理异步  resolve 成功的回调函数   reject失败的回调函数</span></span><br><span class="line"><span class="keyword">var</span> p=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">var</span> name=<span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">     <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()&lt;<span class="number">0.7</span>)&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(name);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Async、Await使用"><a href="#Async、Await使用" class="headerlink" title="Async、Await使用"></a>Async、Await使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());<span class="comment">// 您好nodejs</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>());  <span class="comment">//  Promise &#123; &#x27;您好nodejs&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>async 是让方法变成异步，它返回的是 Promise，那我们要获取 Promise 对象里面的字符串要如何做呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;   <span class="comment">//  Promise &#123; &#x27;您好nodejs&#x27; &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title function_">test</span>());  <span class="comment">//错误  : await必须得用在async的方法里面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;您好nodejs&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确获取异步方法里面的数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">await</span> <span class="title function_">test</span>();  <span class="comment">//获取异步方法里面的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>我们当然最好是要返回的是 Promise 对象，否则也没必要将方法变为异步了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 封装一个异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> name=<span class="string">&#x27;张三 222&#x27;</span>;   </span><br><span class="line">            <span class="title function_">resolve</span>(name);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data=<span class="keyword">await</span> <span class="title function_">test</span>();  <span class="comment">//获取异步方法里面的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h1 id="内置模块Path"><a href="#内置模块Path" class="headerlink" title="内置模块Path"></a>内置模块Path</h1><h2 id="path常见的API"><a href="#path常见的API" class="headerlink" title="path常见的API"></a>path常见的API</h2><ul><li>从路径中获取信息<ul><li>dirname：获取文件的父文件夹</li><li>basename：获取文件名</li><li>extname：获取文件扩展名</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.获取路径的信息</span></span><br><span class="line"><span class="keyword">const</span> filepath = <span class="string">&#x27;/User/why/abc.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(filepath)); <span class="comment">// /User/why</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(filepath)); <span class="comment">// abc.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(filepath)); <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><ul><li><code>path.join([...paths])</code> 方法使用平台特定的分隔符把全部给定的 <code>path</code> 片段连接到一起，并规范化生成的路径。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./02art-template.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;./baz&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;foo/bar/baz&#x27;</span></span><br><span class="line"></span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/foo&#x27;</span>,<span class="string">&#x27;bar&#x27;</span>,<span class="string">&#x27;/baz&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;foo/bar&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>path.resolve([...paths])</code> 把一个路径或路径片段的序列解析为一个绝对路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;/sxt&#x27;</span>, <span class="string">&#x27;qianduan&#x27;</span>, <span class="string">&#x27;zhongji&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> info1 = path.<span class="title function_">resolve</span>(...arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info1);</span><br><span class="line"><span class="comment">// D:\sxt\qianduan\zhongji</span></span><br></pre></td></tr></table></figure><ul><li><code>path.extname()</code> 获取文件(可以是一个路径文件)的扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&#x27;hello.md&#x27;</span>)); <span class="comment">// md</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径信息的扩展名</span></span><br><span class="line"><span class="keyword">let</span> strPath = <span class="string">&quot;http://www.xinhuanet.html&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(strPath)); <span class="comment">// html</span></span><br></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由指的就是针对不同请求的URL，处理不同的业务逻辑。</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220317161511622.png" alt="image-20220317161511622"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 解构写法,相当于 request.url</span></span><br><span class="line">    <span class="keyword">const</span> &#123; url &#125; = request;</span><br><span class="line">    <span class="keyword">if</span> (url == <span class="string">&#x27;/&#x27;</span> || url == <span class="string">&#x27;index&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到首页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url == <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;欢迎来到列表页&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&#x27;抱歉，您访问的页面出游了~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>在客户端和服务器之间进行请求 - 响应时，两种最常被用到的方法是：GET 和 POST</p><p>GET - 从指定的资源请求数据。(一般用于获取数据)<br>request.url 获取请求地址<br>request.method 获取请求方法<br>POST - 向指定的资源提交要被处理的数据。(一般用于提交数据)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应头</span></span><br><span class="line">    <span class="comment">//设置HTTP头部,状态码是200,文件类型是 html,字符集是 utf8 </span></span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">url</span>); <span class="comment">// 获取请求地址/index.html</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">method</span>); <span class="comment">// 获取请求方法GET/POST</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示给我们页面上面输出一句话并且结束响应</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>); <span class="comment">//监听端口</span></span><br></pre></td></tr></table></figure><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>参数被放置在浏览器地址栏中，例如：<a href="http://localhost:3000/?name=zhangsan&amp;age=20">http://localhost:3000/?name=zhangsan&amp;age=20</a></p><p>参数获取需要借助系统模块url，url模块用来处理url地址</p><p>request.url 获取 /name=zhangsan&amp;age=20</p><p>request.headers.host 获取 127.0.0.1:3000</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(url, <span class="string">`http://&#123;host&#125;`</span>);</span><br></pre></td></tr></table></figure><p>如上获取到 url 对象，再从对象中获取参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">    response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=UTF-8&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 解构写法,相当于 request.url</span></span><br><span class="line">    <span class="keyword">const</span> &#123; url &#125; = request;</span><br><span class="line">    <span class="comment">// 解构写法,相当于 request.headers.host</span></span><br><span class="line">    <span class="keyword">const</span> &#123; host &#125; = request.<span class="property">headers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url !== <span class="string">&#x27;/favicion.ico&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> myURL = <span class="keyword">new</span> <span class="title function_">URL</span>(url, <span class="string">`http://&#123;host&#125;`</span>);</span><br><span class="line">        response.<span class="title function_">write</span>(<span class="string">`name: <span class="subst">$&#123;myURL.searchParams.get(<span class="string">&quot;name&quot;</span>)&#125;</span>,age: <span class="subst">$&#123;myURL.searchParams.get(<span class="string">&quot;age&quot;</span>)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://127.0.0.1:3000/&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h2><ul><li>参数被放置在请求体中进行传输</li><li>获取 POST 参数需要使用 data 事件和 end 事件</li><li>使用 querystring 系统模块将参数转化为对象格式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">// 处理请求参数模块</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">  response.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;);</span><br><span class="line">  <span class="comment">// data 当请求参数传递的时候触发data事件</span></span><br><span class="line">  <span class="comment">// end 当请求参数传递完成的时候触发end事件</span></span><br><span class="line">  <span class="keyword">let</span> postParams = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">params</span>)=&gt;</span>&#123;</span><br><span class="line">    postParams += params;</span><br><span class="line">  &#125;)</span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(postParams);            <span class="comment">// 接收到的是一个字符串</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(queryString.<span class="title function_">parse</span>(postParams));        <span class="comment">// 使用queryString将字符串转化为对象    </span></span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/express/"/>
      <url>/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/express/</url>
      
        <content type="html"><![CDATA[<h1 id="express"><a href="#express" class="headerlink" title="express"></a>express</h1><p>Express 是一个基于<a href="https://so.csdn.net/so/search?q=Node&spm=1001.2101.3001.7020">Node</a>.js 平台，快速、开放、极简的web 开发框架，它提供一系列强大的特性，帮助你创建各种Web 和移动设备应用。</p><ul><li>英文官网：<a href="http://expressjs.com/">http://expressjs.com/</a></li><li>中文官网：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></li></ul><h2 id="Express安装"><a href="#Express安装" class="headerlink" title="Express安装"></a>Express安装</h2><p>安装 Expresss 框架，就是使用 npm 的命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><ul><li>–save 参数，表示自动修改 <code>package.json</code> 文件，自动添加依赖项目</li></ul><h2 id="Express简单使用"><a href="#Express简单使用" class="headerlink" title="Express简单使用"></a>Express简单使用</h2><p>app.get 主要用来显示数据</p><p>app.post 主要用于增加数据</p><p>app.put 主要用于修改数据</p><p>app.delete 主要用于删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/doLogin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;执行登录&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">put</span>(<span class="string">&#x27;/editUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;修改用户&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&#x27;/deleteUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="路由配置多级目录"><a href="#路由配置多级目录" class="headerlink" title="路由配置多级目录"></a>路由配置多级目录</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// 路由里面配置多级目录  http://localhost:3000/admin/user/edit</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/admin/user/add&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;admin user add&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">// app.get 主要用来显示数据</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/article&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;新闻页面&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//动态路由  配置路由的时候也要注意顺序</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/article/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id = req.<span class="property">params</span>[<span class="string">&quot;id&quot;</span>]; <span class="comment">//获取动态路由</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;动态路由&quot;</span> + id);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/article/add&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;article add&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>GET传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 实例化 express 赋值给 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 配置路由,匹配URI地址实现不同的功能</span></span><br><span class="line"><span class="comment">//get 传值  http://localhost:3000/product?name=zhangsan&amp;age=20</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/product&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> query = req.<span class="property">query</span>; <span class="comment">//获取get传值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name:&quot;</span> + query.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age:&quot;</span> + query.<span class="property">age</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;name:&quot;</span> + query.<span class="property">name</span> + <span class="string">&quot;age:&quot;</span> + query.<span class="property">age</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h2 id="Express中EJS的使用"><a href="#Express中EJS的使用" class="headerlink" title="Express中EJS的使用"></a>Express中EJS的使用</h2><p>EJS 是后台模板，可以把我们数据库和文件读取的数据显示到 HTML页面上面。它是一个第三方模块，需要通过 npm 安装。Express 框架里面集成了 EJS 模板引擎，所以我们来看下两者结合的使用。</p><p>1.安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs --save</span><br></pre></td></tr></table></figure><p>2.配置ejs <code>app.set(&quot;view engine&quot;,&quot;ejs)</code></p><p>3.使用ejs（默认加载模板引擎的文件夹是views，所以 index 前面不需要加 views）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问127.0.0.1:3000/  渲染的是index模板</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>之后我们在 <code>views</code> 文件夹下新建 <code>index.ejs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;我是一个ejs模板引擎&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这样我们就把我们自己写的HTML代码显示到HTML页面上</p><h3 id="EJS常用标签"><a href="#EJS常用标签" class="headerlink" title="EJS常用标签"></a>EJS常用标签</h3><ul><li>&lt;% %&gt; 流程控制标签</li><li>&lt;%= %&gt;输出标签(原文输出 HTML 标签)</li><li>&lt;%- %&gt;输出标签(HTML会被浏览器解析)</li></ul><h3 id="绑定数据"><a href="#绑定数据" class="headerlink" title="绑定数据"></a>绑定数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问127.0.0.1:3000/  渲染的是index模板</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&quot;你好ejs&quot;</span>;<span class="comment">// 假如这个数据是从数据库获取到的</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>,&#123;</span><br><span class="line"><span class="attr">title</span>: title, <span class="comment">// 这样就绑定到 index.ejs 模板里面了</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>接下来我们去 index.ejs 里面输出这个数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;我是一个ejs模板引擎&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&lt;%=title%&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220317210559599.png" alt="image-20220317210559599"></p><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><p>我们也可以绑定对象中的数据并将其渲染到 html 页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//配置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;ejs&quot;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> userinfo = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;news&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">userinfo</span>: userinfo,<span class="comment">// 绑定 userinfo 对象数据</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="输出-HTML标签"><a href="#输出-HTML标签" class="headerlink" title="输出 HTML标签"></a>输出 HTML标签</h3><p>我们也可以输出 HTML标签，既可以原格式输出，又可以解析 <code>HTML</code> 标签输出。</p><blockquote><p>&lt;%= %&gt;输出标签(原文输出 HTML 标签)</p><p>&lt;%- %&gt;输出标签(HTML会被浏览器解析)</p></blockquote><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><p>类似于C++的语法，但是左右会加尖括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;条件判断&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="keyword">if</span>(flag==<span class="literal">true</span>)&#123;%&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>flag=true<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line">&lt;%&#125;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;%&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;%&#125;<span class="keyword">else</span>&#123;%&gt;</span><br><span class="line">   不及格</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure><h3 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>循环遍历<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i=0;i&lt;list.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=list[i]%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;%for(let i=0;i&lt;newsList.length;i++)&#123;%&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;%=newsList[i].title%&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">            &lt;%&#125;%&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="引入模板"><a href="#引入模板" class="headerlink" title="引入模板"></a>引入模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- include(&#x27;footer.ejs&#x27;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="ejs后缀修改为html"><a href="#ejs后缀修改为html" class="headerlink" title="ejs后缀修改为html"></a>ejs后缀修改为html</h3><p>这是一个小技巧，看着.ejs 的后缀总觉得不爽，使用如下方法，可以将模板文件的后缀换成我们习惯的.html。</p><p>1.在 app.js 的头上定义ejs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.注册html 模板引擎代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>,ejs__express)</span><br></pre></td></tr></table></figure><p>3.将模板引擎转换成 html 代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>,<span class="string">&#x27;html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Express.static托管静态文件</p><p>我们的静态资源 img、css 等要如何引入呢？</p><p>1.调用 express.static 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;static&#x27;</span>))</span><br></pre></td></tr></table></figure><p>现在，static 目录下面的文件就可以访问了</p><p>2.在 ejs 里面正常引入css 即可</p><h2 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h2><p>中间件简单来说就是一个用作判断的东西，如果满足我们就next()</p><p><strong>Express 应用可使用如下几种中间件</strong></p><ul><li>应用级中间件</li><li>路由级中间件（用的少）</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件</li></ul><p>应用级中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、应用级中间件 (用于权限判断)</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;<span class="comment">// 匹配任何路由</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()); </span><br><span class="line">    <span class="title function_">next</span>();<span class="comment">// 表示匹配完成这个中间件之后程序继续向下执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、路由级中间件(用的比较少)</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/news/add&quot;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;执行增加新闻&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行增加新闻&quot;</span>)</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3、错误处理中间件  </span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">   res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;404&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内置服务</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;./static&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="获取GET请求参数"><a href="#获取GET请求参数" class="headerlink" title="获取GET请求参数"></a>获取GET请求参数</h3><p>GET 请求的参数在 URL 中，在原生 Node中，需要使用 url 模块来识别参数字符串。在 Express 中，不需要使用 <code>url</code>模块了，可以直接使用 <code>req.query</code> 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/?name=zhangsan&amp;age=20</span></span><br><span class="line">    <span class="keyword">let</span> query = req.<span class="property">query</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">name</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(query.<span class="property">age</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(req.<span class="property">query</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="获取POST请求参数"><a href="#获取POST请求参数" class="headerlink" title="获取POST请求参数"></a>获取POST请求参数</h3><p>获取 POST 请求参数需要加载第三方中间件 body-parser</p><p>首先下载 body-parse</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure><p>引入中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bodyParser = require(&#x27;body-parser&#x27;)</span><br></pre></td></tr></table></figure><p>配置中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json())</span><br></pre></td></tr></table></figure><p>接收 post 数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.body</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置第三方中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/doLogin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// req.body 获取post传值</span></span><br><span class="line">    <span class="keyword">var</span> body = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口  端口号建议写成3000以上</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220317213532665.png" alt="image-20220317213532665"></p>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/Ajax/"/>
      <url>/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>AJAX 全称为 <code>Asynchronous JavaScript And XML</code>，就是异步的 <code>JS</code> 和 <code>XML</code>。<br>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：<code>无刷新获取数据</code>。</p><p>Ajax 相当于浏览器发送请求与接收响应的代理人，以实现在不影响用户浏览页面的情况下，局部更新页面数据，从而提高用户体验</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/568aa71079ab4b6a973fddc68a6fc2fb.png" alt="img"></p><h1 id="Ajax的特点"><a href="#Ajax的特点" class="headerlink" title="Ajax的特点"></a>Ajax的特点</h1><h2 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h2><ol><li>可以无需刷新页面而与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。</li></ol><h2 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h2><ol><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好</li></ol><h1 id="http了解"><a href="#http了解" class="headerlink" title="http了解"></a>http了解</h1><p>HTTP（hypertext transport protocol）协议『超文本传输协议』，协议详细规定了浏览器和万维网服务器之间互相通信的规则。</p><h2 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h2><table><thead><tr><th>请求</th><th>内容</th></tr></thead><tbody><tr><td>行</td><td>POST  /s?ie=utf-8  HTTP/1.1</td></tr><tr><td>头</td><td>Host: atguigu.com                                                                            Cookie: name=guigu                                                                            Content-type: application/x-www-form-urlencoded                                             User-Agent: chrome 83</td></tr><tr><td>空行</td><td></td></tr><tr><td>体</td><td>username=admin&amp;password=admin</td></tr></tbody></table><p>请求行为get，体为空</p><p>为post，体可以不为空</p><h2 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h2><p>行    HTTP/1.1  200(状态码)  OK</p><p>头    Content-Type: text/html;charset=utf-8</p><p>​    Content-length: 2048</p><p>​    Content-encoding: gzip</p><p>空行   </p><p>体   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>尚硅谷<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="express的基本使用"><a href="#express的基本使用" class="headerlink" title="express的基本使用"></a>express的基本使用</h1><p>先初始化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init --yes</span><br></pre></td></tr></table></figure><p>安装express框架</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>在服务器端创建路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 是对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 是对响应报文的封装</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//设置响应</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO EXPRESS&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动, 8000 端口监听中....&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后启动这个端口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 这个文件的名字</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220308194631981.png" alt="image-20220308194631981"></p><h1 id="Nodejs工具"><a href="#Nodejs工具" class="headerlink" title="Nodejs工具"></a>Nodejs工具</h1><h2 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h2><p><code>nodemon</code> 会不停的<code>watch</code>你应用下面的所有文件，发现有文件被修改，就重新载入程序文件这样就实现了部署，修改了程序文件后马上就能看到变更后的结果。麻麻再也不用担心我的重启<code>nodejs</code>了</p><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon app.js</span><br></pre></td></tr></table></figure><h1 id="Ajax的使用"><a href="#Ajax的使用" class="headerlink" title="Ajax的使用"></a>Ajax的使用</h1><h2 id="1-Ajax实现步骤"><a href="#1-Ajax实现步骤" class="headerlink" title="1.Ajax实现步骤"></a>1.Ajax实现步骤</h2><p>1.创建Ajax对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><p>2.告诉Ajax 请求地址以及请求方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(method,url);</span><br></pre></td></tr></table></figure><p>3.发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(body);</span><br></pre></td></tr></table></figure><p>4.获取服务器端给客户端的响应数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// xhr.responseText 接收文本格式的响应数据</span></span><br><span class="line">    <span class="comment">// xhr.responseXML 接收 xml 格式的响应数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-get请求"><a href="#2-get请求" class="headerlink" title="2.get请求"></a>2.get请求</h2><p>我们先要在<code>express</code>中创建get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX - 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>新建一个HTML文件，写<code>ajax</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1.创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2.告诉Ajax对象要向哪发送地址，以什么样的方式发送请求</span></span><br><span class="line">    <span class="comment">// (1)请求方式 (2)请求地址</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://localhost:8000/server&#x27;</span>);</span><br><span class="line">    <span class="comment">// 3.发送请求</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4.获取服务器端响应到客户端的数据</span></span><br><span class="line"> <span class="comment">// on  when 当....时候</span></span><br><span class="line"><span class="comment">// readystate 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line"><span class="comment">// change  改变</span></span><br><span class="line">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//判断 (服务端返回了所有的结果)</span></span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                    <span class="comment">//判断响应状态码 200  404  403 401 500</span></span><br><span class="line">                    <span class="comment">// 2xx 成功</span></span><br><span class="line">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                        <span class="comment">//处理结果  行 头 空行 体</span></span><br><span class="line">                        <span class="comment">//响应 </span></span><br><span class="line">                        <span class="comment">// console.log(xhr.status);//状态码</span></span><br><span class="line">                        <span class="comment">// console.log(xhr.statusText);//状态字符串</span></span><br><span class="line">                        <span class="comment">// console.log(xhr.getAllResponseHeaders());//所有响应头</span></span><br><span class="line">                        <span class="comment">// console.log(xhr.response);//响应体</span></span><br><span class="line">                        <span class="comment">//设置 result 的文本</span></span><br><span class="line">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220308203936974.png" alt="image-20220308203936974"></p><h2 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h2><p>我们先要在<code>express</code>中创建post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建对象</span></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">  <span class="comment">//2. 初始化 设置类型与 URL</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8000/server&#x27;</span>);</span><br><span class="line">  <span class="comment">//设置请求头</span></span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line">  xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;atguigu&#x27;</span>);</span><br><span class="line">  <span class="comment">//3. 发送</span></span><br><span class="line">  xhr.<span class="title function_">send</span>(<span class="string">&#x27;a=100&amp;b=200&amp;c=300&#x27;</span>);</span><br><span class="line">  <span class="comment">// xhr.send(&#x27;a:100&amp;b:200&amp;c:300&#x27;);</span></span><br><span class="line">  <span class="comment">// xhr.send(&#x27;1233211234567&#x27;);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//4. 事件绑定</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//判断</span></span><br><span class="line">      <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">              <span class="comment">//处理服务端返回的结果</span></span><br><span class="line">              result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h2><p>我们可以设置请求头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span><br><span class="line"><span class="comment">//自定义的会报错</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;atguigu&#x27;</span>);</span><br></pre></td></tr></table></figure><p>设置了以下，自定义的就不报错了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以接收任意类型的请求 </span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;HELLO AJAX POST&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a><code>JSON</code>格式</h2><ol><li>在真实的项目中，服务器端大多数情况下会以 <code>JSON</code> 对象作为响应数据的格式。</li><li>当客户端拿到响应数据时，要将 JSON 数据和 <code>HTML</code> 字符串进行拼接，然后将拼接的结果展示在页面中。</li><li>在 <code>http</code> 请求与响应的过程中，无论是请求参数还是响应内容，如果是对象类型，最终都会被转换为对象字符串进行传输。</li></ol><p>先在express中发出json格式的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JSON 响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">//响应一个数据</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//send()这里面只能是一个字符串，data是一个对象，要把他转化成字符串</span></span><br><span class="line">    <span class="comment">//对对象进行字符串转换</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">//设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在HTML中接收数据</p><p>手动化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">result.<span class="property">innerHTML</span> = data.<span class="property">name</span>;</span><br></pre></td></tr></table></figure><p>自动化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//设置响应体数据的类型</span></span><br><span class="line">            xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line"><span class="comment">// 2. 自动转换</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">            result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>.<span class="property">name</span>; </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">     <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">     <span class="comment">//设置响应体数据的类型</span></span><br><span class="line">     xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span><br><span class="line">     <span class="comment">//初始化</span></span><br><span class="line">     xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:8000/json-server&#x27;</span>);</span><br><span class="line">     <span class="comment">//发送</span></span><br><span class="line">     xhr.<span class="title function_">send</span>();</span><br><span class="line">     <span class="comment">//事件绑定</span></span><br><span class="line">     xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">                 <span class="comment">// 1. 手动对数据转化</span></span><br><span class="line">                 <span class="comment">// let data = JSON.parse(xhr.response);</span></span><br><span class="line">                 <span class="comment">// console.log(data);</span></span><br><span class="line">                 <span class="comment">// result.innerHTML = data.name;</span></span><br><span class="line">                 <span class="comment">// 2. 自动转换</span></span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                 result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>.<span class="property">name</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="处理ie缓存问题"><a href="#处理ie缓存问题" class="headerlink" title="处理ie缓存问题"></a>处理ie缓存问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/ie?t=&#x27;</span>+<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><p>给他加一个时间戳，这里浏览器每次刷新都不一样</p><h2 id="超时与网络异常"><a href="#超时与网络异常" class="headerlink" title="超时与网络异常"></a>超时与网络异常</h2><p>在express中设置延时响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//延时响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/delay&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//设置响应头  设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;延时响应&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//超时设置 2s 设置</span></span><br><span class="line"> xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line"> <span class="comment">//超时回调</span></span><br><span class="line"> xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&quot;网络异常, 请稍后重试!!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//网络异常回调</span></span><br><span class="line"> xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="title function_">alert</span>(<span class="string">&quot;你的网络似乎出了一些问题!&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><p>这个调用<code>ajax</code>中的<code>abort</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abort</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重复请求问题"><a href="#重复请求问题" class="headerlink" title="重复请求问题"></a>重复请求问题</h2><p>当用户一直点一个按钮，会发送很多相同的请求</p><p>我们可以在他发送下一个相同请求时，删除上一个请求，保持高效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line"><span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> x = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//标识变量</span></span><br><span class="line"><span class="keyword">let</span> isSending = <span class="literal">false</span>; <span class="comment">// 是否正在发送AJAX请求</span></span><br><span class="line"></span><br><span class="line">btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//判断标识变量</span></span><br><span class="line">    <span class="keyword">if</span>(isSending) x.<span class="title function_">abort</span>();<span class="comment">// 如果正在发送, 则取消该请求, 创建一个新的请求</span></span><br><span class="line">    x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">//修改 标识变量的值</span></span><br><span class="line">    isSending = <span class="literal">true</span>;</span><br><span class="line">    x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>,<span class="string">&#x27;http://127.0.0.1:8000/delay&#x27;</span>);</span><br><span class="line">    x.<span class="title function_">send</span>();</span><br><span class="line">    x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">//修改标识变量</span></span><br><span class="line">            isSending = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// abort</span></span><br><span class="line">btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    x.<span class="title function_">abort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a>jQuery中的Ajax</h1><p><code>jQuery</code>中简化了<code>ajax</code>的方法，方便更好书写和使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="comment">//url</span></span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/jquery-server&#x27;</span>,</span><br><span class="line">        <span class="comment">//参数</span></span><br><span class="line">        <span class="attr">data</span>: &#123;<span class="attr">a</span>:<span class="number">100</span>, <span class="attr">b</span>:<span class="number">200</span>&#125;,</span><br><span class="line">        <span class="comment">//请求类型</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="comment">//响应体结果</span></span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        <span class="comment">//成功的回调</span></span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//超时时间</span></span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">2000</span>,</span><br><span class="line">        <span class="comment">//失败的回调</span></span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错啦!!&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//头信息</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="attr">c</span>:<span class="number">300</span>,</span><br><span class="line">            <span class="attr">d</span>:<span class="number">400</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="axios中的Ajax"><a href="#axios中的Ajax" class="headerlink" title="axios中的Ajax"></a>axios中的Ajax</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios</span></span><br><span class="line">       <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//配置 baseURL</span></span><br><span class="line">       axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span>;</span><br><span class="line">   </span><br><span class="line">       btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">axios</span>(&#123;</span><br><span class="line">               <span class="comment">//请求方法</span></span><br><span class="line">               method : <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">               <span class="comment">//url</span></span><br><span class="line">               <span class="attr">url</span>: <span class="string">&#x27;/axios-server&#x27;</span>,</span><br><span class="line">               <span class="comment">//url参数</span></span><br><span class="line">               <span class="attr">params</span>: &#123;</span><br><span class="line">                   <span class="attr">vip</span>:<span class="number">10</span>,</span><br><span class="line">                   <span class="attr">level</span>:<span class="number">30</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//头信息</span></span><br><span class="line">               <span class="attr">headers</span>: &#123;</span><br><span class="line">                   <span class="attr">a</span>:<span class="number">100</span>,</span><br><span class="line">                   <span class="attr">b</span>:<span class="number">200</span></span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="comment">//请求体参数</span></span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                   <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                   <span class="attr">password</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">               &#125;,</span><br><span class="line">               </span><br><span class="line"><span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">               </span><br><span class="line">                 <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">                     <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">                  &#125;,</span><br><span class="line">     </span><br><span class="line">                  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// default</span></span><br><span class="line">               </span><br><span class="line">           &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">               <span class="comment">//响应状态码</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">               <span class="comment">//响应状态字符串</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">               <span class="comment">//响应头信息</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">               <span class="comment">//响应体</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack</title>
      <link href="/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/webpack/"/>
      <url>/2022/04/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h2><p>webpack 是一种前端资源构建工具，一个静态模块打包器(module bundler)。</p><ul><li><code>前端资源构建工具</code>： 浏览器有些语言不能识别，比如js，less，webpack可以将其转化成可以识别的语言，css等。</li><li><code>静态模块打包器(module bundler)</code>： </li></ul><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220328145135635.png" alt="image-20220328145135635"></p><p>引入的文件我们称为依赖，如jq，less等，他们合在一起叫<code>chunk块</code>，打包成一些可以识别的语言，</p><p>输出为<code>bundle</code></p><h2 id="webpack-五个核心概念"><a href="#webpack-五个核心概念" class="headerlink" title="webpack 五个核心概念"></a>webpack 五个核心概念</h2><p><strong>Entry</strong><br>  入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><p><strong>Output</strong><br>  输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><p><strong>Loader</strong>(翻译)<br>  Loader 让 webpack 能够去处理那些非 JavaScript 文件(webpack 自身只理解<br>JavaScript)</p><p><strong>Plugins</strong><br>  插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，<br>一直到重新定义环境中的变量等。</p><p><strong>Mode</strong><br>  模式(Mode)指示 webpack 使用相应模式的配置。</p><p>development：生产模式，能让代码本地调试<br>运行的环境</p><p>production： 开发模式，能让代码优化上线<br>运行的环境</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>初始化 package.json</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><p>下载并安装 webpack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br><span class="line">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>开发环境指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/index.js -o build/js/built.js --mode=development</span><br></pre></td></tr></table></figure><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成<br>浏览器能识别的语法。</p><p>当我们使用这个指令时， webpack会以 ./src/index.js 为入口文件开始打包，打包后输出到 ./build/built.js</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220328151350982.png" alt="image-20220328151350982"></p><p>在这里是打包后的</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220328151423474.png" alt="image-20220328151423474"></p><p>生产环境指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/index.js -o build/js/built.js --mode=production</span><br></pre></td></tr></table></figure><p>功能：在开发配置功能上多一个功能，压缩代码。</p><p><strong>注意：</strong></p><ol><li><p>webpack能处理js/json资源，不能处理css/img等其他资源</p></li><li><p>生产环境和开发环境将ES6模块化编译成浏览器能识别的模块化~</p></li><li><p>生产环境比开发环境多一个压缩js代码。</p></li></ol><h2 id="打包样式资源"><a href="#打包样式资源" class="headerlink" title="打包样式资源"></a>打包样式资源</h2><p>我们知道webpack不能处理css/img等样式资源，这时我们需要用到他的loader。</p><p>首先需要在外面新建一个webpack.config.js,</p><p>在这里面配置webpack要做的事情。</p><p>首先下载安装 loader 包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-loader style-loader less-loader less -D</span><br></pre></td></tr></table></figure><p>在配置loader(css)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loader的配置</span></span><br><span class="line"> <span class="attr">module</span>: &#123;</span><br><span class="line">   <span class="attr">rules</span>: [</span><br><span class="line">     <span class="comment">// 详细loader配置</span></span><br><span class="line">     <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="comment">// 匹配哪些文件</span></span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">       <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">       <span class="attr">use</span>: [</span><br><span class="line">         <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line">         <span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">         <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">         <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">         <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">       &#125;  </span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p> __dirname nodejs的变量，代表当前文件的目录绝对路径</p><p>use数组中loader执行顺序：从右到左，从下到上 依次执行</p><p>在配置loader(less)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">     <span class="attr">use</span>: [</span><br><span class="line">       <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">       <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">       <span class="comment">// 需要下载 less-loader和less</span></span><br><span class="line">       <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  webpack.config.js  webpack的配置文件</span></span><br><span class="line"><span class="comment">    作用: 指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所有构建工具都是基于nodejs平台运行的~模块化默认采用commonjs。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack配置</span></span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="comment">// __dirname nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader的配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 详细loader配置</span></span><br><span class="line">      <span class="comment">// 不同文件必须配置不同loader处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 匹配哪些文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line">          <span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">          <span class="comment">// 需要下载 less-loader和less</span></span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins的配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 详细plugins的配置</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打包-HTML-资源"><a href="#打包-HTML-资源" class="headerlink" title="打包 HTML 资源"></a>打包 HTML 资源</h2><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220328164939019.png" alt="image-20220328164939019"></p><p>这个不在是样式资源，我们需要用到<code>plugin</code></p><p> <code>loader: 1. 下载  2. 使用（配置loader）</code></p><p> <code>plugins: 1. 下载  2. 引入  3. 使用</code></p><p>下载安装 plugin 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在plugins的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// plugins的配置</span><br><span class="line">plugins: [</span><br><span class="line">  // 详细plugins的配置</span><br><span class="line">  // html-webpack-plugin</span><br><span class="line">  // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span><br><span class="line">  // 需求：需要有结构的HTML文件</span><br><span class="line">  new HtmlWebpackPlugin(&#123;</span><br><span class="line">      // 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span><br><span class="line">      template: &#x27;./src/index.html&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  loader: 1. 下载   2. 使用（配置loader）</span></span><br><span class="line"><span class="comment">  plugins: 1. 下载  2. 引入  3. 使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// loader的配置</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="comment">// html-webpack-plugin</span></span><br><span class="line">    <span class="comment">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="comment">// 需求：需要有结构的HTML文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">        <span class="comment">//复制到bulid/built.js中</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打包图片资源"><a href="#打包图片资源" class="headerlink" title="打包图片资源"></a>打包图片资源</h2><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220328164952520.png" alt="image-20220328164952520"></p><p>下载安装 loader 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-loader url-loader file-loader</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2022/04/08/vue/Vuex/"/>
      <url>/2022/04/08/vue/Vuex/</url>
      
        <content type="html"><![CDATA[<h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><h2 id="什么是Vuex"><a href="#什么是Vuex" class="headerlink" title="什么是Vuex"></a>什么是Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。</p><ul><li>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</li><li>Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools</a><a href="https://github.com/vuejs/vue-devtools"> extension</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</li></ul><p><strong>状态管理</strong></p><p>多个组件共享的变量全部存储在一个对象里面，然后，将这个对象放在顶层的<code>Vue实例</code>中，让其他组件可以使用</p><p>并且它里面所有的属性都是<code>响应式</code></p><h2 id="单界面的状态管理"><a href="#单界面的状态管理" class="headerlink" title="单界面的状态管理"></a>单界面的状态管理</h2><p>我们知道，要在单个组件中进行状态管理是一件非常简单的事情。</p><img src="C:\Users\11793\AppData\Roaming\Typora\typora-user-images\image-20220407164902905.png" alt="image-20220407164902905" style="zoom:50%;" /><p>这图片中的三种东西如下：</p><ul><li>State：状态</li><li>View：视图层，可以针对 State 的变化，显示不同的信息</li><li>Actions：这里的Actions主要是用户的各种操作：点击、输入等等，会导致状态的变化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>当前计数:&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter+=1&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter-=1&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;HelloWorld&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">counter</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这个案例中</p><p>counter需要某种方式被记录下来，也就是我们的State。</p><p>counter目前的值需要被显示在界面中，也就是我们的View部分。</p><p>界面发生某些操作时（我们这里是用户的点击，也可以是用户的input），需要去更新状态，也就是我们的Actions。</p><h2 id="多界面状态管理"><a href="#多界面状态管理" class="headerlink" title="多界面状态管理"></a>多界面状态管理</h2><ul><li>多个视图都依赖同一个状态(一个状态改了，多个界面需要进行更新)</li><li>不同界面的 Actions 都想修改同一个状态(Home.vue 需要修改，Profile.vue 也需要修改这个状态)</li></ul><p>就是一个属性，所有视图都要用</p><p>全局单例模式(大管家)</p><ul><li>我们现在要做的就是将共享的状态抽取出来，交给我们的大管家，统一进行管理。</li><li>之后，你们每个视图，按照我<strong>规定好的</strong>规定，进行访问和修改等操作。</li></ul><p>具体操作：</p><p>1.我们创建一个文件夹 src/store，并且在其中创建一个 index.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>2.来到 src/main.js文件，导入store对象，并且挂载到new Vue中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="comment">// 1.导入store对象</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 2.挂载 store</span></span><br><span class="line">    store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.这样，在其他Vue组件中，我们就可以通过 <code>this.$store</code>的方式，获取到这个store对象了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>使用步骤小结：</p><ol><li><p>提取出一个公共的 store 对象，用于保存在多个组件中共享的状态</p></li><li><p>将 store 对象放置在 <code>new Vue</code> 对象中，这样可以保证在所有的组件中都可以使用到</p></li><li><p>在其他组件中使用 store 对象中保存的状态即可</p><p>  通过 <code>this.$store.state</code> 属性的方式来访问状态</p><p>  通过 <code>this.$store.commit(&#39;mutation中方法&#39;)</code> 来修改状态</p></li><li><p>我们通过提交 mutation 的方式，而非直接改变 <code>store.state.count</code></p></li><li><p>这是因为 Vuex 可以更明确的追踪状态的变化，所以不要直接改变 store.state.count 的值</p></li></ol><h2 id="Vuex核心概念"><a href="#Vuex核心概念" class="headerlink" title="Vuex核心概念"></a>Vuex核心概念</h2><p>Vuex有几个比较核心的概念:</p><ul><li>State</li><li>Getters</li><li>Mutation</li><li>Action</li><li>Module</li></ul><h3 id="State-单-状态树"><a href="#State-单-状态树" class="headerlink" title="State 单-状态树"></a>State 单-状态树</h3><p>Vuex提出使用单一状态树, 什么是单一状态树呢？</p><ul><li><p>英文名称是Single Source of Truth，也可以翻译成单一数据源。</p></li><li><p>如果你的状态信息是保存到多个Store对象中的，那么之后的管理和维护等等都会变得特别困难，<code>所以Vuex也使用了单一状态树来管理应用层级的全部状态</code>。单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护。</p></li></ul><h3 id="Getters基本使用"><a href="#Getters基本使用" class="headerlink" title="Getters基本使用"></a>Getters基本使用</h3><p>有时候，我们需要从 store 中获取一些 state 变异后的状态，比如下面的 Store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">students</span>: [</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">100</span>,<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">111</span>,<span class="attr">name</span>: <span class="string">&#x27;kobe&#x27;</span>,<span class="attr">age</span>: <span class="number">21</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">112</span>,<span class="attr">name</span>: <span class="string">&#x27;lucy&#x27;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">113</span>,<span class="attr">name</span>: <span class="string">&#x27;lilei&#x27;</span>,<span class="attr">age</span>: <span class="number">2</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">       <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">       &#125; </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h4 id="Getters作为参数和传递参数"><a href="#Getters作为参数和传递参数" class="headerlink" title="Getters作为参数和传递参数"></a>Getters作为参数和传递参数</h4><p>如果我们已经有了一个获取所有年龄大于20岁学生的列表 getters，那么代码可以这样来写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">     <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">     <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// 获取年龄大于20的学生个数</span></span><br><span class="line">     <span class="title function_">more20stuLength</span>(<span class="params">state,getters</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> getters.<span class="property">more20stu</span>.<span class="property">length</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>getters 默认是不能传递参数的, 如果希望传递参数, 那么只能让getters本身返回另一个函数.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">   <span class="comment">// 获取年龄大于20的学生对象</span></span><br><span class="line">   <span class="title function_">more20stu</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt;<span class="number">20</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 获取年龄大于20的学生个数</span></span><br><span class="line">   <span class="title function_">more20stuLength</span>(<span class="params">state,getters</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> getters.<span class="property">more20stu</span>.<span class="property">length</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 让用户自己决定获取年龄大于多少</span></span><br><span class="line">   <span class="title function_">moreAgeStu</span>(<span class="params">state</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">age</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> state.<span class="property">students</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="property">age</span> &gt; age)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样我们在其他 .vue 组件中就可以传入年龄数值筛选了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.more20stuLength&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;$store.getters.moreAgeStu(8)&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// @ is an alias to /src</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">HelloWorld</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="Mutation状态更新"><a href="#Mutation状态更新" class="headerlink" title="Mutation状态更新"></a>Mutation状态更新</h3><ul><li>Vuex的store状态的更新唯一方式：提交<strong>Mutation</strong></li><li>Mutation主要包括两部分：<ul><li>字符串的<strong>事件类型（type）</strong></li><li>一个<strong>回调函数(handler)</strong> 该回调函数的第一个参数就是 state</li></ul></li></ul><p>1.mutation 的定义方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>2.通过 mutation 更新</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Mutation传递参数"><a href="#Mutation传递参数" class="headerlink" title="Mutation传递参数"></a>Mutation传递参数</h4><p>在通过mutation更新数据的时候, 有可能我们希望携带一些<strong>额外的参数</strong>，参数被称为 mutation 的载荷(Payload)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        state.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        state.<span class="property">count</span>--</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementCount</span>(<span class="params">state,count</span>)&#123;</span><br><span class="line">        state.<span class="property">counter</span> += count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中来修改状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;incrementCount&#x27;</span>,count)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>但是如果参数不是一个呢？</p><p>比如我们有很多参数需要传递，这个时候，我们通常会以对象的形式传递，也就是 payload 是一个对象。</p><p>这个时候可以再从对象中取出相关的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>--</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">incrementCount</span>(<span class="params">state,count</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> += count</span><br><span class="line">        &#125;,</span><br><span class="line">         <span class="title function_">addStudent</span>(<span class="params">state,stu</span>)&#123;</span><br><span class="line">            state.<span class="property">students</span>.<span class="title function_">push</span>(stu)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中来修改状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>-1&lt;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(5)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addCount(10)&quot;</span>&gt;</span>+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addStudent&quot;</span>&gt;</span>添加学生<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;decrement&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;incrementCount&#x27;</span>,count)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addStudent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> stu = &#123;<span class="attr">id</span>: <span class="number">114</span>, <span class="attr">name</span>: <span class="string">&#x27;alan&#x27;</span>,<span class="attr">age</span>: <span class="number">35</span>&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addStudent&#x27;</span>,stu)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Mutation提交风格"><a href="#Mutation提交风格" class="headerlink" title="Mutation提交风格"></a>Mutation提交风格</h4><p>上面的通过 <strong>commit</strong> 进行提交是一种普通的方式</p><p>Vue 还提供了另外一种风格，它是一个包含 type 属性的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addCount</span>(<span class="params">count</span>)&#123;</span><br><span class="line">    <span class="comment">// 1.普通的提交封装</span></span><br><span class="line">    <span class="comment">// this.$store.commit(&#x27;incrementCount&#x27;,count)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.特殊的提交封装</span></span><br><span class="line">    <span class="variable language_">this</span>.&amp;store.<span class="title function_">commit</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;incrementCount&#x27;</span>,</span><br><span class="line">        count</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="Mutation响应规则"><a href="#Mutation响应规则" class="headerlink" title="Mutation响应规则"></a>Mutation响应规则</h4><p>Vuex 的 store 中的 state 是响应式的，当 state 中的数据发生改变时，Vue 组件会自动更新</p><p>这就要求我们必须遵守一些<code>Vuex</code>对应的规则：</p><ol><li>提前在 store 中初始化好所需的属性</li><li>当给 state 中的对象添加新属性时，使用下面的方式</li></ol><ul><li>方式一：使用 <code>Vue.set(obj,&#39;newProp&#39;,123)</code></li><li>方式二：用新对象给就旧对象重新赋值</li></ul><p>例如：</p><p>我们在 <code>index.js</code> 中增加 info 状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">info</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">       <span class="comment">// 方式一:Vue.set()</span></span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">set</span>(state.<span class="property">info</span>,<span class="string">&#x27;height&#x27;</span>,payload.<span class="property">height</span>)</span><br><span class="line">       <span class="comment">// 方式二:给 info 赋值一个新的对象</span></span><br><span class="line">       state.<span class="property">info</span> = &#123;...state.<span class="property">info</span>,<span class="string">&#x27;height&#x27;</span>:payload.<span class="property">height</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们在其他 .vue 组件中修改状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的个人信息: &#123;&#123;info&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateInfo&quot;</span>&gt;</span>更新信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">info</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">updateInfo</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;updateInfo&#x27;</span>,&#123;<span class="attr">height</span>: <span class="number">1.88</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="Mutation常量类型-概念"><a href="#Mutation常量类型-概念" class="headerlink" title="Mutation常量类型-概念"></a>Mutation常量类型-概念</h4><p>我们来考虑下面的问题：</p><ul><li>在 mutation 中，我们定义了很多事件类型(也就是其中的方法名称)</li><li>当我们的项目增大时，Vuex 管理的状态越来越多，需要更新状态的情况越来越多, 那么意味着 Mutation 中的方法越来越多</li><li>方法过多，使用者需要花费大量的精力的经历去记住这些方法，甚至是多个文件间来回切换, 查看方法名称, 甚至如果不是复制的时候, 可能还会出现写错的情况.</li></ul><p>如何避免上述问题呢？</p><ul><li>在各种Flux实现中, 一种很常见的方案就是使用常量替代 Mutation 事件的类型</li><li>我们可以将这些常量放在一个单独的文件中, 方便管理以及让整个app所有的事件类型一目了然.</li></ul><p>具体怎么做呢？</p><ul><li>我们可以创建一个文件: mutation-types.js, 并且在其中定义我们的常量</li><li>定义常量时, 我们可以使用ES2015中的风格, 使用一个常量来作为函数的名称.</li></ul><h3 id="Action的基本定义"><a href="#Action的基本定义" class="headerlink" title="Action的基本定义"></a>Action的基本定义</h3><p>我们强调，不要在 Mutation 中进行异步操作，但是某些情况，我们确实希望在 Vuex 中进行一些异步操作，比如网络请求，必然是异步的，Action 类似于 Mutation，但是是用来代替 Mutation 进行异步操作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>context 是什么？</p><ul><li>context 是 store 对象具有相同方法和属性的对象</li><li>也就是说，我们可以通过 context 去进行 commit 相关的操作，也可以获取 context.state 等。</li></ul><h4 id="Action的分发"><a href="#Action的分发" class="headerlink" title="Action的分发"></a>Action的分发</h4><p>在Vue组件中，如果我们调用 action 中的方法，那么就需要使用 dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，也是支持传递 payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>, &#123;<span class="attr">cCount</span>: <span class="number">5</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">state,payload</span>)&#123;</span><br><span class="line">            state.<span class="property">count</span> += payload.<span class="property">cCount</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params">context,payload</span>)&#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>,payload)</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出store对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h4 id="Action返回的Promise"><a href="#Action返回的Promise" class="headerlink" title="Action返回的Promise"></a>Action返回的Promise</h4><p>在 Action 中，我们可以将异步操作放在一个 Promise 中，并且在成功或者失败之后，调用对应的 resolve 或 reject</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">context</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">                <span class="title function_">resolve</span>()</span><br><span class="line">            &#125;,<span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在其他 Vue 组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成了更新操作&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认识-Module"><a href="#认识-Module" class="headerlink" title="认识 Module"></a>认识 Module</h2><p>Module 是模块的意思，为什么在 Vuex 中我们要使用模块呢？</p><ul><li>Vue 使用单一状态树，那么也意味着很多状态都会交给 Vuex 来管理</li><li>当应用变得非常复杂时， store 对象就有可能变得相当臃肿</li><li>为了解决这个问题，Vuex 允许我们将 store 分割成某块，而每个模块拥有自己的 state、mutations、action、getters等</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleA</span> = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ModuleB</span> = &#123;</span><br><span class="line">    <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: moduleA,</span><br><span class="line">        <span class="attr">b</span>: moduleB</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.<span class="property">state</span>.<span class="property">a</span><span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.<span class="property">state</span>.<span class="property">b</span><span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue-router路由</title>
      <link href="/2022/04/08/vue/Vue-router%E8%B7%AF%E7%94%B1/"/>
      <url>/2022/04/08/vue/Vue-router%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-router路由"><a href="#Vue-router路由" class="headerlink" title="Vue-router路由"></a>Vue-router路由</h1><h1 id="Vue-router中的编程式"><a href="#Vue-router中的编程式" class="headerlink" title="Vue-router中的编程式"></a>Vue-router中的编程式</h1><h2 id="声明式导航-amp-编程式导航"><a href="#声明式导航-amp-编程式导航" class="headerlink" title="声明式导航&amp;编程式导航"></a>声明式导航&amp;编程式导航</h2><p>在浏览器中，点击链接实现导航的方式，叫做<code>声明式导航</code>。例如：</p><ul><li>普通网页中点击 <code>&lt;a&gt;</code> 链接，vue 项目中点击 <code>&lt;router-link&gt;</code> 都属于声明式导航</li></ul><p>在浏览器中，调用<code>API方法</code>实现导航的方式，叫做<code>编程式导航</code>。例如：</p><ul><li>普通网页中调用 location.href 跳转到新页面的方式，属于编程式导航</li></ul><h2 id="编程式导航API"><a href="#编程式导航API" class="headerlink" title="编程式导航API"></a>编程式导航API</h2><p><code>this.$router.push(&#39;hash地址&#39;)</code></p><p>跳转到指定 hash 地址，并增加一条历史记录</p><p><code>this.$router.replace(&#39;hash地址&#39;)</code></p><p>跳转到指定的 hash 地址，并替换掉当前的历史记录</p><p><code>this.$router.go(数值n)</code></p><p>实现导航历史前进、后退</p><h3 id="router-push"><a href="#router-push" class="headerlink" title="$router.push"></a>$router.push</h3><p>通过 <code>this.$router.push()</code> 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。示例代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;gotoMovie&quot;</span>&gt;</span> 跳转到Movie页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">gotoMovie</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/movie&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="router-replace"><a href="#router-replace" class="headerlink" title="$router.replace"></a>$router.replace</h3><p>调用 this.$router.replace() 方法，可以跳转到指定的 hash 地址，从而展示对应的组件页面。</p><p>push 和 replace 的区别：</p><ul><li>push 会增加一条历史记录</li><li>replace 不会增加历史记录，而是替换掉当前的历史记录</li></ul><h3 id="router-go"><a href="#router-go" class="headerlink" title="$router.go"></a>$router.go</h3><p>调用 <code>this.$router.go()</code> 方法，可以在浏览历史中前进和后退，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Home组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span> 后退 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">goBack</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 后退到之前的组件页面</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(-<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>注意，一般只会前进和后退一层页面，因此 vue-router 提供了如下两个便捷方法：</p></blockquote><ol><li><p>```<br>$router.back()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 在历史记录中， 后退到上一个页面</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   $router.forward()</span><br></pre></td></tr></table></figure><ul><li>在历史记录中， 前进到下一个页面</li></ul></li></ol><h2 id="URL的hash"><a href="#URL的hash" class="headerlink" title="URL的hash"></a>URL的hash</h2><ul><li>URL的hash也就是锚点(#), 本质上是改变 window.location 的 href 属性.</li><li>我们可以通过直接赋值 location.hash 来改变 href , 但是页面不发生刷新</li></ul><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/19ec20f16a23490ca66a02e7c73b1887.png" alt="img"></p><p>我们可以通过HTML5新增的两种方式来改变URL</p><h3 id="pushState"><a href="#pushState" class="headerlink" title="pushState"></a>pushState</h3><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/55ecf60edb8c466ca05eea65b8dd8122.png" alt="img"></p><h3 id="replaceState"><a href="#replaceState" class="headerlink" title="replaceState"></a>replaceState</h3><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/479dae734fb94ca7b36f1b85e35d14c3.png" alt="img"></p><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.安装 vue-router</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure><p>2.在模块化工程中使用它(因为它是一个插件，所以可以通过 Vue.use() 来安装路由功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 Vue 和 VueRouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用 Vue.use() 函数,把 VueRouter 安装为 Vue 的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 VueRouter 对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.将 router 对象传入到 vue 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>3.使用 vue-router 的步骤</p><ol><li>创建路由组件</li><li>配置路由映射：组件和路径映射关系</li><li>使用路由: 通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code> 声明路由链接和占位符</li></ol><h2 id="使用vue-router"><a href="#使用vue-router" class="headerlink" title="使用vue-router"></a>使用vue-router</h2><p>在 src 源代码目录下，新建 router/index.js 路由模块，并初始化如下的代码：</p><p>如果我们在使用 vueCLI 初始化项目的时候安装了 router，那么就会自动生成 router 文件夹，里面有 index.js 如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导入 Vue 和 VueRouter 的包</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用 Vue.use() 函数,把 VueRouter 安装为 Vue 的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建 VueRouter 对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webp ackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4.将 router 对象传入到 vue 实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在 src/ main.js 入口文件中，导入并挂载路由模块。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 1.导入路由模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 2.挂载路由模块</span></span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在App.vue 主组件中使用路由</p><ul><li><code>&lt;router-link&gt;</code> 声明路由链接</li><li><code>&lt;router-view&gt;</code> 占位符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 1.定义路由链接 --&gt;</span>  </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--  2.定义路由的占位符 --&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="声明路由匹配规则"><a href="#声明路由匹配规则" class="headerlink" title="声明路由匹配规则"></a>声明路由匹配规则</h2><p>在 src/router/index.js 路由模块中，通过 routes 数组 声明路由的匹配规则。示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [<span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// path 表示要匹配的 hash 地址,component 表示要展示的路由组件  </span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="comment">// 这种方式是路由懒加载,后面有解释  </span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webp ackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="HTML5的History模式"><a href="#HTML5的History模式" class="headerlink" title="HTML5的History模式"></a>HTML5的History模式</h2><p>我们前面说过改变路径的方式有两种：</p><ul><li><p>URL 的 hash</p></li><li><p>HTML5的history</p></li></ul><p>默认情况下，路径的改变使用的 URL 的hash，如果希望使用 HTML5 的 history 模式，进行如下配置即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;    routes,    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="router-link补充"><a href="#router-link补充" class="headerlink" title="router-link补充"></a>router-link补充</h2><p>在前面的 <code>&lt;router-link&gt;</code> 中,我们只是使用了一个属性：<code>to</code> ，用于指定跳转的路径</p><p><code>&lt;router-link&gt;</code> 还有一些其他属性</p><p><code>tag</code> : 指定 <code>&lt;router-link&gt;</code> 之后渲染成什么组件，比如下面的代码会被渲染成一个 <li> 元素,而不是 <a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&#x27;/home&#x27;</span>  tag=<span class="string">&#x27;li&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><code>replace</code> ：</p><p> <code>replace</code> 不会留下 history 记录，所以指定 replace 的情况下，后退键返回不能返回到上一个页面中</p><p><code>active-class</code> ：</p><p>当 <code>&lt;router-link&gt;</code> 对应的路由匹配成功时,会自动给当前元素设置一个 <code>router-link-active</code> 的 <code>class</code>，设置 active-class 可以修改默认的名称(一般不需要改)</p><ul><li>在进行高亮显示的导航菜单或者底部tabbar时, 会使用到该类</li><li>但是通常不会修改类的属性, 会直接使用默认的router-link-active即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 1.定义路由链接 --&gt;</span>  </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">tag</span>=<span class="string">&#x27;li&#x27;</span> <span class="attr">replace</span> &gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--  2.定义路由的占位符 --&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.router-link-active</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: red</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="路由代码跳转"><a href="#路由代码跳转" class="headerlink" title="路由代码跳转"></a>路由代码跳转</h2><p>有时候, 页面的跳转可能需要执行对应的JavaScript代码, 这个时候, 就可以使用第二种跳转方式了，也就是编程式导航。</p><p>例如，我们需要点击按钮然后进行跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;homeClick&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;aboutClick&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;!--  <span class="number">2.</span>定义路由的占位符 --&gt;  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">homeClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/home&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">aboutClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="Vue-router的常见用法"><a href="#Vue-router的常见用法" class="headerlink" title="Vue-router的常见用法"></a>Vue-router的常见用法</h1><h2 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h2><p>路由重定向指的是：用户在访问 地址 A 的时候，强制用户跳转到 地址 C ，从而展示特定的组件页面。</p><p>通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 当用户访问 / 的时候,通过 redirect 属性跳转到 /home 对应的路由规则</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路由的懒加载"><a href="#路由的懒加载" class="headerlink" title="路由的懒加载"></a>路由的懒加载</h2><p>路由懒加载的主要作用就是将路由对应的组件打包成一个个的js代码块.</p><p>只有在这个路由被访问到的时候, 才加载对应的组件</p><p>在ES6中, 我们可以有更加简单的写法来组织Vue异步组件和Webpack的代码分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;../components/Home.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原始路由加载</span></span><br><span class="line"><span class="comment">// import Home from &#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">// 路由懒加载(推荐)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [<span class="comment">// 在 routes 数组中,声明路由的匹配规则</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// path 表示要匹配的 hash 地址,component 表示要展示的路由组件  </span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../views/About.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>我们在 src/router/index.js 中配置路由</p><p>使用英文的冒号 (: ) 来定义路由的参数项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 User.vue 组件中,可以获取到 id 的值，从而展示对应的用户详情</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;User-container&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User组件 ------- &#123;&#123;this.$route.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;User&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们也可以在主组件 App.vue 中获取到路由参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link v-<span class="attr">bind</span>:to=<span class="string">&quot; &#x27;/user&#x27; + id &quot;</span>&gt;用户&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="使用props接收路由参数"><a href="#使用props接收路由参数" class="headerlink" title="使用props接收路由参数"></a>使用props接收路由参数</h2><p>为了<strong>简化路由参数的获取形式</strong>，vue-router 允许在 路由规则中开启 props 传参 。</p><p>1.我们在 src/router/index.js 中配置路由</p><p>定义路由规则时，声明 <code>props: true</code> 选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在 User.vue 组件中,可以获取到 id 的值，从而展示对应的用户详情</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;User-container&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 2.直接使用 props 中接收的路由参数 --&gt;</span>  </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User组件 ------- &#123;&#123;id&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;User&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>]<span class="comment">// 1.使用 props 接收路由规则中匹配到的参数项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.在主组件 App.vue 中也可以获取到路由参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot; &#x27;/user&#x27; + id &quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h2><p>传递参数主要有两种类型: params 和 query</p><h3 id="params的类型"><a href="#params的类型" class="headerlink" title="params的类型"></a>params的类型</h3><ul><li>配置路由格式: <code>/router/:id</code></li><li>传递的方式: 在path后面跟上对应的值</li><li>传递后形成的路径: /router/123, /router/abc</li></ul><h3 id="query的类型"><a href="#query的类型" class="headerlink" title="query的类型"></a>query的类型</h3><ul><li>配置路由格式: /router, 也就是普通配置</li><li>传递的方式: 对象中使用query的key作为传递方式</li><li>传递后形成的路径: /router?id=123, /router?id=abc</li></ul><p>例如我们在 App.vue 里面向其他路由 ‘/profile’ 传递对象参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to =<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                   path:&#x27;/profile&#x27;, </span></span><br><span class="line"><span class="string">                   query:&#123;name: &#x27;why&#x27;,age: 18,height:1.88&#125;&#125;&quot;</span>&gt;</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>在 Profile.vue 组件里面也可以取到传递过来的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是 Profile 组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;this.$route.query.height&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="router-和-route的区别"><a href="#router-和-route的区别" class="headerlink" title="$ router 和$route的区别"></a>$ router 和$route的区别</h2><ul><li><code>$router</code> 为VueRouter实例，想要导航到不同URL，则使用<code>$router.push</code>方法</li><li><code>$route</code>为当前 router 跳转对象里面可以获取name、path、query、params等</li></ul><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>嵌套路由是一个很常见的功能，比如在home页面中, 我们希望通过 /home/news 和 /home/message 访问一些内容，</p><p>一个路径映射一个组件, 访问这两个路径也会分别渲染两个组件</p><p>实现嵌套路由有两个步骤：</p><ol><li>创建对应的子组件, 并且在路由映射中配置对应的子路由.，使用 children 属性声明子路由规则</li><li>在组件内部使用<router-view>标签.</li></ol><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220406085825078.png" alt="image-20220406085825078"></p><p>我们创建好 HomeNews.vue 和 HomeMessage.vue 后，在 src/router/index.js 中配置路由映射</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载(推荐)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeNews</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/HomeNews&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HomeMessage</span> = (<span class="params"></span>) =&gt; <span class="title function_">imports</span>(<span class="string">&#x27;../components/HomeMessage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Home 页面的路由规则(父级路由规则)</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="comment">// 通过 children 属性,嵌套声明子级路由规则  </span></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// 默认路径</span></span><br><span class="line">           <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">           <span class="attr">redirect</span>: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">        &#125;，</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">HomeNews</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;messages&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">HomeMessage</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">linkActiveClass</span>: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h1><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/00872e4395704b439e8e95b8cc749a71.png" alt="img"></p><p>我们来考虑一个需求: 在一个SPA应用中, 如何改变网页的标题呢?</p><ul><li><p>网页标题是通过<title>来显示的, 但是SPA只有一个固定的HTML, 切换不同的页面时, 标题并不会改变.</p></li><li><p>但是我们可以通过JavaScript来修改<title>的内容 window.document.title = ‘新的标题’</p></li><li><p>那么在Vue项目中, 在哪里修改? 什么时候修改比较合适呢?</p></li></ul><p>什么是导航守卫?</p><ul><li>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的.</li><li>vue-router提供了<code>beforeEach</code>和<code>afterEach</code>的钩子函数, 它们会在路由即将改变前和改变后触发</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关的信息</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&quot;../components/User&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.通过Vue.use(插件), 安装插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建VueRouter对象</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// redirect重定向</span></span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置钩子hook(前置回调)</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,form,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 从 from 跳转到 to</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h2 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h2><p>每次发生路由的导航跳转时，都会触发全局前置守卫 。因此，在全局前置守卫中，程序员可以对每个路由进行访问权限的控制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 方法,即可声明&quot;全局前置守卫&quot;</span></span><br><span class="line"><span class="comment">// 每次发生路由跳转的时候,都会触发这个方法</span></span><br><span class="line"><span class="comment">// 全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to 是将要访问的路由的信息对象</span></span><br><span class="line">    <span class="comment">// from 是将要离开的路由的信息对象</span></span><br><span class="line">    <span class="comment">// next 是一个函数,调用 next()表示放行,允许这次路由导航</span></span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>导航钩子的三个参数解析：</p><p>to ： 即将要进入的目标的路由对象<br>from：当前导航即将要离开的路由对象<br>next：调用该方法后，才能进入下一个钩子<br>注意：如果是前置钩子beforeEach，必须要调用 next() 函数，如果是后置钩子afterEach，不需要主动调用 next() 函数</p><h2 id="next函数的三种调用方式"><a href="#next函数的三种调用方式" class="headerlink" title="next函数的三种调用方式"></a>next函数的三种调用方式</h2><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/6d3c2e7c82694967a17a8a6bb97046b8.png" alt="img"></p><ul><li>当前用户拥有后台主页的访问权限，直接放行： <code>next()</code></li><li>当前用户没有后台主页的访问权限，强制其跳转到登录页面：<code>next(&#39;/login&#39;)</code></li><li>当前用户没有后台主页的访问权限，不允许跳转到后台主页：<code>next(false)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html的难点</title>
      <link href="/2022/04/08/html/html%E7%9A%84%E9%9A%BE%E7%82%B9/"/>
      <url>/2022/04/08/html/html%E7%9A%84%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="html的难点"><a href="#html的难点" class="headerlink" title="html的难点"></a>html的难点</h1><h2 id="图像标签🔥"><a href="#图像标签🔥" class="headerlink" title="图像标签🔥"></a>图像标签🔥</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;pink1.jpg&quot; alt=&quot;我是林晓&quot;  title=&quot;我是林晓&quot; /&gt;</span><br></pre></td></tr></table></figure><p>src是<img>标签的必须属性，它用于指定图像文件的路径和文件</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">src</td><td align="center">图片路径</td><td align="center">必须属性</td></tr><tr><td align="center">alt</td><td align="center">文本</td><td align="center">替换文本（当图片不能显示时候显示的文字）</td></tr><tr><td align="center">title</td><td align="center">文本</td><td align="center">提示文本（鼠标放到图像上，显示的文字）</td></tr></tbody></table><h2 id="超链接标签🔥"><a href="#超链接标签🔥" class="headerlink" title="超链接标签🔥"></a>超链接标签🔥</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">用于指定链接目标的url地址。必须属性</td></tr><tr><td align="center">target</td><td align="center">用于指定连接页面的打开方式。<code>_self</code>为默认值，<code>_blank</code>为在新窗口中打开</td></tr></tbody></table><h2 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h2><p>作用：点击链接，可以快速定位到页面中的某个位置</p><ul><li>在链接文本的<code>href</code>属性中，设置属性值为 <strong>#名字</strong></li><li>找到目标位置标签，里面添加一个 <strong>id属性=刚才的名字</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#two&quot;</span>&gt;</span>第二季<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span> = <span class="string">&quot;two&quot;</span>&gt;</span>第二季介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标签🔥"><a href="#表格标签🔥" class="headerlink" title="表格标签🔥"></a>表格标签🔥</h2><ul><li><p><code>table</code> 用来定义表格的标签</p></li><li><p><code>tr</code> 用来定义表格中的行，必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code> 标签中</p></li><li><p><code>td</code> 用来定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code> 标签中</p></li><li><p><code>th</code> 用来定义表格中的表头，表头单元格里面的内容加粗居中显示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>     <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span>    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span>        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>林晓<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>林晓<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>  <span class="tag">&lt;<span class="name">td</span>&gt;</span>林晓<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span>     <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span>          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>                        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">&lt;/body</span><br></pre></td></tr></table></figure></li></ul><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><p>表格标签的属性实际开发并不常用，因为基本都是通过后面的CSS来设置的</p><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">align</td><td align="center">left,center,right</td><td align="center">规定表格相对周围元素的对齐方式</td></tr><tr><td align="center">border</td><td align="center">1或者0</td><td align="center">规定表格单元是否拥有边框，默认为” “，表示没有边框</td></tr><tr><td align="center"><code>cellpadding</code></td><td align="center">像素值</td><td align="center">规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td align="center"><code>cellspacing</code></td><td align="center">像素值</td><td align="center">规定单元格之间的空白，默认2像素</td></tr><tr><td align="center">width</td><td align="center">像素值或百分比</td><td align="center">规定表格的宽度</td></tr></tbody></table><h3 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h3><ul><li>跨行合并：<code>rowspan=“合并单元格的个数”</code></li><li>跨列合并：<code>colspan=&quot;合并单元格的个数&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单标签🔥"><a href="#表单标签🔥" class="headerlink" title="表单标签🔥"></a>表单标签🔥</h2><p>一个完整的表单通常由<strong>表单域，表单控件（表单元素）和提示信息</strong>3部分组成</p><h3 id="表单域🔥"><a href="#表单域🔥" class="headerlink" title="表单域🔥"></a>表单域🔥</h3><ul><li>表单域是一个包含表单元素的区域</li><li><code>&lt;form&gt;&lt;/from&gt;</code>标签用于定义表单域，会把它范围内的表单元素信息提交给服务器</li></ul><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">url地址</td><td align="center">用于指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td align="center">method</td><td align="center">get/post</td><td align="center">用于设置表单数据的提交方式，其取值为get或post</td></tr><tr><td align="center">name</td><td align="center">名称</td><td align="center">用于指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table><h3 id="表单控件-表单元素-🔥"><a href="#表单控件-表单元素-🔥" class="headerlink" title="表单控件(表单元素)🔥"></a>表单控件(表单元素)🔥</h3><h4 id="input输入表单元素🔥"><a href="#input输入表单元素🔥" class="headerlink" title="input输入表单元素🔥"></a>input输入表单元素🔥</h4><ul><li><code>input</code>输入表单元素</li><li><code>input</code>是个单标签，<code>type</code> 属性设置不同的属性用来指定不同的控件类型(文本字段、复选框、单选按钮、按钮等)</li></ul><p>type 属性的属性值及描述如下：</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">button</td><td align="center">定义可点击按钮(多数情况下，用于通过JavaScript启动脚本)</td></tr><tr><td align="center"><code>checkbox</code></td><td align="center">定义复选框</td></tr><tr><td align="center"><code>text</code></td><td align="center">定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符。</td></tr><tr><td align="center">hidden</td><td align="center">定义隐藏的输入字段</td></tr><tr><td align="center">image</td><td align="center">定义图像形式的提交按钮</td></tr><tr><td align="center"><code>password</code></td><td align="center">定义密码字段。该字段中的字符被掩码</td></tr><tr><td align="center"><code>radio</code></td><td align="center">定义单选按钮</td></tr><tr><td align="center">reset</td><td align="center">定义重置按钮。重置按钮会清楚表单中的所有数据</td></tr><tr><td align="center">submit</td><td align="center">定义提交按钮。提交按钮会把表单数据发送到服务器。</td></tr><tr><td align="center"><code>number</code></td><td align="center">限制用户输入必须为数字类型</td></tr><tr><td align="center"><code>tel</code></td><td align="center">手机号码</td></tr><tr><td align="center"><code>search</code></td><td align="center">搜索框</td></tr></tbody></table><p>除 type 属性外，<code>&lt;input&gt;</code> 标签还有很多其他很多属性，其常用属性如下：</p><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>由用户自定义</td><td>定义 input 元素的名称</td></tr><tr><td>value</td><td>由用户自定义</td><td>规定 input 元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此 input 元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中字符的最大长度</td></tr></tbody></table><ul><li>name 和 value 是每个表单元素都有的属性值，主要给后端人员使用。</li><li><code>name</code> 是表单元素的名字，要求 <code>单选框和复选框要有相同的name值</code></li><li>checked 属性主要针对于单选框和复选框，主要作用是一打开页面，就可以<code>默认选中某个表单元素</code></li></ul><h3 id="select下拉表单元素🔥"><a href="#select下拉表单元素🔥" class="headerlink" title="select下拉表单元素🔥"></a>select下拉表单元素🔥</h3><ul><li>下拉表单元素</li><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li><li>在<code>&lt;option&gt;</code>中定义 <code>selected=&quot;selected&quot;</code> 时，当前项即为默认选中项。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="textarea文本域元素🔥"><a href="#textarea文本域元素🔥" class="headerlink" title="textarea文本域元素🔥"></a><code>textarea</code>文本域元素🔥</h3><ul><li>用于定义多行文本输入的控件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="label🔥"><a href="#label🔥" class="headerlink" title="label🔥"></a>label🔥</h3><ul><li><code>label</code>标签用于绑定一个表单元素，当点击<code>&lt;lable&gt;</code>标签内的文本时，浏览器就会自动将焦点(光标)转到表单元素上，用来增加用户体验</li><li><code>label</code>标签的 for属性 应当与相关元素的id 属性相同</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男 <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新增语义化标签🔥"><a href="#新增语义化标签🔥" class="headerlink" title="新增语义化标签🔥"></a>新增语义化<a href="https://so.csdn.net/so/search?q=%E6%A0%87%E7%AD%BE&spm=1001.2101.3001.7020">标签</a>🔥</h2><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/07df0702684841339d1b4884b4bdc677.png" alt="img"></p><table><thead><tr><th align="center">标签</th><th align="center">语义</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">头部标签</td></tr><tr><td align="center"><code>nav</code></td><td align="center">导航标签</td></tr><tr><td align="center">article</td><td align="center">内容标签</td></tr><tr><td align="center">section</td><td align="center">定义文档某个区域</td></tr><tr><td align="center">aside</td><td align="center">侧边栏标签</td></tr><tr><td align="center">footer</td><td align="center">尾部标签</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css的复习</title>
      <link href="/2022/04/08/css/css%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
      <url>/2022/04/08/css/css%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="css的复习"><a href="#css的复习" class="headerlink" title="css的复习"></a>css的复习</h1><h2 id="CSS字体属性🔥"><a href="#CSS字体属性🔥" class="headerlink" title="CSS字体属性🔥"></a>CSS字体属性🔥</h2><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td>font-style</td><td>字体样式</td><td>记住倾斜是 italic，不倾斜是 normal，实际开发最常用 normal</td></tr><tr><td>font-weight</td><td>字体粗细</td><td>加粗是 700 或者 bold ，不加粗是 normal 或者 400，记住数字不加单位</td></tr><tr><td>font-size</td><td>字号</td><td>我们通常用的单位是 px ，一定要跟上单位</td></tr><tr><td>font-family</td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td>font</td><td>字体连写</td><td>顺序：ont-style font-weight  font-size/line-height  font-family</td></tr></tbody></table><h2 id="CSS元素显示模式🔥"><a href="#CSS元素显示模式🔥" class="headerlink" title="CSS元素显示模式🔥"></a>CSS元素显示模式🔥</h2><p>块元素🔥</p><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code> 标签是最典型的块元素。</p><p>行内元素🔥</p><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</p><p>行内块元素🔥</p><p>在行内元素中有几个特殊的标签 —— <code>&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;</code>，它们同时具有块元素和行内元素的特点</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>元素模式</td><td>元素排列</td><td>设置样式</td><td>默认宽度</td><td>包含</td></tr><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><ul><li>转换为块元素： <code>display:block</code></li><li>转换为行内元素： <code>display:inline</code></li><li>转换为行内块元素: <code>display:inline-block</code></li></ul><h2 id="去掉-li-前面的小圆点"><a href="#去掉-li-前面的小圆点" class="headerlink" title="去掉 li 前面的小圆点"></a>去掉 li 前面的小圆点</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="text-align🔥"><a href="#text-align🔥" class="headerlink" title="text-align🔥"></a>text-align🔥</h2><p><code>text-align 属性用于设置文本内容的水平对齐方式</code></p><p>这个属性是对于三个元素都是有效的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-align</span>:center;</span><br></pre></td></tr></table></figure><h2 id="line-height🔥"><a href="#line-height🔥" class="headerlink" title="line-height🔥"></a>line-height🔥</h2><p><code>line-height 属性用于设置行间的距离(行高)，可以控制文字行与行之间的距离</code></p><p><code>line-height</code> 和 height 一样时，文字高度水平</p><h2 id="边框border🔥"><a href="#边框border🔥" class="headerlink" title="边框border🔥"></a>边框border🔥</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span> : <span class="number">1px</span> soilid red;</span><br></pre></td></tr></table></figure><h3 id="边框会影响盒子实际大小🔥"><a href="#边框会影响盒子实际大小🔥" class="headerlink" title="边框会影响盒子实际大小🔥"></a>边框会影响盒子实际大小🔥</h3><p>边框会额外增加盒子的实际大小，因此我们有两种方案解决：</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要 width/height 减去边框宽度</li></ol><h3 id="外边距典型应用🔥"><a href="#外边距典型应用🔥" class="headerlink" title="外边距典型应用🔥"></a>外边距典型应用🔥</h3><p>外边距可以让<strong>块级盒子水平居中</strong>，但是必须满足两个条件</p><ol><li>盒子必须制定了宽度(width)</li><li>盒子<strong>左右的外边距</strong>都设置为 auto</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外边距合并🔥"><a href="#外边距合并🔥" class="headerlink" title="外边距合并🔥"></a>外边距合并🔥</h3><p>使用 margin 定义块级元素的垂直外边距时，可能会出现外边距的合并。</p><p>主要有两种情况：</p><ol><li>相邻块元素垂直外边距的合并</li><li>嵌套块元素垂直外边距的塌陷</li></ol><h4 id="相邻块元素垂直外边距的合并🔥"><a href="#相邻块元素垂直外边距的合并🔥" class="headerlink" title="相邻块元素垂直外边距的合并🔥"></a>相邻块元素垂直外边距的合并🔥</h4><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/7718ee0385bf4536b331b7e551b8449b.png" alt="img"></p><h4 id="嵌套块元素垂直外边距的塌陷🔥"><a href="#嵌套块元素垂直外边距的塌陷🔥" class="headerlink" title="嵌套块元素垂直外边距的塌陷🔥"></a>嵌套块元素垂直外边距的塌陷🔥</h4><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/0bc4b88590cd435bb8376893c2fe542e.png" alt="img"></p><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 overflow: hidden</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。</p><h1 id="传统网页布局的三种方式🔥"><a href="#传统网页布局的三种方式🔥" class="headerlink" title="传统网页布局的三种方式🔥"></a>传统网页布局的三种方式🔥</h1><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><h2 id="浮动🔥"><a href="#浮动🔥" class="headerlink" title="浮动🔥"></a>浮动🔥</h2><ul><li>浮动最典型的应用：<strong>可以让多个块级元素一行内排列显示。</strong></li><li>网页布局第一准则：<strong>多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</strong></li></ul><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/c6416c483c96451092a80ada9785b347.png" alt="img"></p><ol><li><strong>浮动元素会具有行内块元素特性</strong></li><li><strong>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</strong></li><li><strong>如果行内元素有了浮动，则不需要转换块级\行内块元素就可以直接给高度和宽度</strong></li></ol><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/1eb22d8b2c8543d19d0078f8acc2575a.png" alt="img"></p><h3 id="浮动的注意点🔥"><a href="#浮动的注意点🔥" class="headerlink" title="浮动的注意点🔥"></a>浮动的注意点🔥</h3><ul><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li><li>一个元素浮动了，理论上其余兄弟元素也要浮动<ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动</li></ul></li><li><code>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.two</span>&#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">color</span>: pink;</span><br><span class="line">             <span class="attribute">list-style</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">li</span>&gt;one&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">li</span> class=&quot;two&quot;&gt;two&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">li</span>&gt;three&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220301143623354.png" alt="image-20220301143623354"></p><h3 id="清除浮动🔥"><a href="#清除浮动🔥" class="headerlink" title="清除浮动🔥"></a>清除浮动🔥</h3><p>由于父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为0时，就会影响下面的标准流盒子。</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/7ae44f5681f549a99c1b7d1f45e5205b.png" alt="img"></p><h4 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">clear</span>: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">left</td><td align="center">不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td align="center">right</td><td align="center">不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td align="center">both</td><td align="center">同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="after伪元素法🔥"><a href="#after伪元素法🔥" class="headerlink" title="after伪元素法🔥"></a>after伪元素法🔥</h4><p>:after 方式是额外标签法的升级版。也是给父元素添加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">      <span class="comment">/* IE6,7专有*/</span></span><br><span class="line">      *zoom : <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双伪元素🔥"><a href="#双伪元素🔥" class="headerlink" title="双伪元素🔥"></a>双伪元素🔥</h4><ul><li>也是给父元素添加</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">   <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定位🔥"><a href="#定位🔥" class="headerlink" title="定位🔥"></a>定位🔥</h2><p><code>定位 = 定位模式 +边偏移</code></p><table><thead><tr><th align="center">position值</th><th align="center">语义</th></tr></thead><tbody><tr><td align="center">static</td><td align="center">静态定位</td></tr><tr><td align="center">relative</td><td align="center">相对定位</td></tr><tr><td align="center">absolute</td><td align="center">绝对定位</td></tr><tr><td align="center">fixed</td><td align="center">固定定位</td></tr></tbody></table><h3 id="相对定位relative🔥"><a href="#相对定位relative🔥" class="headerlink" title="相对定位relative🔥"></a>相对定位relative🔥</h3><p>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待。（不脱标，继续保留原来位置）</p><p><code>子绝父相</code></p><h3 id="绝对定位absolute🔥"><a href="#绝对定位absolute🔥" class="headerlink" title="绝对定位absolute🔥"></a>绝对定位absolute🔥</h3><p><code>绝对定位不再占用原先的位置（脱标）</code></p><p>绝对定位盒子水平居中🔥</p><p>加了绝对定位的盒子不能通过<code>margin: 0 auto</code>水平居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* 1.left走50%，父容器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="固定定位fixed🔥"><a href="#固定定位fixed🔥" class="headerlink" title="固定定位fixed🔥"></a>固定定位fixed🔥</h3><p>固定定位<strong>不再占有原先的位置</strong>(脱标)</p><h2 id="border-box🔥"><a href="#border-box🔥" class="headerlink" title="border-box🔥"></a>border-box🔥</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br></pre></td></tr></table></figure><p>padding 和 border 就不会撑大盒子了(前提是 padding 和 border 不会超过 width 宽度)</p><h2 id="vertical-align🔥"><a href="#vertical-align🔥" class="headerlink" title="vertical-align🔥"></a>vertical-align🔥</h2><p><code>vertical-align</code>:</p><ul><li>使用场景：经常用于设置<strong>图片</strong>或者**表单（行内块元素）**和**文字垂直对齐**。</li><li>官方解释：用于设置一个元素的垂直对齐方式，但是它只针对于<strong>行内元素</strong>或者<strong>行内块元素</strong>有效</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: baseline | top | middle | bottom</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">baseline</td><td align="center">默认，元素放置在父元素的基线上</td></tr><tr><td align="center">top</td><td align="center">把元素的顶端与行中最高元素的顶端对齐（顶线对齐）</td></tr><tr><td align="center">middle</td><td align="center">把此元素放置在父元素的中部（中线对齐）</td></tr><tr><td align="center">bottom</td><td align="center">把元素的顶端与行中最低的元素的顶端对齐（底线对齐）</td></tr></tbody></table><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/159dbd0d98f941f5b17eb713341d3c64.png" alt="img"></p><p>此时可以给图片、表单这些行内块元素的 vertical-align 属性设置为 <code>middle</code> 就可以让文字和图片垂直居中对齐了。</p><h2 id="图片底侧空白缝隙解决🔥"><a href="#图片底侧空白缝隙解决🔥" class="headerlink" title="图片底侧空白缝隙解决🔥"></a>图片底侧空白缝隙解决🔥</h2><p>bug：图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐（给图片加边框就可以看见）</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/6ab28389075f4478a70a11cae3e5a58e.png" alt="img"></p><ol><li>给图片添加 <code>vertical-align : middle | top |bottom</code> 等</li><li>把图片转换为块级元素 <code>display:block;</code>，因为块级元素不会有<code>vertical-align</code> 属性</li></ol><h2 id="文字围绕浮动元素🔥"><a href="#文字围绕浮动元素🔥" class="headerlink" title="文字围绕浮动元素🔥"></a>文字围绕浮动元素🔥</h2><p>巧妙运用浮动元素不会压住文字的特性</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/71377b1f43f34ff1aaf153cf1dceb0b6.png" alt="img"></p><h2 id="行内块巧妙运用🔥"><a href="#行内块巧妙运用🔥" class="headerlink" title="行内块巧妙运用🔥"></a>行内块巧妙运用🔥</h2><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/7d1aaaf6a6d549e7b1a90c25447fb370.png" alt="img"></p><p>页码在页面中间显示：</p><ol><li>把这些链接盒子转换为行内块，之后给父级指定 <code>text-align: center</code></li><li>利用行内块元素中间有缝隙，并且给父级添加 <code>text-align: center</code> ，行内块元素会水平居中</li></ol><h2 id="隐藏一个元素"><a href="#隐藏一个元素" class="headerlink" title="隐藏一个元素"></a>隐藏一个元素</h2><h3 id="display显示隐藏🔥"><a href="#display显示隐藏🔥" class="headerlink" title="display显示隐藏🔥"></a>display显示隐藏🔥</h3><p><code>display</code>属性用于设置一个元素应如何显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: none;  <span class="comment">/*隐藏对象*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">display</span>: block; <span class="comment">/*除了转换为块级元素之外，同时还有显示元素的意思*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>display隐藏元素后，不再占有原来的位置</strong></li></ul><h3 id="visibility显示隐藏🔥"><a href="#visibility显示隐藏🔥" class="headerlink" title="visibility显示隐藏🔥"></a>visibility显示隐藏🔥</h3><p><code>visibility</code>属性用于指定一个元素应可见还是隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: visible; <span class="comment">/*元素可视*/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">visibility</span>: hidden;  <span class="comment">/*元素隐藏*/</span></span><br></pre></td></tr></table></figure><ul><li><strong>visibility 隐藏元素后，继续占有原来的位置。</strong></li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></li><li>如果隐藏元素不想要原来位置， 就用 <code>display：none</code> (用处更多 重点）</li></ul><p>overflow溢出显示隐藏🔥</p><p><code>overflow</code> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><table><thead><tr><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">visible</td><td align="center">不剪切内容也不添加滚动条</td></tr><tr><td align="center">hidden</td><td align="center">不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td align="center">scroll</td><td align="center">不管超出内容否，总是显示滚动条</td></tr><tr><td align="center">auto</td><td align="center">超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端css</title>
      <link href="/2022/04/08/css/%E7%A7%BB%E5%8A%A8%E7%AB%AFcss/"/>
      <url>/2022/04/08/css/%E7%A7%BB%E5%8A%A8%E7%AB%AFcss/</url>
      
        <content type="html"><![CDATA[<h1 id="移动端css"><a href="#移动端css" class="headerlink" title="移动端css"></a>移动端css</h1><h2 id="flex布局🔥"><a href="#flex布局🔥" class="headerlink" title="flex布局🔥"></a>flex布局🔥</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>： <span class="attribute">flex</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置主轴的方向，column，row</td></tr><tr><td>justify-content</td><td>设置主轴上的子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行</td></tr><tr><td>align-content</td><td>设置侧轴上的子元素的排列方式（多行）</td></tr><tr><td>align-items</td><td>设置侧轴上的子元素排列方式（单行）</td></tr><tr><td>flex-flow</td><td>复合属性，相当于同时设置了 flex-direction 和 flex-wrap</td></tr></tbody></table><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>flex-start</strong></td><td align="center"><strong>默认值从头部开始，如果主轴是x轴，则从左到右</strong></td></tr><tr><td align="center">flex-end</td><td align="center">从尾部开始排列</td></tr><tr><td align="center"><strong>center</strong></td><td align="center"><strong>在主轴居中对齐(如果主轴是 x 轴则水平居中)</strong></td></tr><tr><td align="center"><strong>space-around</strong></td><td align="center"><strong>平分剩余空间</strong></td></tr><tr><td align="center"><strong>space-between</strong></td><td align="center"><strong>先两边贴边，再平分剩余空间🔥</strong></td></tr></tbody></table><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>设置在父级属性上</code></p><p>该属性是控制子项在侧轴（默认是y轴）上的排列方式 在子项为单项（<strong>单行</strong>）的时候使用</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>flex-start</strong></td><td align="center"><strong>从上到下</strong></td></tr><tr><td align="center">flex-end</td><td align="center">从下到上</td></tr><tr><td align="center"><strong>center</strong></td><td align="center"><strong>挤在一起居中(垂直居中)</strong></td></tr><tr><td align="center"><strong>stretch</strong></td><td align="center"><strong>拉伸(默认值)</strong></td></tr></tbody></table><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>设置在子级属性上</code></p><ul><li>align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li><li>默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>设置在父级属性上</code></p><p>设置子项在侧轴上的排列方式 并且只能用于子项出现 <strong>换行</strong> 的情况（多行），在单行下是没有效果的。</p><table><thead><tr><th align="center">属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><strong>flex-start</strong></td><td align="center"><strong>默认值在侧轴的头部开始排列</strong></td></tr><tr><td align="center">flex-end</td><td align="center">在侧轴的尾部开始排列</td></tr><tr><td align="center"><strong>center</strong></td><td align="center"><strong>在侧轴中间显示</strong></td></tr><tr><td align="center"><strong>space-around</strong></td><td align="center"><strong>子项在侧轴平分剩余空间</strong></td></tr><tr><td align="center"><strong>space-between</strong></td><td align="center"><strong>子项在侧轴先分布在两头，再平分剩余空间</strong></td></tr><tr><td align="center"><strong>stretch</strong></td><td align="center"><strong>设置子项元素高度平分父元素高度</strong></td></tr></tbody></table><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/480258f6f7254d57ad0de8720a68705c.png" alt="img"></p><h3 id="order属性定义项目的排列顺序"><a href="#order属性定义项目的排列顺序" class="headerlink" title="order属性定义项目的排列顺序"></a>order属性定义项目的排列顺序</h3><p>数值越小，排列越靠前，默认为0。</p><p>注意：和 z-index 不一样。</p><h2 id="grid布局🔥"><a href="#grid布局🔥" class="headerlink" title="grid布局🔥"></a>grid布局🔥</h2>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue组件化开发</title>
      <link href="/2022/04/06/vue/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2022/04/06/vue/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="vue组件化开发"><a href="#vue组件化开发" class="headerlink" title="vue组件化开发"></a>vue组件化开发</h1><h2 id="组件化开发步骤"><a href="#组件化开发步骤" class="headerlink" title="组件化开发步骤"></a>组件化开发步骤</h2><ol><li>注册组件：调用 <code>Vue.component()</code> 方法注册组件</li><li>使用组件：在 <code>Vue</code> 实例的作用范围内使用组件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--调用全局注册组件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg</span>: <span class="string">&#x27;你好,Vue3！&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 2.定义一个组件(全局组件)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">       `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 3. 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320135413123.png" alt="image-20220320135413123"></p><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><p>如下代码，我们在 app 下注册了一个全局组件，这意味着该组件可以在app实例内部任意地方使用：我们可以在 app 实例下使用，也可以在 home 实例下使用，也可以在 message 实例下使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>消息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--调用全局注册组件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg</span>: <span class="string">&#x27;你好,Vue3！&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 2.定义一个组件(全局组件)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     app.<span class="title function_">component</span>(<span class="string">&#x27;button-counter&#x27;</span>,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">       `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 3. 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>当然我们全局组件之间可以相互使用，使用方式如下：我们在定义第二个全局组件，若向使用第一个全局组件，只需要将第一个全局组件的名称标签写入模板template中即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义第二个全局组件</span></span><br><span class="line"> app.<span class="title function_">component</span>(<span class="string">&#x27;lk-box&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div style=&quot;width: 200px;height: 200px;background-color:pink;&quot;&gt;</span></span><br><span class="line"><span class="string">       盒子组件</span></span><br><span class="line"><span class="string">       &lt;button-counter&gt;&lt;/button-counter&gt;</span></span><br><span class="line"><span class="string">       &lt;/div&gt;</span></span><br><span class="line"><span class="string">      `</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h2 id="局部组件🔥"><a href="#局部组件🔥" class="headerlink" title="局部组件🔥"></a>局部组件🔥</h2><p>如下代码，局部组件是使用一个常量来接收，我们将此局部组件通过 <code>components</code> 可以将其挂载在app实例中，这样我们在 app 实例里面就可以使用了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">lk-count</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-count</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 注册一个局部组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">template</span>: <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">        &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">       `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">msg</span>: <span class="string">&#x27;你好,Vue3！&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 组件选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="string">&#x27;lk-count&#x27;</span>: <span class="title class_">Counter</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="组件标签化"><a href="#组件标签化" class="headerlink" title="组件标签化"></a>组件标签化</h2><p><code>template</code> 模块写法不够清晰，如果我们能将其中的HTML分离出来写，然后挂载到对应的组件上，必然结构会变得非常清晰</p><p>Vue 提供了两种方案来定义HTML模板内容</p><ul><li><strong>使用 &lt; script &gt; 标签</strong></li><li><strong>使用 &lt; template &gt; 标签</strong></li></ul><h3 id="使用script标签"><a href="#使用script标签" class="headerlink" title="使用script标签"></a>使用script标签</h3><p>就是在组件中定义一个id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">   <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 使用#id</span></span><br><span class="line">   <span class="attr">template</span>: <span class="string">&#x27;#mycount&#x27;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在实例上挂载这一段html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/x-template&quot;</span> id=<span class="string">&quot;mycount&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>你点击了&#123;&#123;count&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用template标签🔥"><a href="#使用template标签🔥" class="headerlink" title="使用template标签🔥"></a>使用template标签🔥</h3><p>我们使用 template 标签将其抽离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个局部组件</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">   <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">template</span>: <span class="string">&#x27;#mycount&#x27;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id=<span class="string">&quot;mycount&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>你点击了&#123;&#123;count&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里就不用再加type属性了，比较简单</p></blockquote><h2 id="组件数据存放🔥"><a href="#组件数据存放🔥" class="headerlink" title="组件数据存放🔥"></a>组件数据存放🔥</h2><blockquote><p>问题：组件可以访问<code>Vue</code>实例数据吗？</p></blockquote><ul><li><p>结论：组件不能直接访问<code>Vue</code>实例中的 data</p></li><li><p>组件是一个单独功能模块的封装：</p></li><li><p>这个模块有属于自己的 HTML 模板，也应该有属于自己的数据 data</p></li></ul><blockquote><p>组件自己的数据存放在哪呢？</p></blockquote><ul><li><p>组件对象也有一个 data 属性(也可以有 methods 属性)</p></li><li><p>只是这个 data 属性必须是一个函数</p></li><li><p>而且这个函数返回一个对象，对象内部保存着数据</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个局部组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button @click=&quot;count++&quot;&gt;你点击了&#123;&#123;count&#125;&#125;次&lt;/button&gt;</span></span><br><span class="line"><span class="string">   `</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么 data 在组件中必须是一个函数呢？</p></blockquote><ul><li>首先，如果不算是一个函数，<code>Vue</code> 直接就会报错</li><li>其次，原因是在于 <code>Vue</code> 让每个组件对象都返回一个新的对象，因为如果是同一个对象，组件在多次使用后会相互影响</li></ul><h2 id="组件通信props"><a href="#组件通信props" class="headerlink" title="组件通信props"></a>组件通信props</h2><p>组件通信的常用方式有4种：</p><ol><li>props</li><li>自定义事件</li><li>消息订阅与发布</li><li>vuex</li></ol><p>子组件是不能引用父组件或者Vue实例的数据的</p><p>但是，在开发中，往往一些数据确实需要从上层传递到下层</p><ul><li><p>比如在一个页面中，我们从服务器请求到了很多的数据</p></li><li><p>其中的一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示</p></li><li><p>这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件(父组件) 将数据传递给小组件(子组件)</p></li></ul><p>组件中，使用选项 <code>props</code> 来声明需要从父级接收到的数据(properties)</p><p><code>props</code> 的值有两种方式：</p><ul><li>方式一：字符串数组，数组中的字符串就是传递时的名称</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等。</li></ul><h3 id="props传数组"><a href="#props传数组" class="headerlink" title="props传数组"></a>props传数组</h3><p>我们的数据是从服务器端返回的，那么我们就需要动态绑定数据，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!--3.使用组件,v-bind动态绑定--&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">lk-box</span> <span class="attr">:brand</span>=<span class="string">&quot;msg1&quot;</span> <span class="attr">:colleges</span>=<span class="string">&quot;msg2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-box</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;brand&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in colleges&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 1.注册一个局部组件(子组件)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">Box</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 子组件接收数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: [<span class="string">&#x27;brand&#x27;</span>,<span class="string">&#x27;colleges&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#box&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 2.将子组件在父组件里面注册</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg1</span>: <span class="string">&#x27;技能掌握&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg2</span>: [<span class="string">&#x27;Web&#x27;</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;Java&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;lk-box&#x27;</span>: <span class="title class_">Box</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="props传对象"><a href="#props传对象" class="headerlink" title="props传对象"></a>props传对象</h3><ul><li>在前面，我们的 <code>props</code> 选项是使用一个数组</li><li>除了数组之外，我们也可以使用对象，当需要对<code>props</code> 进行类型等验证时，就需要对象写法了</li></ul><h4 id="1、类型限制"><a href="#1、类型限制" class="headerlink" title="1、类型限制"></a>1、类型限制</h4><p>我们可以在 props 里面限制父组件给子组件传递的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--父组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件模板--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmovies&#125;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 父传子: props</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> cpn = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#cpn&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 1.类型限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cmovies</span>: <span class="title class_">Array</span>,<span class="comment">// 限制父组件传的是数组类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">cmessage</span>: <span class="title class_">String</span>,<span class="comment">// 限制父组件传的是字符串类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// root组件,我们当作父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好啊&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">movies</span>: [<span class="string">&#x27;海王&#x27;</span>, <span class="string">&#x27;海贼王&#x27;</span>, <span class="string">&#x27;海尔兄弟&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//对象字面量增强写法的属性增强写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      cpn</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="2、默认值和必传值"><a href="#2、默认值和必传值" class="headerlink" title="2、默认值和必传值"></a>2、默认值和必传值</h4><ul><li><code>type</code> : 限制的类型</li><li><code>default</code>: 如果没有传值,给一个默认值<ul><li><strong>注意</strong>:类型是对象或者数组时, 默认值必须是一个函数</li></ul></li><li><code>required</code> : 必须的,即意味着这个值是必须要传递的,不传就报错</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cmessage</span>: &#123;</span><br><span class="line">       <span class="attr">type</span>: <span class="title class_">String</span>,         <span class="comment">// 类型限制为 String</span></span><br><span class="line">       <span class="attr">default</span>: <span class="string">&#x27;aaaaaaaa&#x27;</span>,  <span class="comment">// 如果没有传值,则给一个默认值</span></span><br><span class="line">       <span class="attr">required</span>: <span class="literal">true</span>        <span class="comment">// required 必须的,即意味着这个值是必须要传递的,不传就报错</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="子级向父级传递"><a href="#子级向父级传递" class="headerlink" title="子级向父级传递"></a>子级向父级传递</h3><p>需要使用自定义事件来完成</p><p>自定义事件的流程：</p><ul><li>在子组件中，通过<code>$emit()</code> 来发射事件</li><li>在父组件中，通过<code>v-on</code> 来监听子组件事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击了&#x27;</span>);</span><br><span class="line">        <span class="comment">// 发射事件</span></span><br><span class="line">        <span class="comment">// 第一个参数是自定义事件的名称,第二个参数是自定义事件的参数</span></span><br><span class="line">     <span class="variable language_">this</span>.$emit(<span class="string">&#x27;boxClick&#x27;</span>,<span class="string">&#x27;秦晓&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">boxFunc</span>(<span class="params">item</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子组件中的按钮发生了点击&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> style=<span class="string">&quot;background-color:blue; width: 300px; height: 300px;padding: 20px;&quot;</span>&gt;</span><br><span class="line">  &lt;!--父组件监听子组件事件--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">lk-box</span> @<span class="attr">box-click</span>=<span class="string">&quot;boxFunc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-box</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--子组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;width: 200px;height: 200px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果我们想传递多个参数，我们可以以一个对象或者数组的形式传递，例如我们传递一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;点击了&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> dataObj = &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;秦晓&#x27;</span>,</span><br><span class="line">          <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发射事件</span></span><br><span class="line">        <span class="variable language_">this</span>.$emit(<span class="string">&#x27;boxClick&#x27;</span>,dataObj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>父子组件相互访问</p><p>有时候我们需要父组件直接访问子组件，子组件直接访问父组件，或者是子组件访问根组件。</p><ul><li>父组件访问子组件：使用 <code>$children(Vue3.x已经废弃)</code> 或 <code>$refs</code></li><li>子组件访问父组件：使用<code>$parent</code></li></ul><h4 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h4><blockquote><p><code>$refs</code> 的使用🔥</p></blockquote><ul><li><code>$refs</code> 和 ref 指令通常是一起使用的</li><li>首先，我们通过 ref 给某一个子组件绑定一个特定的 ID</li><li>其次，通过<code>this.$refs.ID</code>就可以访问到该组件了<ul><li>接着使用 <code>this.$refs.ID.xx</code> 就可以拿到该组件里面的属性数据了</li></ul></li></ul><p>例如下方代码，我们给子组件使用 <code>ref=&quot;box1&quot;</code> 绑定ID，在父组件里面使用 <code>this.$refs.box1</code> 就可以拿到该组件，接着使用<code>this.$refs.box1.msg</code> 拿到该组件的 <code>msg</code> 属性数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--父组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">lk-box</span> <span class="attr">ref</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-box</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildComponent&quot;</span>&gt;</span>获取子组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red;width: 200px;height: 200px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 定义局部组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">Box</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">msg</span>: <span class="string">&#x27;春风十里&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">alert</span>(<span class="string">&#x27;点击了按钮&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#box&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;你好Vue3！&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;lk-box&#x27;</span>: <span class="title class_">Box</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 获取子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">getChildComponent</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$refs.box1 相当于拿到了子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$refs.box1.msg 就是拿到了子组件里面的 msg 数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$refs.box1.btnClick 就是拿到了子组件里面的 btnClick 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">box1</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h4><p>如果我们想在子组件中直接访问父组件，可以通过 <code>$parent</code> ,如果想访问根组件，可以通过 <code>$root</code></p><ul><li><p>尽管在 Vue 开发中，我们允许通过 <code>$parent</code> 来访问父组件，但是在真实开发中尽量不要这要做</p></li><li><p>子组件应该尽量避免直接访问父组件的数据，因为这样耦合度太高了</p></li><li><p>因为子组件一般会复用，如果我们将子组件放入另外一个组件之内，很可能该父组件没有对应的属性，往往会引起问题</p></li></ul><p>例如如下代码，我们做了三层嵌套，最外层是根组件<code>Vue</code>实例，第二层是<code>div</code>盒子，最里面一层是 button 按钮。我们现在想点击 最里面的 <code>button</code> 来拿到div父组件或者root根组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--父组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">lk-box</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-box</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件<span class="number">1</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击了按钮&#123;&#123;count&#125;&#125;次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--子组件<span class="number">2</span>--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color:red; width: 200px; height: 200px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">lk-button</span>&gt;</span><span class="tag">&lt;/<span class="name">lk-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 定义局部组件1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">LKButton</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#box1&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">btnClick</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 子组件访问父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$parent 可以拿到该组件的父组件,也就是button子组件的父组件div</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(this.$parent);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">count</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 子组件访问根组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$root 可以拿到根组件,也就是vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(this.$root);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">msg</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 定义局部组件2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">LKBox</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>: <span class="string">&#x27;#box2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;lk-button&#x27;</span>: <span class="title class_">LKButton</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">msg</span>: <span class="string">&#x27;你好Vue3！&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="string">&#x27;lk-box&#x27;</span>: <span class="title class_">LKBox</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 挂载vue实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VueCLI</title>
      <link href="/2022/04/06/vue/VueCLI/"/>
      <url>/2022/04/06/vue/VueCLI/</url>
      
        <content type="html"><![CDATA[<h1 id="VueCLI"><a href="#VueCLI" class="headerlink" title="VueCLI"></a>VueCLI</h1><h2 id="Vue组件的三个组成部分"><a href="#Vue组件的三个组成部分" class="headerlink" title="Vue组件的三个组成部分"></a>Vue组件的三个组成部分</h2><p>每个 .Vue 组件都是由三部分组成，分别是</p><ul><li>template -&gt; 组件的模板结构</li><li>script -&gt; 组件的 JavaScript 行为</li><li>style -&gt; 组件的样式</li></ul><p>默认情况下，写在.vue 组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p><p>导致组件之间样式冲突的根本原因是：</p><ol><li>单页面应用程序中，所有组件的DOM 结构，都是基于唯一的index.html页面进行呈现的</li><li>每个组件中的样式，都会影响整个index.html 页面中的DOM元素</li></ol><p>为了提高开发效率和开发体验，vue为style节点提供了<code>scoped</code>属性，从而防止组件之间的样式冲突问题</p><h2 id="deep-样式穿透"><a href="#deep-样式穿透" class="headerlink" title="/deep/样式穿透"></a>/deep/样式穿透</h2><ul><li>如果给当前组件的style 节点添加了scoped 属性，则当前组件的样式对其子组件是不生效的。</li><li>如果想让某些样式对子组件生效，可以使用 <code>/deep/ 深度选择器</code>。</li></ul><h2 id="使用组件的三个步骤"><a href="#使用组件的三个步骤" class="headerlink" title="使用组件的三个步骤"></a>使用组件的三个步骤</h2><p> 1.导入需要使用的 .vue组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Left</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Left&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Right</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Right&#x27;</span></span><br></pre></td></tr></table></figure><p>2.注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="comment">// 2.注册组件</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// &#x27;Left&#x27;: Left 简化写法如下,对象里面键值一样的话直接写一个就行</span></span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.以标签形式,使用注册好的组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Left</span>&gt;&lt;/<span class="title class_">Left</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Right</span>&gt;</span><span class="tag">&lt;/<span class="name">Right</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="Vue-CLI2"><a href="#Vue-CLI2" class="headerlink" title="Vue CLI2"></a>Vue CLI2</h1><h2 id="安装Vue脚手架"><a href="#安装Vue脚手架" class="headerlink" title="安装Vue脚手架"></a>安装Vue脚手架</h2><p>全局安装 cli</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>这样安装的是脚手架的最新版本，如果我们想安装脚手架 2 版本呢？</p><p>全局安装脚手架2版本，这样的话我们就既可以用脚手架2的版本，也可以用脚手架最新的版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure><ul><li>Vue CLI2 初始化项目命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><ul><li>Vue CLI 3 初始化项目命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><ul><li>查看 VueCLI 版本（注意 V 要大写）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><h2 id="Vue-CLI2-初始化项目"><a href="#Vue-CLI2-初始化项目" class="headerlink" title="Vue CLI2 初始化项目"></a>Vue CLI2 初始化项目</h2><p>在终端输入 <code>vue init webpack my-project</code></p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/4c3509b8b4ec48e8b68b3c99ef3ac80b.png" alt="img"></p><p>cd 到对应目录，在终端输入 <code>npm run dev</code> 就可以运行了</p><h3 id="关闭Eslint"><a href="#关闭Eslint" class="headerlink" title="关闭Eslint"></a>关闭Eslint</h3><p>若我们在初始化项目时候开启了 ESlint 代码检测，我们不想用的时候方法如下：</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220321143812727.png" alt="image-20220321143812727"></p><h1 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h1><p>Vue-cli 3 与 2 版本有很大区别</p><ul><li><p>vue-cli 3 是基于 webpack 4 打造，vue-cli 2 还是 webapck 3</p></li><li><p>vue-cli 3 的设计原则是“0配置”，移除的配置文件根目录下的，build和config等目录</p></li><li><p>vue-cli 3 提供了 vue ui 命令，提供了可视化配置，更加人性化</p></li><li><p>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</p></li></ul><blockquote><p>Vue CLI 3 初始化项目命令：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/be762a2d5692497eae10c02f3a7c5c59.png" alt="img"></p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/ecf83eff085b4097b65ba4b82a3c6e91.png" alt="img"></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>使用 Vue CLI3 初始化项目之后，运行项目。只需要看 package.json 下的 scripts 就知道运行命令</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220321144432283.png" alt="image-20220321144432283"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>方式一：启动图形化界面 <code>Vue ui</code></li><li>方式二：自定义配置 vue.config.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vue-CLI4"><a href="#Vue-CLI4" class="headerlink" title="Vue CLI4"></a>Vue CLI4</h1><p>在工程化的项目中，vue 要做的事情很单纯：通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。</p><p>其中：</p><ul><li>App.vue 用来编写待渲染的模板结构</li><li>index.html 中需要预留一个el 区域</li><li>main.js 把App.vue 渲染到了index.html 所预留的区域中</li></ul><h2 id="安装VueCLI4"><a href="#安装VueCLI4" class="headerlink" title="安装VueCLI4"></a>安装VueCLI4</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>在控制台输入如下命令会创建 hello-world 项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><p>会弹出如下选择预设</p><p>箭头上下键控制选择，选择 Manually select features 手动配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">Default ([Vue 2] babel, eslint) </span><br><span class="line">Default (Vue 3) ([Vue 3] babel, eslint) </span><br><span class="line">Manually select features </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/2022/04/06/vue/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/06/vue/vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="vue基础"><a href="#vue基础" class="headerlink" title="vue基础"></a>vue基础</h1><h1 id="Vue3-x安装"><a href="#Vue3-x安装" class="headerlink" title="Vue3.x安装"></a>Vue3.x安装</h1><p>直接CDN引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本,包含了有帮助的命令行警告 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- 生产环境版本,优化了尺寸和速度 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>下载和引入</p><ul><li>开发环境下载：<a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></li><li>生产环境下载：<a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></li><li>下载完成后使用 script 标签的外部引用即可</li></ul><p>NPM安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">最新稳定版</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">npm install vue</span></span><br></pre></td></tr></table></figure><p>后续通过 webpack 和 CLI 使用时我们使用该方式。</p><h2 id="vscode配置模板"><a href="#vscode配置模板" class="headerlink" title="vscode配置模板"></a>vscode配置模板</h2><p>打开VSCODE编辑器，依次选择“文件 -&gt; 首选项 -&gt; 用户代码”，此时，会弹出一个搜索框，我们输入vue</p><p>选择vue后，VSCODE会自动打开一个名字为vue.json的文件，复制以下内容到这个文件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Print to console&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;&lt;!-- $0 --&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &lt;div&gt;&lt;/div&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/template&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;export default &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  data () &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    return &#123;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;    &#125;;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  &#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  components: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  computed: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  mounted: &#123;&#125;,&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;  methods: &#123;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/script&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;style lang=&#x27;scss&#x27; scoped&gt;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">  ],</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Log output to console&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们新建一个vue文件，输入vue按下enter，就会自动生成内容</p><h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><p><code>v-once</code>展示的部分数据不会随着Vue的响应式而发生变化</p><p><code>v-text</code>将数据显示在界面中，与Mustache比较相似，但会<code>覆盖元素内默认的值</code>，不推荐使用</p><p><code>v-html</code></p><ul><li>如果我们直接通过<code>&#123;&#123;&#125;&#125;` 来输出，会将HTML代码也一起输出- `v-html`会按照HTML格式进行解析  `v-pre`跳过这个元素和它子元素的编译过程，用于显示原本的 Mustache 语法`v-cloak`，也叫作斗篷，用作遮住没有解析的数据在实际开发中，我们data里面的数据可能是从服务器端获取来的，如果网络不好获取的比较慢，浏览器可能会直接显示出未编译的Mustache标签。那么页面在渲染时可能会先显示 `&#123;&#123;message&#125;&#125;</code> 之后变为 你好Vue3！。这种效果不是我们想要的，我们可以给标签添加 ~ 来避免这种效果。解决办法：</li></ul><ol><li>加上<code>v-clock</code> 属性,并加上css。</li><li>vue解析之前有 <code>v-clock</code> 属性时，让其不显示</li><li>Vue解析之后没有<code>v-clock</code> 属性，再让其显示</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-attr">[v-cloak]</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在vue解析之前, div中有一个属性v-cloak</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 在vue解析之后, div中没有一个属性v-cloak</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好Vue3!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>前面的指令主要作用是将值插入到我们的模板的内容当中，但是，除了内容需要动态来决定外，某些属性我们也希望动态来绑定。</p><ul><li><strong>绑定 href、src</strong> </li><li>**绑定 class **</li><li><strong>绑定style</strong></li></ul><h4 id="绑定-href、src-用法"><a href="#绑定-href、src-用法" class="headerlink" title="绑定 href、src 用法"></a>绑定 href、src 用法</h4><p>在实际开发中，照片img的url值可能也是由服务器端获取，a标签的href值可能也是由服务器端获取的，那么我们如何动态绑定呢？例如我们看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好Vue3！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220318131749600.png" alt="image-20220318131749600"></p><p>如上图，我们给a标签的href是不能直接写url的，因为它不会解析。这个时候就需要给href前添加<code>v-bind</code>指令了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>语法糖写法如下</strong>： <code>:href=&quot;url&quot;</code></p><h4 id="绑定-class-用法"><a href="#绑定-class-用法" class="headerlink" title="绑定 class 用法"></a>绑定 class 用法</h4><p>我们让 message 的字体颜色为红色,样式是从服务器端获取的arg1,那么如果我们直接写 <code>class=&quot;arg1&quot;</code> 是不会解析为 <code>class=red</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;arg1&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好Vue3！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arg1</span>: <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220318132154271.png" alt="image-20220318132154271"></p><p>如果我们使用v-bind绑定写为 <code>:class=&quot;arg1&quot;</code>,那么就会解析为 <code>class=&quot;red&quot;</code></p><p><strong>V-bind 对象语法</strong></p><ul><li>当服务器端传给我们很多样式的时候，我们可以采用<strong>对象语法(class 后面跟的是一个对象)</strong></li><li>这个语法我们可以动态的使某个属性是否显示，如点击变色，我们只需要在定义一个属性为ture，点击相反，在挂上去</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!--  &#123;类名<span class="number">1</span>: 布尔值,类名<span class="number">2</span>: 布尔值,类名<span class="number">3</span>: 布尔值&#125;--&gt;</span><br><span class="line">  &lt;!--  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;arg1: true, arg2: true&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> --&gt;</span><br><span class="line">  &lt;!--上述有一点,类名,而类名我使用arg1是不出效果的,因为是单页面演示,此处不知道为什么,而使用style中定义的类名red、fontSize就出效果--&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red: true, fontSize: true&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好Vue3！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arg1</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arg2</span>: <span class="string">&#x27;fontSize&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-bind 数组语法(class 后面跟的是一个数组)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;[arg1,arg2]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">message</span>: <span class="string">&#x27;你好Vue3！&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arg1</span>: <span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">arg2</span>: <span class="string">&#x27;fontSize&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="绑定style"><a href="#绑定style" class="headerlink" title="绑定style"></a>绑定style</h4><p>我们可以利用 <code>v-bind: style</code> 来绑定一些CSS内联样式</p><p>在写CSS属性名的时候，比如 font-size</p><ul><li>我们可以使用驼峰式：<code>fontSize</code></li><li>或短横线分隔(记得用单引号括起来) <code>&#39;font-size&#39;</code></li></ul><p>若我们使用<code>v-bind</code>来绑定 style 样式,使用方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: &#x27;50px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>如果我们的属性值是由外部服务器传来的，那么我们的属性值可以不用加单引号</p><h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><p>计算属性指的是通过一系列运算之后，最终得到一个属性值。这个动态计算出来的属性值可以被模板结构或methods 方法使用。</p><p>如果我们要得到秦🔥晓，我们在method中这样使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  &lt;!-- <span class="number">2.</span>函数用法 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">firstName</span>: <span class="string">&#x27;秦&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">lastName</span>: <span class="string">&#x27;晓&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">getFullName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;🔥&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>在<code>计算属性computed</code>中，我们使用不加括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 3.计算属性 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">firstName</span>: <span class="string">&#x27;秦&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">lastName</span>: <span class="string">&#x27;晓&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//注意:计算属性本质上还是属性,所以命名为属性,只是写法为函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//属性命名-fullName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//函数命名-getFullName</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;🔥&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="事件监听指令"><a href="#事件监听指令" class="headerlink" title="事件监听指令"></a>事件监听指令</h2><p>在前端开发中，我们经常需要监听点击、拖拽、键盘事件等等，这个时候需要使用 <code>v-on</code></p><ul><li>作用：绑定事件监听器</li><li>缩写：<code>@</code></li></ul><table><thead><tr><th align="center">DOM对象</th><th align="center">vue事件绑定</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">v-on:click</td></tr><tr><td align="center">oninput</td><td align="center">v-on:input</td></tr><tr><td align="center">onkeyup</td><td align="center">v-on:keyup</td></tr></tbody></table><p>在使用 v-on 绑定事件时：</p><ol><li>如果事件函数后有括号，如：<code>@click=&quot;btn1Click()&quot;</code>,则默认什么都不传递</li><li>如果事件函数后无括号，如:<code>@click=&quot;btn1Click&quot;</code> ,则默认传递事件对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click()&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click&quot;</span>&gt;</span>按钮二<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">btn1Click</span>(<span class="params">args</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(args);   <span class="comment">// undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">btn2Click</span>(<span class="params">args</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(args);   <span class="comment">// 事件对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220318145531352.png" alt="image-20220318145531352"></p><p>当然我们也可以传递动态参数，例如传递data实例中的count：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click(123,&#x27;abc&#x27;,true,count)&quot;</span>&gt;</span>按钮一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">count</span>: <span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title function_">btn1Click</span>(<span class="params">arg1,arg2,arg3,arg4</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1, arg2, arg3,arg4);   <span class="comment">// 123 &#x27;abc&#x27; true 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>当我们带参数又要带有事件参数时,我们要使用 <code>$event</code>（传递对象）</p><h3 id="v-on修饰符"><a href="#v-on修饰符" class="headerlink" title="v-on修饰符"></a>v-on修饰符</h3><p><code>@click.stop</code>，阻止冒泡</p><p><code>@click.prevent</code>，阻止默认事件</p><p><code>@click.once</code>，响应一次</p><p><a href="mailto:&#49;&#46;&#64;&#x63;&#x6c;&#x69;&#99;&#107;&#46;&#x73;&#x74;&#x6f;&#112;">&#49;&#46;&#64;&#x63;&#x6c;&#x69;&#99;&#107;&#46;&#x73;&#x74;&#x6f;&#112;</a></p><p>对于如下代码，我们点击按钮，会冒泡至父盒子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span> @click=<span class="string">&quot;boxClick&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在我们之前的做法中，我们是拿到事件对象，使用 <code>event.stopPropagation()</code>来阻止冒泡的，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">btnClick</span>(<span class="params">event</span>)&#123;</span><br><span class="line">     event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;点击了按钮&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Vue中我们使用的是给 <code>v-on</code>后面加修饰符，<code>@click.stop</code>来阻止冒泡，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span> @click=<span class="string">&quot;boxClick&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><a href="mailto:&#x32;&#46;&#x40;&#x63;&#108;&#105;&#99;&#107;&#46;&#112;&#x72;&#101;&#118;&#x65;&#110;&#116;">&#x32;&#46;&#x40;&#x63;&#108;&#105;&#99;&#107;&#46;&#112;&#x72;&#101;&#118;&#x65;&#110;&#116;</a></p><p>如下代码，我们点击提交，会先在控制台打印<code>表单提交</code>,然后默认跳转<code>http://www.jd.com</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://www.jd.com&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;doSubmit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>可是如果我们想将表单的数据处理之后再提交，而不是直接提交，这个时候就要阻止表单提交默认事件了,我们之前的做法是先拿到事件对象<code>event</code>，然后<code>event.preventDefault()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSubmit</span>(<span class="params">event</span>)&#123;</span><br><span class="line">     <span class="comment">// 阻止默认事件</span></span><br><span class="line">     event.<span class="title function_">preventDefault</span>();</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;表单提交&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Vue中我们可以在<code>v-on</code>之后加修饰符，<code>@click.prevent</code>来阻止默认事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;http://www.jd.com&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doSubmit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.响应一次</p><p>有时候我们希望有些事件只被触发一次，使用<code>@click.once</code>。</p><p>条件渲染指令</p><p>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏 。</p><p><code>v - if、v-else-if、v-else</code></p><ul><li>这三个指令与JavaScript的条件语句 if、else、else if 类似</li><li>Vue 的条件指令可以根据表达式的值在DOM中渲染或销毁元素或组件</li></ul><p><code>v-show</code>的用法和<code>v-if</code>非常相似，也用于决定一个元素是否渲染：</p><ul><li><code>v-if</code> 指令会 动态地创建或移除 DOM 元素 ，从而控制元素在页面上的显示与隐藏</li><li><code>v-show</code> 指令会动态为元素 添加或移除 style=“display: none;” 样式 ，从而控制元素的显示与隐藏</li></ul><blockquote><p>开发中如何选择呢？</p></blockquote><ul><li>当需要在显示与隐藏之间切片很频繁时，使用 <code>v-show</code></li><li>当只有一次切换时，通过 <code>v-if</code></li></ul><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p><strong>数组遍历</strong></p><p>我们将 data 传过来的数组在页面展示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in person&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; -- &#123;&#123;item.name&#125;&#125; -- &#123;&#123;item.age&#125;&#125; -- &#123;&#123;item.address&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">person</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,age : <span class="number">20</span>,<span class="attr">address</span>: <span class="string">&#x27;北京&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;<span class="attr">name</span>: <span class="string">&#x27;张四&#x27;</span>,age : <span class="number">21</span>,<span class="attr">address</span>: <span class="string">&#x27;西安&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#123;<span class="attr">name</span>: <span class="string">&#x27;张五&#x27;</span>,age : <span class="number">22</span>,<span class="attr">address</span>: <span class="string">&#x27;天津&#x27;</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>对象遍历</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key,index) in person&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125; -- &#123;&#123;key&#125;&#125;:&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">person</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">name</span>: <span class="string">&#x27;秦&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">age</span>: <span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">friends</span>: [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220318151542919.png" alt="image-20220318151542919"></p><h2 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h2><p><strong>v-model</strong><br>双向绑定指令也叫表单元素绑定，vue提供了 v-model 双向数据绑定 指令，用来辅助开发者在 不操作 DOM 的前提下， 快速获取表单的数据。</p><p>vue中使用 v-model 指令来实现表单元素和数据的<code>双向绑定</code>，经常用于表单 <code>input</code> 和 <code>textarea</code> 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">message</span>: <span class="string">&#x27;你好Vue3!&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320131601906.png" alt="image-20220320131601906"></p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320131611084.png" alt="image-20220320131611084"></p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320131625246.png" alt="image-20220320131625246"></p><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><p><code>v-model</code> 其实是一个语法糖，它的背后本质上是包含两个操作：</p><ul><li><code>v-bind</code> 绑定一个 value 属性</li><li><code>v-on</code> 指令给当前元素绑定 input 事件</li></ul><p>就是说下面的代码，等同于下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">&lt;!-- 等同于 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;message&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;message = $event.target.value&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-model与其他组合"><a href="#v-model与其他组合" class="headerlink" title="v-model与其他组合"></a>v-model与其他组合</h3><p><code>v-model:radio：</code>使得单选框只能选一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>选择的性别是:&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>v-model：checkbox：</code></p><p>复选框分为两种情况：单个勾选框和多个勾选框</p><blockquote><p>单个勾选框</p></blockquote><ul><li><code>v-moduel</code> 即为布尔值</li><li>此时 input 的 value 并不影响<code>v-model</code>的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span>&gt;</span>同意会员协议<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>是否同意协议：&#123;&#123;isAgree ? &#x27;同意&#x27; : &#x27;不同意&#x27;&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">isAgree</span>: <span class="string">&#x27;false&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\11793\AppData\Roaming\Typora\typora-user-images\image-20220320132340416.png" alt="image-20220320132340416"></p><blockquote><p>多个复选框</p></blockquote><ul><li>当是多个复选框时，因为可以选中多个，所以对应的 data 中属性是一个数组</li><li>当选中某一个时，就会将 input 的 value 添加到数组中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">&quot;item in originHobbies&quot;</span> <span class="attr">:for</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;likes&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;likes&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">originHobbies</span>: [<span class="string">&#x27;篮球&#x27;</span>, <span class="string">&#x27;足球&#x27;</span>, <span class="string">&#x27;乒乓球&#x27;</span>, <span class="string">&#x27;羽毛球&#x27;</span>, <span class="string">&#x27;台球&#x27;</span>, <span class="string">&#x27;高尔夫球&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">likes</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320132441451.png" alt="image-20220320132441451"></p><h3 id="v-model-select"><a href="#v-model-select" class="headerlink" title="v-model:select"></a>v-model:select</h3><p>和 checkbox 一样，select 也分单选和多选两种情况</p><blockquote><p>单选：只能选中一个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个值</li><li>当我们选中 option 中的一个时，会将它对应的 vaule 赋值到 city 中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择所在的城市:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;天津&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的城市是:&#123;&#123;city&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">city</span>: <span class="string">&#x27;上海&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320132753909.png" alt="image-20220320132753909"></p><blockquote><p>多选：可以选中多个值</p></blockquote><ul><li><code>v-model</code> 绑定的是一个数组</li><li>当选中多个值时，就会将选中的 option 对应的 value 添加到数组 mySelects中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择所在的城市:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;cities&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cities&quot;</span> <span class="attr">multiple</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;天津&quot;</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的城市是:&#123;&#123;cities&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="comment">// 1.创建Vue的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">cities</span>: []</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20220320132825843.png" alt="image-20220320132825843"></p><h3 id="v-model修饰符"><a href="#v-model修饰符" class="headerlink" title="v-model修饰符"></a>v-model修饰符</h3><p>为了方便对用户输入的内容进行处理，vue 为 v-model 指令提供了 3 个修饰符</p><table><thead><tr><th align="center">修饰符</th><th align="center">作用</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">.number</td><td align="center">自动将用户的输入值转化为数值类型</td><td align="center"><input v-model.number = "age" /></td></tr><tr><td align="center">.trim</td><td align="center">自动过滤用户输入的首尾空白字符</td><td align="center"><input v-module.trim = "msg" /></td></tr><tr><td align="center">.lazy</td><td align="center">在 change 时而非 input 时更新</td><td align="center"><input v-model.lazy = "msg" /></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/03/01/js/ES6/"/>
      <url>/2022/03/01/js/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h1 id="1、严格模式"><a href="#1、严格模式" class="headerlink" title="1、严格模式"></a>1、严格模式</h1><ol><li>JavaScript 除了提供正常模式外，还提供了严格模式</li><li>ES5 的严格模式是采用具有限制性 JavaScript 变体的一种方式，即在严格的条件下运行 JS 代码</li><li>严格模式在IE10 以上版本的浏览器才会被支持，旧版本浏览器会被忽略</li><li>严格模式对正常的JavaScript语义做了一些更改：</li></ol><ul><li>消除了Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为</li><li>消除代码运行的一些不安全之处，保证代码运行的安全</li><li>提高编译器效率，增加运行速度</li><li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 Javascript 做好铺垫。比如一些保留字如：class, enum, export, extends, import, super 不能做变量名</li></ul><h2 id="1、开启严格模式"><a href="#1、开启严格模式" class="headerlink" title="1、开启严格模式"></a>1、开启严格模式</h2><ul><li>严格模式可以应用到<code>整个脚本</code>或<code>个别函数</code>中。</li><li>因此在使用时，我们可以将严格模式分为为<code>脚本开启严格模式</code>和为<code>函数开启严格模式</code>两种情况</li></ul><h3 id="1、为脚本开启严格模式"><a href="#1、为脚本开启严格模式" class="headerlink" title="1、为脚本开启严格模式"></a>1、为脚本开启严格模式</h3><ul><li>为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句</li><li><code>&quot;use strict&quot;</code> 或<code>&#39;use strict&#39;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;user strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是严格模式。&quot;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为”use strict”加了引号，所以老版本的浏览器会把它当作一行普通字符串而忽略。</p><p>有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建一个作用域而不影响其他 script 脚本文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">     <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">     <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;)();   </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2、为函数开启严格模式"><a href="#2、为函数开启严格模式" class="headerlink" title="2、为函数开启严格模式"></a>2、为函数开启严格模式</h3><p>若要给某个函数开启严格模式，需要把<code>&quot;use strict&quot;</code>或<code>&#39;use strict&#39;</code>声明放在函数体所有语句之前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 为某个函数开启严格模式 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 此时只是给fn函数开启严格模式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 下面的代码按照严格模式执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 里面的还是按照普通模式执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>将<code>&quot;use strict&quot;</code> 放在函数体的第一行，则整个函数以 “严格模式”运行。</p><h2 id="2、严格模式中的变化"><a href="#2、严格模式中的变化" class="headerlink" title="2、严格模式中的变化"></a>2、严格模式中的变化</h2><h3 id="1、变量规定"><a href="#1、变量规定" class="headerlink" title="1、变量规定"></a>1、变量规定</h3><ul><li>在正常模式中，如果一个变量没有声明就赋值，默认是全局变量</li><li>严格模式禁止这种用法，变量都必须先用var 命令声明，然后再使用</li><li>严禁删除已经声明变量，例如，``delete x` 语法是错误的</li></ul><h3 id="2、严格模式下this指向问题"><a href="#2、严格模式下this指向问题" class="headerlink" title="2、严格模式下this指向问题"></a>2、严格模式下this指向问题</h3><ol><li>以前在全局作用域函数中的this指向window对象</li><li>严格模式下全局作用域中函数中的this 是 <code>undefined</code></li><li>以前构造函数时不加 new 也可以调用，当普通函数，this指向全局对象</li><li>严格模式下，如果构造函数不加 new 调用，this指向的是 undefined ，如果给它赋值，会报错</li><li>new 实例化的构造函数指向创建的对象实例</li><li>定时器this 还是指向window</li><li>事件、对象还是指向调用者</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="meta"></span></span></span></span><br><span class="line"><span class="meta"><span class="language-javascript"><span class="language-xml">        &#x27;use strict&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//3. 严格模式下全局作用域中函数中的 this 是 undefined。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// undefined。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//4. 严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则 会报错.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Star();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">sex</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//5. 定时器 this 还是指向 window </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>3、函数变化</p><ol><li>函数不能有重名的<strong>参数</strong></li><li>函数必须声明在顶层，新版本的JavaScript会引入“块级作用域”（ES6中已引入）。为了与新版本接轨，<strong>不允许在非函数的代码块内声明函数</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="comment">// 6. 严格模式下函数里面的参数不允许有重名</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, a</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(a + a);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// fn(1, 2);</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="2、闭包"><a href="#2、闭包" class="headerlink" title="2、闭包"></a>2、闭包</h1><h2 id="1、变量作用域"><a href="#1、变量作用域" class="headerlink" title="1、变量作用域"></a>1、变量作用域</h2><p>变量根据作用域的不同分为两种：全局变量和局部变量</p><ol><li>函数内部可以使用全局变量</li><li>函数外部不可以使用局部变量</li><li>当函数执行完毕，本作用域内的局部变量会销毁。</li></ol><h2 id="2、什么是闭包"><a href="#2、什么是闭包" class="headerlink" title="2、什么是闭包"></a>2、什么是闭包</h2><p>闭包指有权访问另一个函数作用域中的变量的函数</p><p><code>简单理解：一个作用域可以访问另外一个函数内部的局部变量</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       <span class="comment">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span></span><br><span class="line">       <span class="comment">// 闭包: 我们fn2 这个函数作用域 访问了另外一个函数 fn1 里面的局部变量 num</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;<span class="comment">// fn1就是闭包函数</span></span><br><span class="line">           <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">//10</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">fn2</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">fn1</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、闭包的作用"><a href="#3、闭包的作用" class="headerlink" title="3、闭包的作用"></a>3、闭包的作用</h2><p><code>延伸变量的作用范围</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="comment">// 闭包（closure）指有权访问另一个函数作用域中变量的函数。</span></span><br><span class="line">        <span class="comment">// 一个作用域可以访问另外一个函数的局部变量 </span></span><br><span class="line">        <span class="comment">// 我们fn 外面的作用域可以访问fn 内部的局部变量</span></span><br><span class="line">        <span class="comment">// 闭包的主要作用: 延伸了变量的作用范围</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> f = <span class="title function_">fn</span>();</span><br><span class="line">        <span class="title function_">f</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4、闭包练习"><a href="#4、闭包练习" class="headerlink" title="4、闭包练习"></a>4、闭包练习</h2><h3 id="1、点击li输出索引号"><a href="#1、点击li输出索引号" class="headerlink" title="1、点击li输出索引号"></a>1、点击li输出索引号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 闭包应用-点击li输出当前li的索引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 1. 我们可以利用动态添加属性的方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           lis[i].<span class="property">index</span> = i;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">// console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">index</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 2. 利用闭包的方式得到当前小li 的索引号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">// 利用for循环创建了4个立即执行函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="comment">// console.log(i);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               lis[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;)(i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="2、定时器中的闭包"><a href="#2、定时器中的闭包" class="headerlink" title="2、定时器中的闭包"></a>2、定时器中的闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul <span class="keyword">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>臭豆腐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>鲱鱼罐头<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 闭包应用-3秒钟之后,打印所有li元素的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.nav&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;li&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span>(<span class="params">i</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(lis[i].<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;, <span class="number">3000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)(i);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="3、浅拷贝和深拷贝"><a href="#3、浅拷贝和深拷贝" class="headerlink" title="3、浅拷贝和深拷贝"></a>3、浅拷贝和深拷贝</h1><ol><li>浅拷贝只是拷贝一层，更深层次对象级别的只<code>拷贝引用</code></li><li>深拷贝拷贝多层，每一级别的数据都会拷贝</li><li><code>Object.assign(target,....sources)</code> ES6新增方法可以<code>浅拷贝</code></li></ol><h2 id="1、浅拷贝"><a href="#1、浅拷贝" class="headerlink" title="1、浅拷贝"></a>1、浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝只是拷贝一层，更深层次对象级别的只拷贝引用</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="comment">// k是属性名，obj[k]是属性值</span></span><br><span class="line">    o[k] = obj[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line"><span class="comment">// 浅拷贝语法糖</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o,obj);</span><br></pre></td></tr></table></figure><h2 id="2、深拷贝"><a href="#2、深拷贝" class="headerlink" title="2、深拷贝"></a>2、深拷贝</h2><ul><li>深拷贝会把数组和对象的所有元素也拷贝进去</li><li>浅拷贝只把数组和对象拷贝进去</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 深拷贝拷贝多层，每一级别的数据都会拷贝</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">color</span>: [<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;red&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="comment">// 封装函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopy</span>(<span class="params">newobj,oldobj</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> oldobj)&#123;</span><br><span class="line">        <span class="comment">// 判断属性值属于简单数据类型还是复杂数据类型</span></span><br><span class="line">        <span class="comment">// 1.获取属性值   oldobj[k]</span></span><br><span class="line">        <span class="keyword">var</span> item = obldobj[k];</span><br><span class="line">        <span class="comment">// 2.判断这个值是否是数组</span></span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">            newobj[k] = [];</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k],item)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">              <span class="comment">// 3.判断这个值是否是对象</span></span><br><span class="line">            newobj[k] = &#123;&#125;;</span><br><span class="line">            <span class="title function_">deepCopy</span>(newobj[k],item)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 4.属于简单数据类型</span></span><br><span class="line">            newobj[k] = item;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">deepCopy</span>(o,obj);</span><br></pre></td></tr></table></figure><h1 id="4、正则表达式"><a href="#4、正则表达式" class="headerlink" title="4、正则表达式"></a>4、正则表达式</h1><p>正则表达式是用于<strong>匹配字符串中字符组合</strong>的模式。<code>在JavaScript中，正则表达式也是对象。</code></p><p>正则表通常被用来<strong>检索、替换</strong>那些符合某个模式（规则）的文本。</p><p>例如验证表单：用户名表单只能输入英文字母、数字或者下划线，昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p><h2 id="1、创建正则表达式"><a href="#1、创建正则表达式" class="headerlink" title="1、创建正则表达式"></a>1、创建正则表达式</h2><p>在JavaScript中，可以通过两种方式创建正则表达式</p><ol><li>通过调用 RegExp 对象的构造函数创建</li><li>通过字面量创建</li></ol><h3 id="1、通过调用-RegExp-对象的构造函数创建"><a href="#1、通过调用-RegExp-对象的构造函数创建" class="headerlink" title="1、通过调用 RegExp 对象的构造函数创建"></a>1、通过调用 RegExp 对象的构造函数创建</h3><p>通过调用 RegExp 对象的构造函数创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/表达式/</span>);</span><br></pre></td></tr></table></figure><h3 id="2、通过字面量创建"><a href="#2、通过字面量创建" class="headerlink" title="2、通过字面量创建"></a>2、通过字面量创建</h3><p>通过字面量创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="regexp">/表达式/</span>;</span><br></pre></td></tr></table></figure><p>注释中间放表达式就是正则字面量</p><h3 id="3、测试正则表达式-test"><a href="#3、测试正则表达式-test" class="headerlink" title="3、测试正则表达式 test"></a>3、测试正则表达式 test</h3><p><code>test()</code>正则对象方法，用于检测字符串是否符合该规则，该对象会返回<code>true</code>或<code>false</code>,其参数是测试字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regexObj.<span class="title function_">test</span>(str)</span><br></pre></td></tr></table></figure><ul><li><code>regexObj</code> 写的是正则表达式</li><li><code>str</code> 我们要测试的文本</li><li>就是检测<code>str</code>文本是否符合我们写的正则表达式规范</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 利用 RegExp对象来创建 正则表达式</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regexp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 利用字面量创建 正则表达式</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="comment">// 3.test 方法用来检测字符串是否符合正则表达式要求的规范</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="number">123</span>));<span class="comment">//ture</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));<span class="comment">//flase</span></span><br></pre></td></tr></table></figure><h3 id="4-match提取实际匹配项"><a href="#4-match提取实际匹配项" class="headerlink" title="4. match提取实际匹配项"></a>4. match提取实际匹配项</h3><p><code>.match()</code> 方法提取找到的实际匹配项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello, World!&quot;</span>.<span class="title function_">match</span>(<span class="regexp">/Hello/</span>);</span><br><span class="line"><span class="keyword">let</span> ourStr = <span class="string">&quot;Regular expressions&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> ourRegex = <span class="regexp">/expressions/</span>;</span><br><span class="line">ourStr.<span class="title function_">match</span>(ourRegex);</span><br></pre></td></tr></table></figure><p>这里第一个 <code>match</code> 将返回 <code>[&quot;Hello&quot;]</code> 第二个将返回 <code>[&quot;expressions&quot;]</code>。</p><p>请注意， <code>.match</code> 语法是目前为止一直使用的 <code>.test</code> 方法中的“反向”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;string&#x27;</span>.<span class="title function_">match</span>(<span class="regexp">/regex/</span>);</span><br><span class="line"><span class="regexp">/regex/</span>.<span class="title function_">test</span>(<span class="string">&#x27;string&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="2、正则表达式中的特殊字符"><a href="#2、正则表达式中的特殊字符" class="headerlink" title="2、正则表达式中的特殊字符"></a>2、正则表达式中的特殊字符</h2><h3 id="1、边界符"><a href="#1、边界符" class="headerlink" title="1、边界符"></a>1、边界符</h3><p>正则表达式中的边界符(位置符)用来提示字符所处的位置，主要有两个字符</p><table><thead><tr><th align="center">边界符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">^</td><td align="center">表示匹配行首的文本(以谁开始)</td></tr><tr><td align="center">$</td><td align="center">表示匹配行尾的文本(以谁结束)</td></tr></tbody></table><p><code>如果^ 和 $ 在一起，表示必须是精确匹配</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 边界符 ^ $</span></span><br><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>;   <span class="comment">//正则表达式里面不需要加引号，不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>));   <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abcd&#x27;</span>));<span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aabcd&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span></span><br><span class="line"><span class="comment">// 以abc开头，以abc结尾，必须是abc</span></span><br></pre></td></tr></table></figure><h2 id="3、字符类"><a href="#3、字符类" class="headerlink" title="3、字符类"></a>3、字符类</h2><ul><li>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了</li><li>所有可供选择的字符都放在方括号内</li></ul><h4 id="1-方括号"><a href="#1-方括号" class="headerlink" title="1.[] 方括号"></a>1.[] 方括号</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[abc]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>);     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="2-方括号内部-范围符"><a href="#2-方括号内部-范围符" class="headerlink" title="2.[-]方括号内部 范围符"></a>2.[-]方括号内部 范围符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-z]$/.<span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><p>方括号内部加上 <code>-</code> 表示范围，这里表示 <code>a - z</code> 26个英文字母都可以</p><h4 id="3-方括号内部-取反符"><a href="#3-方括号内部-取反符" class="headerlink" title="3.[^] 方括号内部 取反符"></a>3.[^] 方括号内部 取反符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[^abc]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>方括号内部加上 <code>^</code> 表示取反，只要包含方括号内的字符，都返回 <code>false</code></p><p><code>注意和边界符 ^ 区别，边界符写到方括号外面</code></p><h4 id="4-字符组合"><a href="#4-字符组合" class="headerlink" title="4.字符组合"></a>4.字符组合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[a-z1-<span class="number">9</span>]/.<span class="title function_">test</span>(<span class="string">&#x27;andy&#x27;</span>)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>方括号内部可以使用字符组合，这里表示包含 <code>a 到 z的26个英文字母和1到9的数字都可以</code></p><h2 id="4、量词符"><a href="#4、量词符" class="headerlink" title="4、量词符"></a>4、量词符</h2><p>量词符用来设定某个模式出现的<code>次数</code></p><table><thead><tr><th align="center">量词</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">重复零次或更多次</td></tr><tr><td align="center">+</td><td align="center">重复一次或更多次</td></tr><tr><td align="center">?</td><td align="center">重复零次或一次</td></tr><tr><td align="center">{n}</td><td align="center">重复n次</td></tr><tr><td align="center">{n,}</td><td align="center">重复n次或更多次</td></tr><tr><td align="center">{n,m}</td><td align="center">重复n到m次</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,&#125;$/</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line">       <span class="comment">//  &#123;3,16&#125;  大于等于3 并且 小于等于16</span></span><br><span class="line">       <span class="keyword">var</span> reg = <span class="regexp">/^a&#123;3,6&#125;$/</span>;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;aaaa&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="5、用户名验证"><a href="#5、用户名验证" class="headerlink" title="5、用户名验证"></a>5、用户名验证</h2><p>功能需求：</p><ol><li><p>如果用户名输入合法, 则后面提示信息为 : 用户名合法,并且颜色为绿色</p></li><li><p>如果用户名输入不合法, 则后面提示信息为: 用户名不符合规范, 并且颜色为绿色</p></li></ol><p>分析：</p><ol><li><p>用户名只能为英文字母,数字,下划线或者短横线组成, 并且用户名长度为 6~16位.</p></li><li><p>首先准备好这种正则表达式模式 /$[a-zA-Z0-9-_]{6,16}^/</p></li><li><p>当表单失去焦点就开始验证.</p></li><li><p>如果符合正则规范, 则让后面的span标签添加 right 类.</p></li><li><p>如果不符合正则规范, 则让后面的span标签添加 wrong 类.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;uname&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  量词是设定某个模式出现的次数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划线 短横线但是有边界符和[] 这就限定了只能多选1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#123;6,16&#125;  中间不要有空格</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;a&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;8&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;18&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;aa&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(&#x27;-------------&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;andy-red&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;andy_red&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;andy007&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// console.log(reg.test(&#x27;andy!007&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.uname&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> span = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;span&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        uname.<span class="property">onblur</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">value</span>)) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正确的&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                span.<span class="property">className</span> = <span class="string">&#x27;right&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入正确&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误的&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                span.<span class="property">className</span> = <span class="string">&#x27;wrong&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                span.<span class="property">innerHTML</span> = <span class="string">&#x27;用户名格式输入不正确&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="6、括号总结"><a href="#6、括号总结" class="headerlink" title="6、括号总结"></a>6、括号总结</h2><ol><li><strong>大括号</strong> 量词符 里面面表示重复次数</li><li><strong>中括号</strong> 字符集合 匹配方括号中的任意字符</li><li><strong>小括号</strong> 表示优先级</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大括号 量词符 里面表示重复次数</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc&#123;3&#125;$/</span>;   <span class="comment">// 它只是让c 重复3次 abccc</span></span><br><span class="line"><span class="comment">// 中括号 字符集合 匹配方括号中的任意字符</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[abc]$/</span>;</span><br><span class="line"><span class="comment">// a || b || c</span></span><br><span class="line"><span class="comment">// 小括号 表示优先级</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(abc)&#123;3&#125;$/</span>;  <span class="comment">//它是让 abc 重复3次</span></span><br></pre></td></tr></table></figure><h2 id="7、预定义类"><a href="#7、预定义类" class="headerlink" title="7、预定义类"></a>7、预定义类</h2><p>预定义类指的是<code>某些常见模式的简写写法</code></p><table><thead><tr><th align="center">预定类</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\d</td><td align="center">匹配0-9之间的任一数字，相当于[0-9]</td></tr><tr><td align="center">\D</td><td align="center">匹配所有0-9以外的字符，相当于[ ^ 0-9]</td></tr><tr><td align="center">\w</td><td align="center">匹配任意的字母、数字和下划线,相当于[A-Za-z0-9_ ]</td></tr><tr><td align="center">\W</td><td align="center">除所有字母、数字、和下划线以外的字符，相当于[ ^A-Za-z0-9_ ]</td></tr><tr><td align="center">\s</td><td align="center">匹配空格（包括换行符，制表符，空格符等），相当于[\t\t\n\v\f]</td></tr><tr><td align="center">\S</td><td align="center">匹配非空格的字符，相当于[ ^ \t\r\n\v\f]</td></tr><tr><td align="center">.</td><td align="center">通配符 <code>.</code> 将匹配任何一个字符</td></tr></tbody></table><p>分析：</p><p>1.手机号码: <code>/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</code></p><p>2.QQ: <code>[1-9][0-9]&#123;4,&#125;</code> (腾讯QQ号从10000开始)</p><p>3.昵称是中文: <code>^[\u4e00-\u9fa5]&#123;2,8&#125;$</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 座机号码验证:  全国座机号码  两种格式:   010-12345678  或者  0530-1234567</span></span><br><span class="line">  <span class="comment">// 正则里面的或者 符号  |  </span></span><br><span class="line">  <span class="comment">// var reg = /^\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;$/;</span></span><br><span class="line">  <span class="keyword">var</span> reg = <span class="regexp">/^\d&#123;3,4&#125;-\d&#123;7,8&#125;$/</span>;</span><br></pre></td></tr></table></figure><h2 id="8、正则表达式中的替换"><a href="#8、正则表达式中的替换" class="headerlink" title="8、正则表达式中的替换"></a>8、正则表达式中的替换</h2><h3 id="1、replace-替换"><a href="#1、replace-替换" class="headerlink" title="1、replace 替换"></a>1、replace 替换</h3><p><code>replace()</code>方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.<span class="title function_">replace</span>(regexp/substr,replacement)</span><br></pre></td></tr></table></figure><ol><li>第一个参数: 被替换的字符串或者正则表达式</li><li>第二个参数：替换为的字符串</li><li>返回值是一个替换完毕的新字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换 replace</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;andy和red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;andy&#x27;</span>,<span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr);<span class="comment">//baby和red</span></span><br><span class="line"><span class="keyword">var</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/a*/</span>,<span class="string">&#x27;baby&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr);<span class="comment">//babyndy和red</span></span><br></pre></td></tr></table></figure><h3 id="2、正则表达式参数"><a href="#2、正则表达式参数" class="headerlink" title="2、正则表达式参数"></a>2、正则表达式参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/表达式/[<span class="keyword">switch</span>]</span><br></pre></td></tr></table></figure><p><code>switch</code>按照什么样的模式来匹配，有三种</p><ul><li><code>g</code>: 全局匹配</li><li><code>i</code>:忽略大小写</li><li><code>gi</code>: 全局匹配 + 忽略大小写</li></ul><p>9.<strong>正向先行断言和负向先行断言</strong></p><p>正向先行断言会查看并确保搜索匹配模式中的元素存在，但实际上并不匹配。 正向先行断言的用法是 <code>(?=...)</code>，其中 <code>...</code> 就是需要存在但不会被匹配的部分。</p><p>另一方面，负向先行断言会查看并确保搜索匹配模式中的元素不存在。 负向先行断言的用法是 <code>(?!...)</code>，其中 <code>...</code> 是希望不存在的匹配模式。 如果负向先行断言部分不存在，将返回匹配模式的其余部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> quit = <span class="string">&quot;qu&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> noquit = <span class="string">&quot;qt&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> quRegex= <span class="regexp">/q(?=u)/</span>;</span><br><span class="line"><span class="keyword">let</span> qRegex = <span class="regexp">/q(?!u)/</span>;</span><br><span class="line">quit.<span class="title function_">match</span>(quRegex);</span><br><span class="line">noquit.<span class="title function_">match</span>(qRegex);</span><br></pre></td></tr></table></figure><p>这两次 <code>match</code> 调用都将返回 <code>[&quot;q&quot;]</code>。</p><p>先行断言的更实际用途是检查一个字符串中的两个或更多匹配模式。 这里有一个简单的密码检查器，密码规则是 3 到 6 个字符且至少包含一个数字：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> password = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> checkPass = <span class="regexp">/(?=\w&#123;3,6&#125;)(?=\D*\d)/</span>;</span><br><span class="line">checkPass.<span class="title function_">test</span>(password);</span><br></pre></td></tr></table></figure><h1 id="5-解构赋值"><a href="#5-解构赋值" class="headerlink" title="5.解构赋值"></a>5.解构赋值</h1><p>解构赋值是 ES6 引入的新语法，用来从<code>数组和对象</code>中提取值，并优雅地对变量进行<code>赋值</code></p><h2 id="1-解构对象"><a href="#1-解构对象" class="headerlink" title="1.解构对象"></a>1.解构对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = user.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">const</span> age = user.<span class="property">age</span>;</span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> &#123; name, age &#125; = user;</span><br></pre></td></tr></table></figure><p><strong>使用解构赋值从嵌套对象中分配变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">  <span class="attr">johnDoe</span>: &#123; </span><br><span class="line">    <span class="attr">age</span>: <span class="number">34</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是解构对象的属性值赋值给具有相同名字的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; age, email &#125;&#125; = user;</span><br><span class="line"><span class="comment">//age: 34</span></span><br><span class="line"><span class="comment">//email: &#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br></pre></td></tr></table></figure><p>这是将对象的属性值赋值给具有不同名字的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">johnDoe</span>: &#123; <span class="attr">age</span>: userAge, <span class="attr">email</span>: userEmail &#125;&#125; = user;</span><br><span class="line"><span class="comment">//userAge: 34</span></span><br><span class="line"><span class="comment">//userEmail: &#x27;johnDoe@freeCodeCamp.com&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-解构数组"><a href="#2-解构数组" class="headerlink" title="2.解构数组"></a>2.解构数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br></pre></td></tr></table></figure><p>控制台将显示 <code>a</code> 和 <code>b</code> 的值为 <code>1, 2</code>。数组的第一个值被赋值给变量 <code>a</code>，数组的第二个值被赋值给变量 <code>b</code>。 我们甚至能在数组解构中使用逗号分隔符，来获取任意一个想要的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b,,, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br></pre></td></tr></table></figure><p>控制台将显示 <code>a</code>、<code>b</code> 和 <code>c</code> 的值为 <code>1, 2, 5</code>。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES5</title>
      <link href="/2022/03/01/js/ES5/"/>
      <url>/2022/03/01/js/ES5/</url>
      
        <content type="html"><![CDATA[<h1 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h1><h2 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h2><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了<code>浏览器脚本语言的标准</code>，并将这种语言称为 <code>ECMAScript</code>，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，<code>前者是后者的规格，后者是前者的一种实现</code>（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><h1 id="ES5新增方法"><a href="#ES5新增方法" class="headerlink" title="ES5新增方法"></a>ES5新增方法</h1><p>ES5 给我们新增了一些方法，可以很方便的操作数组或者字符串</p><ul><li>数组方法</li><li>字符串方法</li><li>对象方法</li></ul><h2 id="1、数组方法"><a href="#1、数组方法" class="headerlink" title="1、数组方法"></a>1、数组方法</h2><p>迭代(遍历)方法：foreach() ，map()，filter()，some() ，every() ;</p><h3 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1.forEach()"></a>1.forEach()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>))</span><br></pre></td></tr></table></figure><ul><li>currentValue : 数组当前项的值</li><li>index: 数组当前项的索引</li><li>arr: 数组对象本身</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// forEach 迭代(遍历) 数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, array</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素&#x27;</span> + value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;每个数组元素的索引号&#x27;</span> + index);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数组本身&#x27;</span> + array);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            sum += value;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">输出是</span><br><span class="line">每个数组元素<span class="number">1</span></span><br><span class="line"> 每个数组元素的索引号<span class="number">0</span></span><br><span class="line"> 数组本身<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"> 每个数组元素<span class="number">2</span></span><br><span class="line"> 每个数组元素的索引号<span class="number">1</span></span><br><span class="line"> 数组本身<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"> 每个数组元素<span class="number">3</span></span><br><span class="line"> 每个数组元素的索引号<span class="number">2</span></span><br><span class="line"> 数组本身<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="2-map"><a href="#2-map" class="headerlink" title="2.map"></a>2.map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item+<span class="number">1</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>遍历数组返回一个<strong>新的数组，不改变原数组</strong>，返回加工之后的值，参数为回调函数，回调函数有两个参数</p><ul><li>item: 数组中的元素</li><li>index: 元素的下标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> persons = [<span class="string">&#x27;SunWuKong&#x27;</span>,<span class="string">&#x27;TangSeng&#x27;</span>,<span class="string">&#x27;ZhuBaJie&#x27;</span>,<span class="string">&#x27;ShaWuJing&#x27;</span>,<span class="string">&#x27;TangSeng&#x27;</span>]</span><br><span class="line"><span class="comment">/* const vPersons = persons.map((item,index) =&gt; &#123;</span></span><br><span class="line"><span class="comment">return item = &#x27;hello, \t&#x27; + item</span></span><br><span class="line"><span class="comment">&#125;) */</span></span><br><span class="line"><span class="comment">/* 使用单行箭头函数，省掉关键字return */</span></span><br><span class="line"><span class="keyword">const</span> vPersons = persons.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="string">&#x27;hello,&#x27;</span> + item)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(persons)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vPersons)</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/20200713012126441.png" alt="img"></p><h3 id="3-indexOf-lastIndexOf"><a href="#3-indexOf-lastIndexOf" class="headerlink" title="3.indexOf/lastIndexOf"></a>3.indexOf/lastIndexOf</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">indexOf</span>(item)</span><br></pre></td></tr></table></figure><p>返回的是item在数组里的下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> persons = [<span class="string">&#x27;SunWuKong&#x27;</span>,<span class="string">&#x27;TangSeng&#x27;</span>,<span class="string">&#x27;ZhuBaJie&#x27;</span>,<span class="string">&#x27;ShaWuJing&#x27;</span>,<span class="string">&#x27;TangSeng&#x27;</span>]</span><br><span class="line"><span class="comment">// 因为方法在原型链上所以我们有两种使用的方法</span></span><br><span class="line"><span class="comment">// 1. Array.prototype.方法名.call(arr,数组中的元素)(了解)</span></span><br><span class="line"><span class="comment">// 2. arr.方法名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(persons.<span class="title function_">indexOf</span>(<span class="string">&#x27;TangSeng&#x27;</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// console.log(persons.lastIndexOf(&#x27;TangSeng&#x27;))</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">lastIndexOf</span>.<span class="title function_">call</span>(persons,<span class="string">&#x27;TangSeng&#x27;</span>))<span class="comment">//4</span></span><br></pre></td></tr></table></figure><h3 id="4-filter-筛选数组"><a href="#4-filter-筛选数组" class="headerlink" title="4.filter()筛选数组"></a>4.filter()筛选数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>))</span><br></pre></td></tr></table></figure><ul><li><code>filter()</code>方法创建一个<code>新的数组</code>，新数组中的元素是通过检查指定数组中符合条件的所有元素，主要用于筛选数组</li><li>注意它直接返回一个<code>新数组</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filter 筛选数组</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line">  <span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value, index</span>) &#123;</span><br><span class="line">      <span class="comment">// return value &gt;= 20;</span></span><br><span class="line">      <span class="keyword">return</span> value % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><h3 id="5-some"><a href="#5-some" class="headerlink" title="5.some()"></a>5.some()</h3><ul><li><code>some()</code>方法用于检测数组中的元素是否满足指定条件（查找数组中是否有满足条件的元素）</li><li>注意它返回的是布尔值，如果查找到这个元素，就返回true，如果查找不到就返回false</li><li>如果找到第一个满足条件的元素，则终止循环，不再继续查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// some 查找数组中是否有满足条件的元素 </span></span><br><span class="line">       <span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">       <span class="keyword">var</span> flag1 = arr1.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> value == <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(flag1);</span><br><span class="line">       <span class="comment">// 1. filter 也是查找满足条件的元素 返回的是一个数组 而且是把所有满足条件的元素返回回来</span></span><br><span class="line">       <span class="comment">// 2. some 也是查找满足条件的元素是否存在  返回的是一个布尔值 如果查找到第一个满足条件的元素就终止循环</span></span><br></pre></td></tr></table></figure><h2 id="2、字符串方法"><a href="#2、字符串方法" class="headerlink" title="2、字符串方法"></a>2、字符串方法</h2><ul><li><code>trim()</code>方法会从一个字符串的两端删除空白字符</li><li><code>trim()</code>方法并不影响原字符串本身，它返回的是一个新的字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = str.<span class="title function_">trim</span>();</span><br></pre></td></tr></table></figure><h2 id="3、对象方法"><a href="#3、对象方法" class="headerlink" title="3、对象方法"></a>3、对象方法</h2><h3 id="1-Object-create"><a href="#1-Object-create" class="headerlink" title="1 Object.create"></a>1 Object.create</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">create</span>(person,&#123;</span><br><span class="line">    <span class="attr">gender</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建一个对象，为对象指定原型并返回，一共有两个参数</p><p>第一个参数：必须，原型对象</p><p>第二个参数：可选，是一个配置对象，为对象定义新的属性</p><ul><li><code>value</code> : 指定值</li><li><code>writable</code> : 标识当前属性值是否是可修改的, 默认为false</li><li><code>configurable</code>: 标识当前属性是否可以被删除 默认为false</li><li><code>enumerable：</code> 标识当前属性是否能用for in 枚举 默认为false</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Jerry&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> createPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person,&#123;</span><br><span class="line">    <span class="attr">gender</span>:&#123;</span><br><span class="line">        <span class="attr">value</span>:<span class="string">&quot;male&quot;</span>,</span><br><span class="line">        <span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(createPerson)</span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="keyword">delete</span> createPerson.<span class="property">gender</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(createPerson)</span><br></pre></td></tr></table></figure><h3 id="2-Object-keys"><a href="#2-Object-keys" class="headerlink" title="2.Object.keys()"></a>2.Object.keys()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br></pre></td></tr></table></figure><ol><li><code>Object.keys()</code>用于获取对象自身所有的属性</li><li>效果类似<code>for...in</code></li><li>返回一个由属性名组成的数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于获取对象自身所有的属性</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="number">1999</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">2000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        <span class="comment">// id</span></span><br><span class="line">        <span class="comment">// pname</span></span><br><span class="line">        <span class="comment">// price</span></span><br><span class="line">        <span class="comment">// num</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="3-Object-defineProperty"><a href="#3-Object-defineProperty" class="headerlink" title="3.Object.defineProperty()"></a>3.Object.defineProperty()</h3><p><code>Object.defineProperty()</code>定义对象中新属性或修改原有的属性(了解)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,prop,descriptor)</span><br></pre></td></tr></table></figure><ul><li>obj : 目标对象</li><li>prop : 需定义或修改的属性的名字</li><li>descriptor : 目标属性所拥有的特性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty() 定义新属性或修改原有的属性</span></span><br><span class="line">      <span class="keyword">var</span> obj = &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">pname</span>: <span class="string">&#x27;小米&#x27;</span>,</span><br><span class="line">          <span class="attr">price</span>: <span class="number">1999</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 1. 以前的对象添加和修改属性的方式</span></span><br><span class="line">      <span class="comment">// obj.num = 1000;</span></span><br><span class="line">      <span class="comment">// obj.price = 99;</span></span><br><span class="line">      <span class="comment">// console.log(obj);</span></span><br><span class="line">      <span class="comment">// 2. Object.defineProperty() 定义新属性或修改原有的属性</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;num&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="number">1000</span>,</span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;price&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="number">9.9</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;id&#x27;</span>, &#123;</span><br><span class="line">          <span class="comment">// 如果值为false 不允许修改这个属性值 默认值也是false</span></span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      obj.<span class="property">id</span> = <span class="number">2</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;中国山东蓝翔技校xx单元&#x27;</span>,</span><br><span class="line">          <span class="comment">// 如果只为false 不允许修改这个属性值 默认值也是false</span></span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span></span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// configurable 如果为false 则不允许删除这个属性 不允许在修改第三个参数里面的特性 默认为false</span></span><br><span class="line">          <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span><br><span class="line">      <span class="keyword">delete</span> obj.<span class="property">address</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="keyword">delete</span> obj.<span class="property">pname</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;address&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="string">&#x27;中国山东蓝翔技校xx单元&#x27;</span>,</span><br><span class="line">          <span class="comment">// 如果值为false 不允许修改这个属性值 默认值也是false</span></span><br><span class="line">          <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span></span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// configurable 如果为false 则不允许删除这个属性 默认为false</span></span><br><span class="line">          <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">address</span>);</span><br></pre></td></tr></table></figure><h2 id="4-JSON"><a href="#4-JSON" class="headerlink" title="4.JSON"></a>4.JSON</h2><p>ES5提供了<code>JSON</code>全局对象，用来序列化和反序列化对象为<code>JSON</code></p><blockquote><p><strong>序列化</strong>： 把对象转换为字节序列的过程称为对象的序列化</p></blockquote><h3 id="1-JSON-parse"><a href="#1-JSON-parse" class="headerlink" title="1.JSON.parse"></a>1.JSON.parse</h3><p>第一个参数：必须，字符串</p><p>第二个参数：可选，是一个函数，函数传递两个参数</p><ul><li><code>key</code>转换为对象的属性名</li><li><code>value</code>转换为对象的属性值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;name&quot;: &quot;Jerry&quot;, &quot;age&quot;: 18,&quot;gender&quot;:&quot;male&quot;&#125;&#x27;</span>, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 输出当前属性，最后一个为 &quot;&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line"><span class="comment">/* 对于对象的属性值做修改 */</span></span><br><span class="line"><span class="keyword">return</span> value + <span class="string">&quot;OK&quot;</span>; <span class="comment">// 返回修改的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/image-20211204161451935.png" alt="image-20211204161451935"><br>这里最后输出一个空字符串，并最终输出整个对象，我们可以利用这个特性来返回对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&quot;&#123;...&#125;&quot;</span>,<span class="keyword">function</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key === <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-JSON-stringify"><a href="#2-JSON-stringify" class="headerlink" title="2.JSON.stringify"></a>2.JSON.stringify</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(value[, replacer [, space]])</span><br></pre></td></tr></table></figure><p><strong>第一个参数：必须，要转化的数组或者对象（这个主要用）</strong></p><p>第二个参数：可选，是一个函数，或者数组（如果传递第二个参数，则返回值由你自己决定）</p><p>如果是一个函数，则参数与功能与<strong>JSON.parse</strong> 相同</p><p>第三个参数：可选，对于返回值进行格式化</p><ul><li>数字：表示缩进几个空格，最多缩进10个</li><li>非数字：比如\t</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;);                        <span class="comment">// &#x27;&#123;&#125;&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">true</span>);                      <span class="comment">// &#x27;true&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&quot;foo&quot;</span>);                     <span class="comment">// &#x27;&quot;foo&quot;&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>([<span class="number">1</span>, <span class="string">&quot;false&quot;</span>, <span class="literal">false</span>]);       <span class="comment">// &#x27;[1,&quot;false&quot;,false]&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">x</span>: <span class="number">5</span> &#125;);                  <span class="comment">// &#x27;&#123;&quot;x&quot;:5&#125;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Jerry&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person)) <span class="comment">//&#123;&quot;name&quot;:&quot;Jerry&quot;,&quot;age&quot;:18&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面向对象</title>
      <link href="/2022/03/01/js/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/03/01/js/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript面向对象"><a href="#JavaScript面向对象" class="headerlink" title="JavaScript面向对象"></a>JavaScript面向对象</h1><h1 id="1、面向对象"><a href="#1、面向对象" class="headerlink" title="1、面向对象"></a>1、面向对象</h1><h2 id="1、对象"><a href="#1、对象" class="headerlink" title="1、对象"></a>1、对象</h2><p>在 JavaScript 中，对象是一组无序的相关属性和方法的集合，所有的事物都是对象，例如字符串、数值、数组、函数等。</p><p>对象是由属性和方法组成的</p><ul><li>属性：事物的<strong>特征，在对象中用属性</strong>来表示</li><li>方法：事物的<strong>行为，在对象中用方法</strong>来表示</li></ul><h2 id="2、类"><a href="#2、类" class="headerlink" title="2、类"></a>2、类</h2><p>在 ES6 中新增加了类的概念，可以使用 class 关键字声明一个类，之后以这个类来实例化对象。</p><ul><li>类抽象了对象的公共部分，它泛指某一大类（class）</li><li>对象特指某一个，通过类实例化一个具体的对象</li></ul><h3 id="1、创建类"><a href="#1、创建类" class="headerlink" title="1、创建类"></a>1、创建类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class name &#123;</span><br><span class="line">    // class body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-创建实例"><a href="#2-创建实例" class="headerlink" title="2.创建实例"></a>2.创建实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">XX</span> = <span class="keyword">new</span> <span class="title function_">name</span>();</span><br></pre></td></tr></table></figure><h3 id="3、构造函数"><a href="#3、构造函数" class="headerlink" title="3、构造函数"></a>3、构造函数</h3><p><code>constructor()</code>方法是类的构造函数(默认方法)，<code>用于传递参数,返回实例对象</code>，通过 new 命令生成对象实例时，自动调用该方法。如果没有显示定义, 类内部会自动给我们创建一个<code>constructor()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">        <span class="comment">// constructor 构造器或者构造函数</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类名首字母大写</li><li>类里面有个 constructor函数，可以接收传递过来的参数，同时返回实例对象</li><li>constructor函数只要 new 生成实例时，就会自动调用这个函数，如果我们不写这个函数，类也会自动生成这个函数</li><li>最后注意语法规范</li><li>创建类➡类名后面不要加小括号<br>生成实例➡类名后面加小括号<br>构造函数不需要加 function 关键字</li></ul><h3 id="4、类中添加方法"><a href="#4、类中添加方法" class="headerlink" title="4、类中添加方法"></a>4、类中添加方法</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;   </span><br><span class="line">      <span class="comment">// constructor 称为构造器或者构造函数</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;      </span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>); </span><br><span class="line">ldh.<span class="title function_">say</span>() </span><br></pre></td></tr></table></figure><p>注意： 方法之间不能加<code>逗号</code>分隔，同时方法不需要添加 <code>function</code> 关键字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 1. 创建类 class  创建一个 明星类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">        <span class="comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sing</span>(<span class="params">song</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">uname</span> + song);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ldh);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zxy);</span><br><span class="line"><span class="comment">// (1) 我们类里面所有的函数不需要写function </span></span><br><span class="line"><span class="comment">// (2) 多个函数方法之间不需要添加逗号分隔</span></span><br><span class="line">ldh.<span class="title function_">sing</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line">zxy.<span class="title function_">sing</span>(<span class="string">&#x27;李香兰&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类的共有属性放到constructor 里面</li><li>类里面的函数都不需要写 function 关键字</li></ul><h3 id="5-构造函数的简单写法"><a href="#5-构造函数的简单写法" class="headerlink" title="5.构造函数的简单写法"></a>5.构造函数的简单写法</h3><p>上面的构造函数我们需要把class、constructor都写出来，但我们经常选择省掉。</p><p>以下就是一个构造函数的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   &lt;script&gt;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name, color</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">numLegs</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">sum</span> = <span class="keyword">function</span> (<span class="params">song</span>) &#123;  <span class="comment">//方法</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>+song);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> swan = <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">swan.<span class="property">name</span> = <span class="string">&quot;Carlos&quot;</span>;</span><br><span class="line">swan.<span class="property">color</span> = <span class="string">&quot;white&quot;</span></span><br><span class="line">swan.<span class="title function_">sum</span>(<span class="string">&#x27;冰雨&#x27;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、类的继承"><a href="#3、类的继承" class="headerlink" title="3、类的继承"></a>3、类的继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 父类</span><br><span class="line">class Father &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 子类继承父类</span><br><span class="line">class Son extends Father &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一个实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 父类有加法方法</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 子类继承父类加法方法 同时 扩展减法方法</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">            <span class="comment">// 利用super 调用父类的构造函数</span></span><br><span class="line">            <span class="comment">// super 必须在子类this之前调用</span></span><br><span class="line">            <span class="variable language_">super</span>(x, y);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">subtract</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> - <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">    son.<span class="title function_">subtract</span>();</span><br><span class="line">    son.<span class="title function_">sum</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4、super关键字"><a href="#4、super关键字" class="headerlink" title="4、super关键字"></a>4、super关键字</h2><ul><li><code>super</code> 关键字用于访问和调用对象父类上的函数，可以调用父类的构造函数，也可以调用父类的普通函数</li></ul><h3 id="1、调用父类的构造函数"><a href="#1、调用父类的构造函数" class="headerlink" title="1、调用父类的构造函数"></a>1、调用父类的构造函数</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> entends <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname,firstname</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(surname);<span class="comment">//调用父类的 constructor(surname)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstname</span> = firstname;<span class="comment">//定义子类独有的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<strong>子类在构造函数中使用super,必须放到this前面（必须先调用父类的构造方法，在使用子类构造方法）</strong></p><p>案例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">surname</span> = surname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">saySurname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的姓是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">surname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类继承父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> entends <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">surname,firstname</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(surname);<span class="comment">//调用父类的 constructor(surname)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstname</span> = firstname;<span class="comment">//定义子类独有的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayFirstname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">firstname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘&#x27;</span>,<span class="string">&#x27;德华&#x27;</span>);</span><br><span class="line">damao.<span class="title function_">saySurname</span>();</span><br><span class="line">damao.<span class="title function_">sayFirstname</span>();</span><br></pre></td></tr></table></figure><h3 id="2、调用父类的普通函数"><a href="#2、调用父类的普通函数" class="headerlink" title="2、调用父类的普通函数"></a>2、调用父类的普通函数</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是爸爸&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// super.say() super调用父类的方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">say</span>() + <span class="string">&#x27;的儿子&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> damao = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(damao.<span class="title function_">say</span>());</span><br></pre></td></tr></table></figure><ul><li>多个方法之间不需要添加逗号分隔</li><li>继承中属性和方法的查找原则：就近原则，先看子类，再看父类</li></ul><h3 id="3-三个注意点"><a href="#3-三个注意点" class="headerlink" title="3.三个注意点"></a>3.三个注意点</h3><ol><li>在ES6中类没有变量提升，所以必须先定义类，才能通过类实例化对象</li><li>类里面的共有属性和方法一定要加 <code>this</code>使用</li><li>类里面的<code>this</code>指向：<ul><li>constructor 里面的 <code>this</code>指向实例对象</li><li>方法里面的<code>this</code>指向这个方法的调用者</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> _that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">constructor</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// constructor 里面的this 指向的是 创建的实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// this.sing();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">btn</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">btn</span>.<span class="property">onclick</span> = <span class="variable language_">this</span>.<span class="property">sing</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">sing</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 这个sing方法里面的this 指向的是 btn 这个按钮,因为这个按钮调用了这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">uname</span>); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// that里面存储的是constructor里面的this</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">dance</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 这个dance里面的this 指向的是实例对象 ldh 因为ldh 调用了这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                _that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">dance</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(_that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 类里面的共有的属性和方法一定要加this使用.</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="2、构造函数和原型"><a href="#2、构造函数和原型" class="headerlink" title="2、构造函数和原型"></a>2、构造函数和原型</h1><h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><p>创建对象有三种方式</p><ul><li><strong>对象字面量</strong></li><li><strong>new Object()</strong></li><li><strong>自定义构造函数</strong></li><li><strong>可以用<code>instanceof</code>来检查对象的类型</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// <span class="number">1</span>. 利用 new <span class="selector-tag">Object</span>() 创建对象</span><br><span class="line"><span class="selector-tag">var</span> obj1 = new <span class="selector-tag">Object</span>();</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 利用对象字面量创建对象</span><br><span class="line"><span class="selector-tag">var</span> obj2 = &#123;&#125;；</span><br><span class="line"></span><br><span class="line">// <span class="number">3</span>.利用构造函数创建对象</span><br><span class="line">function Star(uname,age) &#123;</span><br><span class="line">    this<span class="selector-class">.uname</span> = uname;</span><br><span class="line">    this<span class="selector-class">.age</span> = age;</span><br><span class="line">    this<span class="selector-class">.sing</span> = function() &#123;</span><br><span class="line">        console<span class="selector-class">.log</span>(&#x27;我会唱歌&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">var</span> ldh = new Star(&#x27;刘德华&#x27;,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">// <span class="number">4</span>.可以用instanceof来检查对象的类型</span><br><span class="line">ldh instanceof Star</span><br><span class="line">这个会返回true</span><br></pre></td></tr></table></figure><h2 id="2、构造函数"><a href="#2、构造函数" class="headerlink" title="2、构造函数"></a>2、构造函数</h2><ul><li><p><code>构造函数</code>是一种特殊的函数，主要用来初始化对象(为对象成员变量赋初始值)，它总与new一起使用</p></li><li><p>我们可以把对象中的一些公共的属性和方法抽取出来，然后封装到这个函数里面</p><p>new 在执行时会做四件事：</p></li><li><p>在内存中创建一个新的空对象。</p></li><li><p>让 this 指向这个新的对象。</p></li><li><p>执行构造函数里面的代码，给这个新对象添加属性和方法。</p></li><li><p>返回这个新对象（所以构造函数里面不需要 return ）。</p></li></ul><h3 id="1、静态成员和实例成员"><a href="#1、静态成员和实例成员" class="headerlink" title="1、静态成员和实例成员"></a>1、静态成员和实例成员</h3><p>JavaScript 的构造函数中可以添加一些成员，可以在构造函数本身上添加，也可以在构造函数内部的this上添加。通过这两种方式添加的成员，就分别称为<code>静态成员</code>和<code>实例成员</code>。</p><ul><li>静态成员: <code>构造函数外面的</code></li><li>实例成员: <code>在构造函数里面的，有this的，这个属性又叫做自身属性</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数中的属性和方法我们称为成员，成员可以添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例成员就是构造函数内部通过this添加的成员  uname age sing  就是实例成员</span></span><br><span class="line"><span class="comment">// 实例成员只能通过实例化的对象来访问</span></span><br><span class="line">ldh.<span class="title function_">sing</span>();</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">uname</span>; <span class="comment">// undefined     不可以通过构造函数来访问实例成员</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态成员就是在构造函数本身上添加的成员 sex 就是静态成员</span></span><br><span class="line"><span class="comment">// 静态成员只能通过构造函数来访问</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property">sex</span>;</span><br><span class="line">ldh.<span class="property">sex</span>; <span class="comment">// undefined  不能通过对象来访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ownProps = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> idh) &#123;</span><br><span class="line">  <span class="keyword">if</span>(idh.<span class="title function_">hasOwnProperty</span>(property)) &#123;</span><br><span class="line">    ownProps.<span class="title function_">push</span>(property);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ownProps是[&quot;uname&quot;, &quot;age&quot;,&quot;sing&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="2、构造函数的问题"><a href="#2、构造函数的问题" class="headerlink" title="2、构造函数的问题"></a>2、构造函数的问题</h3><p>构造函数方法很好用，但是<code>存在浪费内存的问题</code></p><p>每次实例化一个类，就要开一个内存</p><p><img src="https://img-blog.csdnimg.cn/080f8513ab074159abf16942fd009b2b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><strong>我们希望所有的对象使用同一个函数，这样就比较节省内存</strong></p><h2 id="3、构造函数原型-prototype"><a href="#3、构造函数原型-prototype" class="headerlink" title="3、构造函数原型 prototype"></a>3、构造函数原型 prototype</h2><ul><li>构造函数通过<code>原型</code>分配的函数是所有对象所<code>共享的</code>,这样就解决了内存浪费问题</li><li>JavaScript 规定，每一个构造函数都有一个<code>prototype属性</code>，指向另一个<code>对象</code>，注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有</li><li>我们可以把那些<code>不变的方法</code>，直接定义在prototype 对象上，这样所有对象的实例就可以<code>共享这些方法</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // <span class="number">1</span>. 构造函数的问题. </span><br><span class="line">        function Star(uname, age) &#123;</span><br><span class="line">    //公共属性定义到构造函数里面</span><br><span class="line">            this<span class="selector-class">.uname</span> = uname;</span><br><span class="line">            this<span class="selector-class">.age</span> = age;</span><br><span class="line">            // this<span class="selector-class">.sing</span> = function() &#123;</span><br><span class="line">            //     console<span class="selector-class">.log</span>(&#x27;我会唱歌&#x27;);</span><br><span class="line">            // &#125;</span><br><span class="line">        &#125;</span><br><span class="line">//公共的方法我们放到原型对象身上</span><br><span class="line">        Star<span class="selector-class">.prototype</span><span class="selector-class">.sing</span> = function() &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(&#x27;我会唱歌&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">var</span> ldh = new Star(&#x27;刘德华&#x27;, <span class="number">18</span>);</span><br><span class="line">        <span class="selector-tag">var</span> zxy = new Star(&#x27;张学友&#x27;, <span class="number">19</span>);</span><br><span class="line">        console<span class="selector-class">.log</span>(ldh<span class="selector-class">.sing</span> === zxy<span class="selector-class">.sing</span>);</span><br><span class="line">        ldh<span class="selector-class">.sing</span>();</span><br><span class="line">        zxy<span class="selector-class">.sing</span>();</span><br><span class="line">        // <span class="number">2</span>. 一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>我们注意到，原型对象是在构造函数的外面定义的</p></blockquote><p>问答：原型是什么？</p><ul><li>一个对象，我们也称为 <code>prototype</code> 为原型对象</li></ul><p>问答：原型的作用是什么？</p><ul><li>共享方法</li></ul><h2 id="4、对象原型-proto"><a href="#4、对象原型-proto" class="headerlink" title="4、对象原型 __ proto __"></a>4、对象原型 <code>__ proto __</code></h2><ul><li>对象都会有一个属性 <code>_proto_</code> 指向构造函数的<code>prototype</code>原型对象，之所以我们对象可以使用构造函数prototype 原型对象的属性和方法，就是因为对象有<code>_proto_</code>原型的存在。</li><li><code>_proto_</code>对象原型和原型对象 prototype 是等价的</li><li><code>_proto_</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 <code>prototype</code></li></ul><p><img src="https://img-blog.csdnimg.cn/e8e771c189c548f7b67209722f6289dc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><blockquote><p>我们可以简单来理解一下，</p><p><code>prototype</code>：就是一个在构造函数外声明的对象，所有实例化的对象都可以使用这个东西</p><p><code>_proto_</code>：为什么迷宫实例化的对象都可以使用prototype呢，因为他们<code>自己有添加_proto_</code>，这个指向prototype</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 对象身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ldh.<span class="property">__proto__</span> === <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果没有sing 这个方法,因为有 __proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="5、constructor-构造函数"><a href="#5、constructor-构造函数" class="headerlink" title="5、constructor 构造函数"></a>5、constructor 构造函数</h2><p><code>对象原型(_proto_)</code> 和构造函数<code>(prototype)原型对象</code> 里面都有一个属性constructor属性,<code>constructor</code> 我们称为构造函数，因为它指回构造函数本身。</p><blockquote><p>手动设置一个新对象的原型有一个重要的副作用。 它清除了 <code>constructor</code> 属性！</p><p>为了解决这个问题，凡是手动给新对象重新设置过原型对象的，都别忘记在原型对象中定义一个 <code>constructor</code> 属性：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Star.prototype.sing = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&#x27;我会唱歌&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Star.prototype.movie = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(&#x27;我会演电影&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">constructor</span>: <span class="title class_">Star</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sing</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">movie</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会演电影&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> zxy = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;张学友&#x27;</span>, <span class="number">19</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8ee8345e99974afd93ce053e7988712d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h2 id="6-isPrototypeOf"><a href="#6-isPrototypeOf" class="headerlink" title="6.isPrototypeOf"></a>6.isPrototypeOf</h2><p>对象也可直接从创建它的构造函数那里继承其 <code>prototype</code>。 请看下面的例子：<code>Bird</code> 构造函数创建了一个 <code>duck</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Bird</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> duck = <span class="keyword">new</span> <span class="title class_">Bird</span>(<span class="string">&quot;Donald&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>duck</code> 从 <code>Bird</code> 构造函数那里继承了它的 <code>prototype</code>。 你可以使用 <code>isPrototypeOf</code> 方法来验证他们之间的关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Bird</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(duck);</span><br></pre></td></tr></table></figure><p>这将返回 <code>true</code>。</p><h2 id="7、原型链查找规则"><a href="#7、原型链查找规则" class="headerlink" title="7、原型链查找规则"></a>7、原型链查找规则</h2><ol><li>当访问一个对象的属性(包括方法)时，首先查找这个对象<code>自身</code>有没有该属性</li><li>如果没有就查找它的<code>原型</code>(也就是_proto_指向的prototype原型对象)</li><li>如果还没有就查找<code>原型对象的原型</code>(<code>Object的原型对象</code>)</li><li>依次类推一直找到Object为止(null)</li><li><code>__ proto __</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li></ol><p><img src="https://img-blog.csdnimg.cn/c1cbd18ff3444621bf151654714b85cd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 只要是对象就有__proto__ 原型, 指向原型对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.我们Star原型对象里面的__proto__原型指向的是 Object.prototype</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 我们Object.prototype原型对象里面的__proto__原型  指向为 null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="8、原型对象this指向"><a href="#8、原型对象this指向" class="headerlink" title="8、原型对象this指向"></a>8、原型对象this指向</h2><ul><li>构造函数中的 <code>this</code>指向我们的实例对象</li><li>原型对象里面放的是方法，这个方法里面的<code>this</code>指向的是这个方法的调用者，也就是这个实例对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> that;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that === ldh);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="3、继承"><a href="#3、继承" class="headerlink" title="3、继承"></a>3、继承</h1><h2 id="1、call"><a href="#1、call" class="headerlink" title="1、call()"></a>1、call()</h2><p><code>调用这个函数，并且修改函数运行时的 this 指向</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">call</span>(thisArg,arg1,arg2,......)</span><br></pre></td></tr></table></figure><ul><li><code>thisArg</code>：当前调用函数 this 的指向对象</li><li><code>arg1,arg2</code>： 传递的其他参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// call 方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, y</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我希望我的希望有希望&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);<span class="comment">// Object&#123;...&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);<span class="comment">// 3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. call() 可以调用函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn.call();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        fn.<span class="title function_">call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="2、借用构造函数继承父类型属性"><a href="#2、借用构造函数继承父类型属性" class="headerlink" title="2、借用构造函数继承父类型属性"></a>2、借用构造函数继承父类型属性</h2><p>核心原理: 通过 <code>call()</code> 把父类型的 this 指向子类型的 this，这样就可以实现子类型继承父类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 借用父构造函数继承属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 父构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向父构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2 .子构造函数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向子构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">score</span> = score;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="3、借用原型对象继承父类型方法"><a href="#3、借用原型对象继承父类型方法" class="headerlink" title="3、借用原型对象继承父类型方法"></a>3、借用原型对象继承父类型方法</h2><p><code>一般情况下，对象的方法都在构造函数的原型对象中设置，通过构造函数无法继承父类方法</code><br>核心原理：</p><ol><li>将子类所共享的方法提取出来，让子类的 <code>prototype 原型对象 = new 父类()</code></li><li>本质： 子类原型对象等于是实例化父类，因为父类实例化之后另外开辟空间，就不会影响原来父类原型对象</li><li>将子类的<code>constructor</code>重新指向子类的构造函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 借用父构造函数继承属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 父构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">uname, age</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向父构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">age</span> = age;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">money</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2 .子构造函数 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">uname, age, score</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// this 指向子构造函数的对象实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, uname, age);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">score</span> = score;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// Son.prototype = Father.prototype;  这样直接赋值会有问题,如果修改了子原型对象,父原型对象也会跟着一起变化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这个是子构造函数专门的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">exam</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;孩子要考试&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;刘德华&#x27;</span>, <span class="number">18</span>, <span class="number">100</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="4-类的本质"><a href="#4-类的本质" class="headerlink" title="4.类的本质"></a>4.类的本质</h2><ul><li>class 本质还是 function</li><li>类的所有方法都定义在类的 prototype属性上</li><li>类创建的实例，里面也有_proto_指向类的prototype原型对象</li><li>所以 ES6 的类它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</li><li>所以 ES6 的类其实就是语法糖</li><li>语法糖：语法糖就是一种便捷写法，简单理解</li></ul><h1 id="4、函数进阶"><a href="#4、函数进阶" class="headerlink" title="4、函数进阶"></a>4、函数进阶</h1><h2 id="1、函数的定义方式"><a href="#1、函数的定义方式" class="headerlink" title="1、函数的定义方式"></a>1、函数的定义方式</h2><ol><li>函数声明方式 function 关键字(命名函数)</li><li>函数表达式(匿名函数)</li><li>new Function()</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;参数1&#x27;</span>,<span class="string">&#x27;参数2&#x27;</span>,.....,<span class="string">&#x27;函数体&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>Function 里面参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>所有函数都是 Function 的实例(对象)</li><li>函数也属于对象</li></ul><p><img src="https://img-blog.csdnimg.cn/41f3e6248b384edba0cef92f7557b9b3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><blockquote><p><code>Function</code>相当于一个类，f是实例对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//  函数的定义方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 自定义函数(命名函数) </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 函数表达式 (匿名函数)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 利用 new Function(&#x27;参数1&#x27;,&#x27;参数2&#x27;, &#x27;函数体&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//             Function 里面参数都必须是字符串格式，执行效率低，较少写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;console.log(a + b)&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>(<span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 所有函数都是 Function 的实例(对象)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">dir</span>(f);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 5. 函数也属于对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(f <span class="keyword">instanceof</span> <span class="title class_">Object</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="2、函数的调用方式"><a href="#2、函数的调用方式" class="headerlink" title="2、函数的调用方式"></a>2、函数的调用方式</h2><ol><li>普通函数</li><li>对象的方法</li><li>构造函数</li><li>绑定事件函数</li><li>定时器函数</li><li>立即执行函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 函数的调用方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 普通函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fn();   fn.call()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 对象的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        o.<span class="title function_">sayHi</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 构造函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 绑定事件函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btn.onclick = function() &#123;&#125;;   // 点击了按钮就可以调用这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 5. 定时器函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// setInterval(function() &#123;&#125;, 1000);  这个函数是定时器自动1秒钟调用一次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 6. 立即执行函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人生的巅峰&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 立即执行函数是自动调用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="3、函数内this的指向"><a href="#3、函数内this的指向" class="headerlink" title="3、函数内this的指向"></a>3、函数内this的指向</h2><blockquote><p>this指向，是当我们调用函数的时候确定的，调用方式的不同决定了this的指向不同，一般我们指向我们的<code>调用者</code></p></blockquote><table><thead><tr><th align="center">调用方式</th><th align="center">this指向</th></tr></thead><tbody><tr><td align="center">普通函数调用</td><td align="center">window</td></tr><tr><td align="center">构造函数调用</td><td align="center">实例对象，原型对象里面的方法也指向实例对象</td></tr><tr><td align="center">对象方法调用</td><td align="center">该方法所属对象</td></tr><tr><td align="center">事件绑定方法</td><td align="center">绑定事件对象</td></tr><tr><td align="center">定时器函数</td><td align="center">window</td></tr><tr><td align="center">立即执行函数</td><td align="center">window</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 函数的不同调用方式决定了this 的指向不同</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 普通函数 this 指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;普通函数的this&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 对象的方法 this指向的是对象 o</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;对象方法的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        o.<span class="title function_">sayHi</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 构造函数 this 指向 ldh 这个实例对象 原型对象里面的this 指向的也是 ldh这个实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;构造函数的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> ldh = <span class="keyword">new</span> <span class="title class_">Star</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         ldh.<span class="title function_">sing</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 绑定事件函数 this 指向的是函数的调用者 btn这个按钮对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;绑定时间函数的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 5. 定时器函数 this 指向的也是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定时器的this:&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 6. 立即执行函数 this还是指向window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;立即执行函数的this&#x27;</span> + <span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>在这里我们需要注意，在严格模式下，普通函数的<code>this</code>是<code>没有定义的</code>，所有本该指向window的都不可以了。</p></blockquote><h2 id="4、改变函数内部this指向"><a href="#4、改变函数内部this指向" class="headerlink" title="4、改变函数内部this指向"></a>4、改变函数内部this指向</h2><p>JavaScript 为我们专门提供了一些函数方法来帮我们处理函数内部 this 的指向问题，常用的有 <code>bind(),call(),apply()</code>三种方法</p><h3 id="1、call-方法"><a href="#1、call-方法" class="headerlink" title="1、call() 方法"></a>1、call() 方法</h3><ul><li><p>call()方法调用一个对象，简单理解为调用函数的方式，但是它可以改变函数的this指向</p></li><li><p><code>fun.call(thisArg,arg1,arg2,.....)</code></p></li><li><p><code>thisArg</code>: 在 fun 函数运行时指定的 this 值</p></li><li><p><code>arg1,arg2</code>: 传递的其他参数</p></li><li><p>返回值就是函数的返回值，因为它就是调用函数</p></li><li><p>因此当我们想改变 this 指向，同时想调用这个函数的时候，可以使用 call，比如继承</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> o = &#123;</span><br><span class="line">            name: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function fn(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>) &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(this);</span><br><span class="line">            console<span class="selector-class">.log</span>(<span class="selector-tag">a</span> + <span class="selector-tag">b</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        fn<span class="selector-class">.call</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        // call 第一个可以调用函数 第二个可以改变函数内的this 指向</span><br><span class="line">        // call 的主要作用可以实现继承</span><br><span class="line">        function Father(uname, age, sex) &#123;</span><br><span class="line">            //这个this指向父实例对象</span><br><span class="line">            this<span class="selector-class">.uname</span> = uname;</span><br><span class="line">            this<span class="selector-class">.age</span> = age;</span><br><span class="line">            this<span class="selector-class">.sex</span> = sex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function Son(uname, age, sex) &#123;</span><br><span class="line">            //这个this指向子实例对象</span><br><span class="line">            Father<span class="selector-class">.call</span>(this, uname, age, sex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">var</span> son = new Son(&#x27;刘德华&#x27;, <span class="number">18</span>, &#x27;男&#x27;);</span><br><span class="line">        console<span class="selector-class">.log</span>(son);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-apply-方法"><a href="#2-apply-方法" class="headerlink" title="2. apply()方法"></a>2. apply()方法</h3><p>apply()方法调用一个函数，简单理解为调用函数的方式，但是它可以改变函数的 this指向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply(thisArg,[argsArray])</span><br></pre></td></tr></table></figure><p>返回值就是函数的返回值，因为它就是调用函数</p><p>因此 apply 主要跟数组有关系，比如使用 <code>Math.max()</code> 求数组的最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. apply()  应用 运用的意思</span></span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// &#x27;pink&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  fn.<span class="title function_">apply</span>(o, [<span class="string">&#x27;pink&#x27;</span>]);</span><br><span class="line">  <span class="comment">// 1. 也是调用函数 第二个可以改变函数内部的this指向</span></span><br><span class="line">  <span class="comment">// 2. 但是他的参数必须是数组(伪数组)</span></span><br><span class="line">  <span class="comment">// 3. apply 的主要应用 比如说我们可以利用 apply 借助于数学内置对象求数组最大值 </span></span><br><span class="line">  <span class="comment">// Math.max();</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">4</span>];</span><br><span class="line">  <span class="keyword">var</span> arr1 = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line">  <span class="comment">// var max = Math.max.apply(null, arr);</span></span><br><span class="line">  <span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span><br><span class="line">  <span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, arr);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(max, min);</span><br></pre></td></tr></table></figure><h3 id="3、bind-方法"><a href="#3、bind-方法" class="headerlink" title="3、bind()方法"></a>3、bind()方法</h3><ul><li><code>bind()</code>方法不会调用函数。但是能改变函数内部 this指向</li><li><code>fun.bind(thisArg,arg1,arg2,....)</code></li><li>返回由指定的 <code>this</code>值和初始化参数改造的 <code>原函数拷贝</code></li><li>因此当我们只是想改变 <code>this</code> 指向，并且<code>不想调用这个函数的时候</code>，可以使用bind</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 改变函数内this指向  js提供了三种方法  call()  apply()  bind()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. bind()  绑定 捆绑的意思</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>: <span class="string">&#x27;andy&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> f = fn.<span class="title function_">bind</span>(o, <span class="number">1</span>, <span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">f</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 不会调用原来的函数   可以改变原来函数内部的this 指向</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 返回的是原函数改变this之后产生的新函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. 如果有的函数我们不需要立即调用,但是又想改变这个函数内部的this指向此时用bind</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 4. 我们有一个按钮,当我们点击了之后,就禁用这个按钮,3秒钟之后开启这个按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var btn1 = document.querySelector(&#x27;button&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btn1.onclick = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     this.disabled = true; // 这个this 指向的是 btn 这个按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     // var that = this;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     setTimeout(function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         // that.disabled = false; // 定时器函数里面的this 指向的是window</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//         this.disabled = false; // 此时定时器函数里面的this 指向的是btn</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     &#125;.bind(this), 3000); // 这个this 指向的是btn 这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btns[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h3><p><code>call apply bind</code> 总结：</p><p>相同点：</p><p>都可以改变函数内部的 this指向<br>区别点：</p><ul><li><p>call和apply会调用函数，并且改变函数内部的this指向</p></li><li><p>call和apply传递的参数不一样，call 传递<code>参数</code>，apply 必须<code>数组</code>形式</p></li><li><p>bind<code>不会调用函数</code>，可以改变函数内部this指向</p><p>主要应用场景</p></li><li><p>call经常做<code>继承</code></p></li><li><p>apply经常跟<code>数组</code>有关系，比如借助于数学对线实现数组最大值与最小值</p></li><li><p>bind<code>不调用函数</code>，但是还想改变this指向，比如改变定时器内部的this指向</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bom树</title>
      <link href="/2022/03/01/js/Bom%E6%A0%91/"/>
      <url>/2022/03/01/js/Bom%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-Bom树"><a href="#JavaScript-Bom树" class="headerlink" title="JavaScript Bom树"></a>JavaScript Bom树</h1><p><img src="https://img-blog.csdnimg.cn/0f44250c831e4579aa3599072c855aeb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70" alt="img"></p><h1 id="1、BOM概述"><a href="#1、BOM概述" class="headerlink" title="1、BOM概述"></a>1、BOM概述</h1><ul><li>BOM = Browser Object Model 👉浏览器对象模型</li><li>它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window</li><li>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法与属性</li><li>BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA, DOM 的标准化组织是 W3C, BOM最初是Netscape 浏览器标准的一部分</li></ul><table><thead><tr><th align="center">DOM</th><th align="center">BOM</th></tr></thead><tbody><tr><td align="center">文档对象模型</td><td align="center">浏览器对象模型</td></tr><tr><td align="center">DOM 就是把<code>文档</code>当作一个对象来看待</td><td align="center">把<code>浏览器</code>当作一个对象来看待</td></tr><tr><td align="center">DOM 的顶级对象是 document</td><td align="center">BOM 的顶级对象是 window</td></tr><tr><td align="center">DOM 主要学习的是操作页面元素</td><td align="center">BOM 学习的是浏览器窗口交互的一些对象</td></tr><tr><td align="center">DOM 是 W3C 标准规范</td><td align="center">BOM 是浏览器厂商在各自浏览器上定义的，兼容性较差</td></tr></tbody></table><h2 id="1、BOM的构成"><a href="#1、BOM的构成" class="headerlink" title="1、BOM的构成"></a>1、BOM的构成</h2><p><img src="https://img-blog.csdnimg.cn/5c83bf307ec9486687a5f52312943ecb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><ul><li>BOM 比 DOM 更大。它包含 DOM。</li><li>window 对象是浏览器的顶级对象，它具有双重角色</li><li>它是 JS 访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法</li><li>在调用的时候可以省略 window，前面学习的对话框都属于 window 对象方法，如 alert()、prompt()等。</li><li>注意：window下的一个特殊属性 window.name</li></ul><h1 id="2、window-对象的常见事件"><a href="#2、window-对象的常见事件" class="headerlink" title="2、window 对象的常见事件"></a>2、window 对象的常见事件</h1><h2 id="1、窗口加载事件"><a href="#1、窗口加载事件" class="headerlink" title="1、窗口加载事件"></a>1、窗口加载事件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window<span class="selector-class">.onload</span> = function()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line">window<span class="selector-class">.addEventListener</span>(&quot;load&quot;,function()&#123;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>window.onload</code>是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（包括图像，脚本文件，CSS文件等），就调用的处理函数</p><p>注意：</p><ul><li>有了window.onload就可以把JS代码写到页面元素的上方</li><li>因为onload是等页面内容全部加载完毕，再去执行处理函数</li><li>window.onload 传统注册事件方式，只能写一次</li><li>如果有多个，会以最后一个window.onload为准</li><li>如果使用addEventListener 则没有限制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>接收两个参数：</p><ul><li>DOMCountentLoaded事件触发时，仅当DOM加载完成，不包括样式表，图片，flash等等</li><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间</li><li>交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded事件比较合适。</li></ul><h2 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h2><ul><li><code>load</code>等页面内容全部加载完毕，包括页面dom元素，图片，flash，css等</li><li><code>DOMContentLoaded</code> 是DOM加载完毕，不包含图片 flash css 等就可以执行，加载速度比load更快一些</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">    <span class="comment">//     var btn = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line">    <span class="comment">//     btn.addEventListener(&#x27;click&#x27;, function() &#123;</span></span><br><span class="line">    <span class="comment">//         alert(&#x27;点击我&#x27;);</span></span><br><span class="line">    <span class="comment">//     &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">    <span class="comment">//     alert(22);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">22</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="number">33</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span></span><br><span class="line">        <span class="comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3、调整窗口大小事件"><a href="#3、调整窗口大小事件" class="headerlink" title="3、调整窗口大小事件"></a>3、调整窗口大小事件</h2><p><code>window.onresize</code> 是调整窗口大小加载事件，当触发时就调用的处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><ul><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>我们经常利用这个事件完成响应式布局。<code>window.innerWidth</code> 当前屏幕的宽度</li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>这个是一些比较简单的事件，我们现在都不怎么常用了，更细节的会在vue的生命周期里介绍。</p><h1 id="3、定时器"><a href="#3、定时器" class="headerlink" title="3、定时器"></a>3、定时器</h1><p>window 对象给我们提供了两个定时器</p><ul><li><code>setTimeout()</code></li><li><code>setInterval()</code></li></ul><h2 id="1、setTimeout-定时器"><a href="#1、setTimeout-定时器" class="headerlink" title="1、setTimeout()定时器"></a>1、setTimeout()定时器</h2><p>setTimeout()方法用于设置一个定时器，该定时器在定时器到期后执行调用函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数,[延迟的毫秒数]);</span><br></pre></td></tr></table></figure><p>注意：c</p><ul><li>window可以省略</li><li>这个调用函数</li><li><ul><li>可以直接写函数</li><li>或者写函数名</li><li>或者采取字符串 ‘函数名()’ （不推荐）</li></ul></li><li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li><li>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</li><li>setTimeout() 这个调用函数我们也称为回调函数 callback</li><li>普通函数是按照代码顺序直接调用，而这个函数，需要等待事件，事件到了才会去调用这个函数，因此称为回调函数。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // <span class="number">1</span>. setTimeout </span><br><span class="line">        // 语法规范：  window<span class="selector-class">.setTimeout</span>(调用函数, 延时时间);</span><br><span class="line">        // <span class="number">1</span>. 这个window在调用的时候可以省略</span><br><span class="line">        // <span class="number">2</span>. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是<span class="number">0</span></span><br><span class="line">        // <span class="number">3</span>. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span><br><span class="line">        // <span class="number">4</span>. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span><br><span class="line">        // setTimeout(function() &#123;</span><br><span class="line">        //     console<span class="selector-class">.log</span>(&#x27;时间到了&#x27;);</span><br><span class="line"></span><br><span class="line">        // &#125;, <span class="number">2000</span>);</span><br><span class="line">        function callback() &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(&#x27;爆炸了&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">var</span> timer1 = setTimeout(callback, <span class="number">3000</span>);</span><br><span class="line">        <span class="selector-tag">var</span> timer2 = setTimeout(callback, <span class="number">5000</span>);</span><br><span class="line">        // setTimeout(&#x27;callback()&#x27;, <span class="number">3000</span>); // 我们不提倡这个写法</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="2、clearTimeout-停止定时器"><a href="#2、clearTimeout-停止定时器" class="headerlink" title="2、clearTimeout()停止定时器"></a>2、clearTimeout()停止定时器</h2><ul><li><code>clearTimeout()</code>方法取消了先前通过调用 <code>setTimeout()</code>建立的定时器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.clearTimeout(timeoutID)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>window</code>可以省略</li><li>里面的参数就是定时器的标识符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停止定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爆炸了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">5000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="built_in">clearTimeout</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="3、setInterval-定时器"><a href="#3、setInterval-定时器" class="headerlink" title="3、setInterval()定时器"></a>3、setInterval()定时器</h2><ul><li><code>setInterval()</code>方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. setInterval </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 语法规范：  window.setInterval(调用函数, 延时时间);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3. setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="4、clearInterval-停止定时器"><a href="#4、clearInterval-停止定时器" class="headerlink" title="4、clearInterval()停止定时器"></a>4、clearInterval()停止定时器</h2><p>这个和clearTimeout一样</p><h2 id="5、this指向"><a href="#5、this指向" class="headerlink" title="5、this指向"></a>5、this指向</h2><p>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁<br>现阶段，我们先了解一下几个this指向</p><p>全局作用域或者普通函数中this指向全局对象window(注意定时器里面的this指向window)<br>方法调用中谁调用this指向谁<br>构造函数中this指向构造函数实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this 指向问题 一般情况下this的最终指向的是那个调用它的对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="title function_">fn</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. 方法调用中谁调用this指向谁</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> o = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        o.<span class="title function_">sayHi</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// btn.onclick = function() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     console.log(this); // this指向的是btn这个按钮对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this指向的是btn这个按钮对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">Fun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、JS执行机制"><a href="#4、JS执行机制" class="headerlink" title="4、JS执行机制"></a>4、JS执行机制</h1><h2 id="1、JS是单线程"><a href="#1、JS是单线程" class="headerlink" title="1、JS是单线程"></a>1、JS是单线程</h2><ul><li><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。这是因为 Javascript 这门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p></li><li><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p></li></ul><h2 id="2-同步和异步"><a href="#2-同步和异步" class="headerlink" title="2.同步和异步"></a>2.同步和异步</h2><ul><li><p>同步:</p><ul><li>前一个任务结束后再执行后一个任务</li></ul></li><li><p>异步：</p><ul><li>在做这件事的同时，你还可以去处理其他事情</li></ul></li><li><p>同步任务都在主线程上执行，形成一个 <code>执行栈</code></p></li><li><p>JS中的异步是通过回调函数实现的</p></li><li><p>异步任务有以下三种类型</p><ul><li>普通事件，如<code>click</code>,<code>resize</code>等</li><li>资源加载，如<code>load</code>,<code>error</code>等</li><li>定时器，包括<code>setInterval</code>,<code>setTimeout</code>等</li></ul></li><li><p>异步任务相关回调函数添加到任务队列中</p></li></ul><p><img src="https://img-blog.csdnimg.cn/f0cc815b48574ce2bb068501a9394a5e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><ol><li>先执行执行栈中的同步任务</li><li>异步任务(回调函数)放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><p><img src="https://img-blog.csdnimg.cn/d337ebf7ba2c40c7a768fd91f6bfbf56.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/eaabe7880146428fb68e6e64f23db40c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>同步任务放在执行栈中执行，异步任务由异步进程处理放到任务队列中，执行栈中的任务执行完毕会去任务队列中查看是否有异步任务执行，由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为<code>事件循环</code>（ event loop）。</p><h1 id="5、location对象"><a href="#5、location对象" class="headerlink" title="5、location对象"></a>5、location对象</h1><p>window 对象给我们提供了一个 <code>location</code>属性用于获取或者设置窗体的url，并且可以解析url。因为这个属性返回的是一个对象，所以我们将这个属性也称为 location 对象。</p><h2 id="1、url"><a href="#1、url" class="headerlink" title="1、url"></a>1、url</h2><p>==统一资源定位符（uniform resouce locator）==是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</p><p>url 的一般语法格式为：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protocol://host[:port]/path/[?query]#fragment</span><br><span class="line"></span><br><span class="line">http://www.itcast.cn/index.html?name=andy&amp;age=18#link</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">组成</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">protocol</td><td align="center">通信协议 常用的http,ftp,maito等</td></tr><tr><td align="center">host</td><td align="center">主机(域名) <a href="http://www.itheima.com/">www.itheima.com</a></td></tr><tr><td align="center">port</td><td align="center">端口号，可选</td></tr><tr><td align="center">path</td><td align="center">路径 由零或多个’/‘符号隔开的字符串</td></tr><tr><td align="center">query</td><td align="center">参数 以键值对的形式，通过&amp;符号分隔开来</td></tr><tr><td align="center">fragment</td><td align="center">片段 #后面内容 常见于链接 锚点</td></tr></tbody></table><h2 id="2、location对象属性"><a href="#2、location对象属性" class="headerlink" title="2、location对象属性"></a>2、location对象属性</h2><table><thead><tr><th align="center">location对象属性</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">location.href</td><td align="center">获取或者设置整个URL</td></tr><tr><td align="center">location.host</td><td align="center">返回主机（域名）<a href="http://www.baidu.com/">www.baidu.com</a></td></tr><tr><td align="center">location.port</td><td align="center">返回端口号，如果未写返回空字符串</td></tr><tr><td align="center">location.pathname</td><td align="center">返回路径</td></tr><tr><td align="center">location.search</td><td align="center">返回参数</td></tr><tr><td align="center">location.hash</td><td align="center">返回片段 #后面内容常见于链接 锚点</td></tr></tbody></table><p>重点记住： <code>href</code>和<code>search</code></p><p>我们可以去修改这些location属性</p><p>需求：5s之后跳转页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   &lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                location.<span class="property">href</span> = <span class="string">&#x27;http://www.itcast.cn&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                div.<span class="property">innerHTML</span> = <span class="string">&#x27;您将在&#x27;</span> + timer + <span class="string">&#x27;秒钟之后跳转到首页&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                timer--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="3、location对象方法"><a href="#3、location对象方法" class="headerlink" title="3、location对象方法"></a>3、location对象方法</h2><table><thead><tr><th align="center">location对象方法</th><th align="center">返回值</th></tr></thead><tbody><tr><td align="center">location.assign()</td><td align="center">跟href一样，可以跳转页面（也称为重定向页面）</td></tr><tr><td align="center">location.replace()</td><td align="center">替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td align="center">location.reload()</td><td align="center">重新加载页面，相当于刷新按钮或者 f5 ，如果参数为true 强制刷新 ctrl+f5</td></tr></tbody></table><p>这些方法有些原始，不常用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// location.assign(&#x27;http://www.itcast.cn&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// location.replace(&#x27;http://www.itcast.cn&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            location.<span class="title function_">reload</span>(<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h1 id="6、navigator对象"><a href="#6、navigator对象" class="headerlink" title="6、navigator对象"></a>6、navigator对象</h1><ul><li>navigator 对象包含有关浏览器的信息，它有很多属性</li><li>我们常用的是userAgent,该属性可以返回由客户机发送服务器的user-agent头部的值<br>下面前端代码可以判断用户是用哪个终端打开页面的，如果是用 PC 打开的，我们就跳转到 PC 端的页面，如果是用手机打开的，就跳转到手机端页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="7、history对象"><a href="#7、history对象" class="headerlink" title="7、history对象"></a>7、history对象</h1><ul><li>window 对象给我们提供了一个 history 对象，与浏览器历史记录进行交互</li><li>该对象包含用户（在浏览器窗口中）访问过的 URL。</li></ul><table><thead><tr><th align="center">history对象方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">back()</td><td align="center">可以后退功能</td></tr><tr><td align="center">forward()</td><td align="center">前进功能</td></tr><tr><td align="center">go(参数)</td><td align="center">前进后退功能，参数如果是 1 前进1个页面 如果是 -1 后退1个页面</td></tr></tbody></table><blockquote><p>这个属性是用来让页面前进后退的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;list.html&quot;</span>&gt;</span>点击我去往列表页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// history.forward();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            history.<span class="title function_">go</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事件高级</title>
      <link href="/2022/03/01/js/%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/03/01/js/%E4%BA%8B%E4%BB%B6%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-事件高级"><a href="#JavaScript-事件高级" class="headerlink" title="JavaScript 事件高级"></a>JavaScript 事件高级</h1><h2 id="1-注册事件-绑定事件"><a href="#1-注册事件-绑定事件" class="headerlink" title="1.注册事件(绑定事件)"></a>1.注册事件(绑定事件)</h2><p>给元素添加事件，称为<code>注册事件</code>或者<code>绑定事件</code>。</p><p>注册事件有两种方式：<code>传统方式</code>和<code>方法监听</code>注册方式    </p><table><thead><tr><th align="center">传统注册方式</th><th align="center">方法监听注册方式</th></tr></thead><tbody><tr><td align="center">利用 on 开头的事件 onclick</td><td align="center">w3c 标准推荐方式</td></tr><tr><td align="center">&lt;button onclick = “alert(“hi”)”&gt;</button></td><td align="center">addEventListener() 它是一个方法</td></tr><tr><td align="center">btn.onclick = function() {}</td><td align="center">IE9 之前的 IE 不支持此方法，可使用 attachEvent() 代替</td></tr><tr><td align="center">特点：注册事件的唯一性</td><td align="center">特点：同一个元素同一个事件可以注册多个监听器</td></tr><tr><td align="center">同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</td><td align="center">按注册顺序依次执行</td></tr></tbody></table><h3 id="1-addEventListener"><a href="#1-addEventListener" class="headerlink" title="1.addEventListener"></a>1.addEventListener</h3><ol><li><p>事件监听方式eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上</p></li><li><p>当该对象触发指定的事件时，就会执行事件处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">addEventListener</span>(type,listener[,useCapture])</span><br></pre></td></tr></table></figure><p>该方法接收三个参数：</p></li></ol><ul><li>type:事件类型字符串，比如click,mouseover,注意这里不要带on</li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>传统注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>方法监听注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>ie9 attachEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 传统方式注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&#x27;hao a u&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 事件监听注册事件 addEventListener </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (1) 里面的事件类型是字符串 所以加引号 而且不带on</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. attachEvent ie9以前的版本支持</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-attachEvent事件监听方式-兼容"><a href="#2-attachEvent事件监听方式-兼容" class="headerlink" title="2.attachEvent事件监听方式(兼容)"></a>2.attachEvent事件监听方式(兼容)</h3><ol><li>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上</li><li>当该对象触发指定的事件时，指定的回调函数就会被执行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">attachEvent</span>(eventNameWithOn,callback)</span><br></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h3 id="3-注册事件兼容性解决方案"><a href="#3-注册事件兼容性解决方案" class="headerlink" title="3.注册事件兼容性解决方案"></a>3.注册事件兼容性解决方案</h3><p>兼容性处理的原则：首先照顾大多数浏览器，再处理特殊浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">     <span class="comment">// 判断当前浏览器是否支持 addEventListener 方法</span></span><br><span class="line">     <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">       element.<span class="title function_">addEventListener</span>(eventName, fn);  <span class="comment">// 第三个参数 默认是false</span></span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">       element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 相当于 element.onclick = fn;</span></span><br><span class="line">       element[<span class="string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="2、删除事件-解绑事件"><a href="#2、删除事件-解绑事件" class="headerlink" title="2、删除事件(解绑事件)"></a>2、删除事件(解绑事件)</h2><h3 id="1-removeEventListener删除事件方式"><a href="#1-removeEventListener删除事件方式" class="headerlink" title="1.removeEventListener删除事件方式"></a>1.removeEventListener删除事件方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">removeEventListener</span>(type,listener[,useCapture]);</span><br></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li>type:事件类型字符串，比如click,mouseover,<code>注意这里不要带on</code></li><li>listener：事件处理函数，事件发生时，会调用该监听函数</li><li>useCapture：可选参数，是一个布尔值，默认是 false。学完 DOM 事件流后，我们再进一步学习</li></ul><h3 id="2-detachEvent删除事件方式-兼容"><a href="#2-detachEvent删除事件方式-兼容" class="headerlink" title="2.detachEvent删除事件方式(兼容)"></a>2.detachEvent删除事件方式(兼容)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">detachEvent</span>(eventNameWithOn,callback);</span><br></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li>eventNameWithOn：事件类型字符串，比如 onclick 、onmouseover ，这里要带 on</li><li>callback： 事件处理函数，当目标触发事件时回调函数被调用</li><li>ie9以前的版本支持</li></ul><h3 id="3-传统事件删除方式"><a href="#3-传统事件删除方式" class="headerlink" title="3.传统事件删除方式"></a>3.传统事件删除方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>事件删除示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 传统方式删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            divs[<span class="number">0</span>].<span class="property">onclick</span> = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.removeEventListener 删除事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);   <span class="comment">//里面的fn不需要调用加小括号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">1</span>].<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,fn);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.IE9 中的删除事件方式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    divs[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        divs[<span class="number">2</span>].<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="4-删除事件兼容性解决方案"><a href="#4-删除事件兼容性解决方案" class="headerlink" title="4.删除事件兼容性解决方案"></a>4.删除事件兼容性解决方案</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function removeEventListener(element, eventName, fn) &#123;</span><br><span class="line">     // 判断当前浏览器是否支持 removeEventListener 方法</span><br><span class="line">     if (element<span class="selector-class">.removeEventListener</span>) &#123;</span><br><span class="line">       element<span class="selector-class">.removeEventListener</span>(eventName, fn);  // 第三个参数 默认是false</span><br><span class="line">     &#125; else if (element<span class="selector-class">.detachEvent</span>) &#123;</span><br><span class="line">       element<span class="selector-class">.detachEvent</span>(&#x27;on&#x27; + eventName, fn);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">       element<span class="selector-attr">[<span class="string">&#x27;on&#x27;</span> + eventName]</span> = null;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="3-DOM事件流"><a href="#3-DOM事件流" class="headerlink" title="3.DOM事件流"></a>3.DOM事件流</h2><ul><li><code>事件流</code>描述的是从页面中接收事件的顺序</li><li><code>事件</code>发生时会在元素节点之间按照特定的顺序传播，这个<code>传播过程</code>即<code>DOM事件流</code></li></ul><p><img src="https://img-blog.csdnimg.cn/063297f2336f43dfb246930ae877a9ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><ul><li><code>事件冒泡</code>： IE 最早提出，事件开始时由<code>最具体</code>的元素接收，然后逐级向上传播到到 DOM 最顶层节点的过程。（由具体的一个事件传上去）</li><li><code>事件捕获</code>： 网景最早提出，由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收的过程。（从最上面传下来）</li></ul><h3 id="1-捕获阶段"><a href="#1-捕获阶段" class="headerlink" title="1.捕获阶段"></a>1.捕获阶段</h3><p>document -&gt; html -&gt; body -&gt; father -&gt; son<br>两个盒子嵌套，一个父盒子一个子盒子，我们的需求是当点击父盒子时弹出 father ，当点击子盒子时弹出 son</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;son盒子&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // dom 事件流 三个阶段</span><br><span class="line">        // <span class="number">1</span>. JS 代码中只能执行捕获或者冒泡其中的一个阶段。</span><br><span class="line">        // <span class="number">2</span>. onclick 和 attachEvent（ie） 只能得到冒泡阶段。</span><br><span class="line">        // <span class="number">3</span>. 捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; <span class="selector-tag">html</span> -&gt; <span class="selector-tag">body</span> -&gt; father -&gt; son</span><br><span class="line">        <span class="selector-tag">var</span> son = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.son</span>&#x27;);</span><br><span class="line">        son<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">             alert(&#x27;son&#x27;);</span><br><span class="line">        &#125;, true);</span><br><span class="line">        <span class="selector-tag">var</span> father = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.father</span>&#x27;);</span><br><span class="line">        father<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;father&#x27;);</span><br><span class="line">        &#125;, true);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p>但是因为DOM流的影响，我们点击子盒子，会先弹出 father，之后再弹出 son</p><p><img src="C:\Users\11793\AppData\Roaming\Typora\typora-user-images\image-20211127213951130.png" alt="image-20211127213951130"></p><p>这是因为捕获阶段由 DOM 最顶层节点开始，然后逐级向下传播到到最具体的元素接收</p><ul><li><p>document -&gt; html -&gt; body -&gt; father -&gt; son</p></li><li><p>先看 document 的事件，没有；再看 html 的事件，没有；再看 body 的事件，没有；再看 father 的事件，有就先执行；再看 son 的事件，再执行。</p></li></ul><h3 id="2-冒泡阶段"><a href="#2-冒泡阶段" class="headerlink" title="2.冒泡阶段"></a>2.冒泡阶段</h3><p>son -&gt; father -&gt;body -&gt; html -&gt; document</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;son盒子&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">// <span class="number">4</span>. 冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;<span class="selector-tag">body</span> -&gt; <span class="selector-tag">html</span> -&gt; document</span><br><span class="line">        <span class="selector-tag">var</span> son = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.son</span>&#x27;);</span><br><span class="line">        son<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;son&#x27;);</span><br><span class="line">        &#125;, false);</span><br><span class="line">        <span class="selector-tag">var</span> father = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.father</span>&#x27;);</span><br><span class="line">        father<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;father&#x27;);</span><br><span class="line">        &#125;, false);</span><br><span class="line">        document<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;document&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p>我们点击子盒子，会弹出 son、father、document</p><p>这是因为冒泡阶段开始时由最具体的元素接收，然后逐级向上传播到到 DOM 最顶层节点</p><p>son -&gt; father -&gt;body -&gt; html -&gt; document</p><h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h3><ul><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段</p></li><li><p>onclick 和 attachEvent只能得到冒泡阶段</p></li><li><p>addEventListener(type,listener[,useCapture])第三个参数如果是 true，表示在事件捕获阶段调用事件处理程序；如果是 false (不写默认就是false),表示在事件冒泡阶段调用事件处理程序</p></li><li><p>实际开发中我们很少使用事件捕获，我们更关注事件冒泡。</p></li><li><p>有些事件是没有冒泡的，比如 onblur、onfocus、onmouseenter、onmouseleave</p></li></ul><h2 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.事件对象"></a>4.事件对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt </span></span><br><span class="line">&#125; </span><br><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">   <span class="comment">// 这个 event 就是事件对象，我们还喜欢的写成 e 或者 evt  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>官方解释</code>：event 对象代表事件的状态，比如键盘按键的状态、鼠标的位置、鼠标按钮的状态</p><p>简单理解：</p><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面</p><p>这个对象就是事件对象 event，它有很多属性和方法，比如</p><ul><li>谁绑定了这个事件</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键</li></ul><p>这个 event 是个形参，系统帮我们设定为事件对象，不需要传递实参过去</p><p>当我们注册事件时， event 对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</p><p>这个event 就是一个大的东西，我们从中拿到自己想要的东西。</p><h3 id="1-事件对象的常见属性和方法"><a href="#1-事件对象的常见属性和方法" class="headerlink" title="1.事件对象的常见属性和方法"></a>1.事件对象的常见属性和方法</h3><table><thead><tr><th align="center">事件对象属性方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">e.target</td><td align="center">返回触发事件的对象 标准</td></tr><tr><td align="center">e.type</td><td align="center">返回事件的类型 比如click mouseover 不带on</td></tr><tr><td align="center">e.preventDefault()</td><td align="center">该方法阻止默认行为 标准 比如不让链接跳转</td></tr><tr><td align="center">e.stopPropagation()</td><td align="center">阻止冒泡 标准</td></tr></tbody></table><table><thead><tr><th align="center">e.srcElement</th><th align="center">返回触发事件的对象 非标准 ie6-8使用</th></tr></thead><tbody><tr><td align="center">e.cancelBubble</td><td align="center">该属性阻止冒泡，非标准，ie6-8使用</td></tr><tr><td align="center">e.returnValue</td><td align="center">该属性阻止默认行为 非标准，ie6-8使用</td></tr></tbody></table><p><code>e.target</code> 和 <code>this</code> 的区别：</p><ul><li>this 是事件绑定的元素， 这个函数的调用者（绑定这个事件的元素）</li><li>e.target 是事件触发的元素。</li></ul><h3 id="2-事件对象阻止默认行为"><a href="#2-事件对象阻止默认行为" class="headerlink" title="2.事件对象阻止默认行为"></a>2.事件对象阻止默认行为</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;<span class="number">123</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">a</span> href=&quot;http://www.baidu.com<span class="string">&quot;&gt;百度&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;</span>http://www.baidu.com<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;input type=&quot;</span>submit<span class="string">&quot; value=&quot;</span>提交<span class="string">&quot; name=&quot;</span>sub<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        // 常见事件对象的属性和方法</span></span><br><span class="line"><span class="string">        // 1. 返回事件类型</span></span><br><span class="line"><span class="string">        var div = document.querySelector(&#x27;div&#x27;);</span></span><br><span class="line"><span class="string">        div.addEventListener(&#x27;click&#x27;, fn);</span></span><br><span class="line"><span class="string">        div.addEventListener(&#x27;mouseover&#x27;, fn);</span></span><br><span class="line"><span class="string">        div.addEventListener(&#x27;mouseout&#x27;, fn);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        function fn(e) &#123;</span></span><br><span class="line"><span class="string">            console.log(e.type);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        // 2. 阻止默认行为（事件） 让链接不跳转 或者让提交按钮不提交</span></span><br><span class="line"><span class="string">        var a = document.querySelector(&#x27;a&#x27;);</span></span><br><span class="line"><span class="string">        a.addEventListener(&#x27;click&#x27;, function(e) &#123;</span></span><br><span class="line"><span class="string">                e.preventDefault(); //  dom 标准写法</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">            // 3. 传统的注册方式</span></span><br><span class="line"><span class="string">        a.onclick = function(e) &#123;</span></span><br><span class="line"><span class="string">            // 普通浏览器 e.preventDefault();  方法</span></span><br><span class="line"><span class="string">            // e.preventDefault();</span></span><br><span class="line"><span class="string">            // 低版本浏览器 ie678  returnValue  属性</span></span><br><span class="line"><span class="string">            // e.returnValue;</span></span><br><span class="line"><span class="string">            // 我们可以利用return false 也能阻止默认行为 没有兼容性问题 特点： return 后面的代码不执行了， 而且只限于传统的注册方式</span></span><br><span class="line"><span class="string">            return false;</span></span><br><span class="line"><span class="string">            alert(11);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-阻止事件冒泡"><a href="#3-阻止事件冒泡" class="headerlink" title="3.阻止事件冒泡"></a>3.阻止事件冒泡</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;father&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;son&quot;&gt;son儿子&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 常见事件对象的属性和方法</span><br><span class="line">        // 阻止冒泡  dom 推荐的标准 stopPropagation() </span><br><span class="line">        <span class="selector-tag">var</span> son = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.son</span>&#x27;);</span><br><span class="line">        son<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">            alert(&#x27;son&#x27;);</span><br><span class="line">            e<span class="selector-class">.stopPropagation</span>(); // stop 停止  Propagation 传播</span><br><span class="line">            e<span class="selector-class">.cancelBubble</span> = true; // 非标准 cancel 取消 bubble 泡泡</span><br><span class="line">        &#125;, false);</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">var</span> father = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.father</span>&#x27;);</span><br><span class="line">        father<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;father&#x27;);</span><br><span class="line">        &#125;, false);</span><br><span class="line">        document<span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function() &#123;</span><br><span class="line">            alert(&#x27;document&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>阻止事件冒泡的兼容性解决方案</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">      e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-e-target-与-this"><a href="#4-e-target-与-this" class="headerlink" title="4.e.target 与 this"></a>4.e.target 与 this</h3><blockquote><p>e.target 与 this 的区别</p></blockquote><ul><li><code>this</code>是事件绑定的元素，这个函数的调用者(绑定这个事件的元素)</li><li><code>e.target</code>是事件触发的元素</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;<span class="number">123</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;abc&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;abc&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;abc&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 常见事件对象的属性和方法</span><br><span class="line">        // <span class="number">1</span>. e<span class="selector-class">.target</span> 返回的是触发事件的对象（元素）  this 返回的是绑定事件的对象（元素）</span><br><span class="line">        // 区别 ： e<span class="selector-class">.target</span> 点击了那个元素，就返回那个元素 this 那个元素绑定了这个点击事件，那么就返回谁</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">div</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">div</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(e<span class="selector-class">.target</span>);</span><br><span class="line">            console<span class="selector-class">.log</span>(this);</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">ul</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">ul</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">                // 我们给<span class="selector-tag">ul</span> 绑定了事件  那么this 就指向<span class="selector-tag">ul</span>  </span><br><span class="line">                console<span class="selector-class">.log</span>(this);</span><br><span class="line">                console<span class="selector-class">.log</span>(e<span class="selector-class">.currentTarget</span>);</span><br><span class="line">                // e<span class="selector-class">.target</span> 指向我们点击的那个对象 谁触发了这个事件 我们点击的是<span class="selector-tag">li</span> e<span class="selector-class">.target</span> 指向的就是<span class="selector-tag">li</span></span><br><span class="line">            //这里使用了事件委托，下面会说</span><br><span class="line">                console<span class="selector-class">.log</span>(e<span class="selector-class">.target</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            // 了解兼容性</span><br><span class="line">            // <span class="selector-tag">div</span><span class="selector-class">.onclick</span> = function(e) &#123;</span><br><span class="line">            //     e = e || window<span class="selector-class">.event</span>;</span><br><span class="line">            //     <span class="selector-tag">var</span> target = e<span class="selector-class">.target</span> || e<span class="selector-class">.srcElement</span>;</span><br><span class="line">            //     console<span class="selector-class">.log</span>(target);</span><br><span class="line"></span><br><span class="line">        // &#125;</span><br><span class="line">        // <span class="number">2</span>. 了解 跟 this 有个非常相似的属性 currentTarget  ie678不认识</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="5-事件委托"><a href="#5-事件委托" class="headerlink" title="5.事件委托"></a>5.事件委托</h2><ul><li>事件委托也称为事件代理，在 jQuery 里面称为事件委派</li><li>事件委托的原理</li><li><strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;知否知否，点我应有弹框在手！&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;知否知否，点我应有弹框在手！&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;知否知否，点我应有弹框在手！&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;知否知否，点我应有弹框在手！&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;知否知否，点我应有弹框在手！&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">ul</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">ul</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.addEventListener</span>(&#x27;click&#x27;, function(e) &#123;</span><br><span class="line">            // alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span><br><span class="line">            // e<span class="selector-class">.target</span> 这个可以得到我们点击的对象</span><br><span class="line">            e<span class="selector-class">.target</span><span class="selector-class">.style</span><span class="selector-class">.backgroundColor</span> = &#x27;pink&#x27;;</span><br><span class="line">            // 点了谁，就让谁的style里面的backgroundColor颜色变为pink</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>我们给ul注册了事件，当我们点击li时，会冒泡，li-&gt;ul,就会触发监听</p></blockquote><h2 id="6-鼠标事件"><a href="#6-鼠标事件" class="headerlink" title="6.鼠标事件"></a>6.鼠标事件</h2><table><thead><tr><th align="center">鼠标事件</th><th align="center">触发条件</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">鼠标点击左键触发</td></tr><tr><td align="center">onmouseover</td><td align="center">鼠标经过触发</td></tr><tr><td align="center">onmouseout</td><td align="center">鼠标离开触发</td></tr><tr><td align="center">onfocus</td><td align="center">获得鼠标焦点触发</td></tr><tr><td align="center">onblur</td><td align="center">失去鼠标焦点触发</td></tr><tr><td align="center">onmousemove</td><td align="center">鼠标移动触发</td></tr><tr><td align="center">onmouseup</td><td align="center">鼠标弹起触发</td></tr><tr><td align="center">onmousedown</td><td align="center">鼠标按下触发</td></tr></tbody></table><h3 id="1-禁止鼠标右键与鼠标选中"><a href="#1-禁止鼠标右键与鼠标选中" class="headerlink" title="1.禁止鼠标右键与鼠标选中"></a>1.禁止鼠标右键与鼠标选中</h3><ul><li>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</li><li>selectstart 禁止鼠标选中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h1</span>&gt;我是一段不愿意分享的文字&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // <span class="number">1</span>. contextmenu 我们可以禁用右键菜单</span><br><span class="line">        document<span class="selector-class">.addEventListener</span>(&#x27;contextmenu&#x27;, function(e) &#123;</span><br><span class="line">                e<span class="selector-class">.preventDefault</span>(); // 阻止默认行为</span><br><span class="line">            &#125;)</span><br><span class="line">            // <span class="number">2</span>. 禁止选中文字 selectstart</span><br><span class="line">        document<span class="selector-class">.addEventListener</span>(&#x27;selectstart&#x27;, function(e) &#123;</span><br><span class="line">            e<span class="selector-class">.preventDefault</span>();</span><br><span class="line">   &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2、鼠标事件对象"><a href="#2、鼠标事件对象" class="headerlink" title="2、鼠标事件对象"></a>2、鼠标事件对象</h3><p><strong>event</strong>对象代表事件的状态，跟事件相关的一系列信息的集合</p><p>现阶段我们主要是用鼠标事件对象 <strong>MouseEvent</strong> 和键盘事件对象 <strong>KeyboardEvent。</strong></p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX（重点）</td><td>返回鼠标相对于文档页面的X坐标 IE9+ 支持</td></tr><tr><td>e.pageY（重点）</td><td>返回鼠标相对于文档页面的Y坐标 IE9+ 支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><h3 id="2、常用的键盘事件"><a href="#2、常用的键盘事件" class="headerlink" title="2、常用的键盘事件"></a>2、常用的键盘事件</h3><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发，但是它不识别功能键，比如 ctrl shift 箭头等</td></tr></tbody></table><ul><li>如果使用addEventListener 不需要加 on</li><li>onkeypress 和前面2个的区别是，它不识别功能键，比如左右箭头，shift 等</li><li>三个事件的执行顺序是： keydown – keypress — keyup</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    &lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 常用的键盘事件</span><br><span class="line">        //<span class="number">1</span>. keyup 按键弹起的时候触发 </span><br><span class="line">        // document<span class="selector-class">.onkeyup</span> = function() &#123;</span><br><span class="line">        //         console<span class="selector-class">.log</span>(&#x27;我弹起了&#x27;);</span><br><span class="line">    //     &#125;</span><br><span class="line">    document<span class="selector-class">.addEventListener</span>(&#x27;keyup&#x27;, function() &#123;</span><br><span class="line">        console<span class="selector-class">.log</span>(&#x27;我弹起了&#x27;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    //<span class="number">3</span>. keypress 按键按下的时候触发  不能识别功能键 比如 ctrl shift 左右箭头啊</span><br><span class="line">    document<span class="selector-class">.addEventListener</span>(&#x27;keypress&#x27;, function() &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(&#x27;我按下了press&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        //<span class="number">2</span>. keydown 按键按下的时候触发  能识别功能键 比如 ctrl shift 左右箭头啊</span><br><span class="line">    document<span class="selector-class">.addEventListener</span>(&#x27;keydown&#x27;, function() &#123;</span><br><span class="line">            console<span class="selector-class">.log</span>(&#x27;我按下了down&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        // <span class="number">4</span>. 三个事件的执行顺序  keydown -- keypress -- keyup</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dom树</title>
      <link href="/2022/03/01/js/Dom%E6%A0%91/"/>
      <url>/2022/03/01/js/Dom%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-Dom树"><a href="#JavaScript-Dom树" class="headerlink" title="JavaScript Dom树"></a>JavaScript Dom树</h1><h1 id="DOM简介"><a href="#DOM简介" class="headerlink" title="DOM简介"></a>DOM简介</h1><h3 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h3><p>文档对象模型（Document Object Model，简称 DOM），是 W3C 组织推荐的处理可扩展标记语言（HTML或者XML）的标准编程接口</p><p>W3C 已经定义了一系列的 DOM 接口，通过这些 DOM 接口可以改变网页的内容、结构和样式。</p><p><img src="https://www.runoob.com/images/htmltree.gif" alt="img"></p><ul><li>文档：一个页面就是一个文档，DOM中使用doucument来表示</li><li>元素：页面中的所有标签都是元素，DOM中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示</li></ul><p>DOM 把以上内容都看做是对象</p><h2 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h2><p>JavaScript使我们有能力创建动态页面，而事件是可以被 JavaScript 侦测到的行为。</p><p>简单理解： 触发— 响应机制。</p><p>网页中的每个元素都可以产生某些可以触发 JavaScript 的事件，例如，我们可以在用户点击某按钮时产生一个事件，然后去执行某些操作。</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ol><li>事件源(谁)</li><li>事件类型(什么事件)</li><li>事件处理程序(做啥)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击一个按钮，弹出对话框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 事件是有三部分组成  事件源  事件类型  事件处理程序   我们也称为事件三要素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//(1) 事件源 事件被触发的对象   谁  按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//(3) 事件处理程序  通过一个函数赋值的方式 完成</span></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行事件的步骤"><a href="#执行事件的步骤" class="headerlink" title="执行事件的步骤"></a>执行事件的步骤</h3><ol><li>获取事件源</li><li>注册事件(绑定事件)</li><li>添加事件处理程序(采取函数赋值形式)</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 执行事件步骤</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 获取事件源</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.绑定事件 注册事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// div.onclick </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.添加事件处理程序 </span></span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><table><thead><tr><th align="center">元素值</th><th align="center">获取方式</th></tr></thead><tbody><tr><td align="center">ID</td><td align="center">doucument.getElementByld(‘id名’)</td></tr><tr><td align="center">标签名</td><td align="center">doucument.getElementsByTagName(‘标签名’)</td></tr><tr><td align="center">类名</td><td align="center">document.getElementsByClassName(‘类名’);</td></tr><tr><td align="center">body</td><td align="center">document.body</td></tr><tr><td align="center">html</td><td align="center">document.documentElement</td></tr></tbody></table><p>下面是例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(lis);</span><br></pre></td></tr></table></figure><blockquote><p>还可以通过通过H5新增方法获取</p></blockquote><h3 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector"></a>document.querySelector</h3><ul><li><p>根据指定选择器返回第一个元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;选择器&#x27;</span>);</span><br><span class="line"><span class="comment">// 切记里面的选择器需要加符号 </span></span><br><span class="line"><span class="comment">// 类选择器.box </span></span><br><span class="line"><span class="comment">// id选择器 #nav</span></span><br><span class="line"><span class="keyword">var</span> firstBox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="document-querySelectorAll"><a href="#document-querySelectorAll" class="headerlink" title="document.querySelectorAll"></a>document.querySelectorAll</h3><p>根据指定选择器返回所有元素对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><table><thead><tr><th align="center">鼠标事件</th><th align="center">触发条件</th></tr></thead><tbody><tr><td align="center">onclick</td><td align="center">鼠标点击左键触发</td></tr><tr><td align="center">onmouseover</td><td align="center">鼠标经过触发</td></tr><tr><td align="center">onmouseout</td><td align="center">鼠标离开触发</td></tr><tr><td align="center">onfocus</td><td align="center">获得鼠标焦点触发</td></tr><tr><td align="center">onblur</td><td align="center">失去鼠标焦点触发</td></tr><tr><td align="center">onmousemove</td><td align="center">鼠标移动触发</td></tr><tr><td align="center">onmouseup</td><td align="center">鼠标弹起触发</td></tr><tr><td align="center">onmousedown</td><td align="center">鼠标按下触发</td></tr></tbody></table><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><h3 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h3><p>element.innerText</p><p>去除html标签，同时空格和换行也会去掉。</p><p>element.innerHTML</p><p>包括HTML标签，同时保留空格和换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. innerText 不识别html标签,去除空格和换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerText</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 识别html标签 保留空格和换行的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="改变元素样式"><a href="#改变元素样式" class="headerlink" title="改变元素样式"></a>改变元素样式</h3><p><strong>语法:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property">style</span>.<span class="property">property</span>=<span class="keyword">new</span> style;</span><br><span class="line"><span class="comment">// element.style</span></span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;250px&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>JS里面的样式采取驼峰命名法，比如 fontSize ，backgroundColor</li><li>JS 修改 style 样式操作 ，产生的是行内样式，CSS权重比较高</li><li><code>如果样式修改较多，可以采取操作类名方式更改元素样式</code></li><li>class 因为是个保留字，因此使用className来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ol><h3 id="改变元素属性"><a href="#改变元素属性" class="headerlink" title="改变元素属性"></a>改变元素属性</h3><p>可以改变一些元素的属性</p><p>常用的有：</p><ul><li>input</li><li>display</li><li>img</li><li>className</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&quot;one&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img-blog.csdnimg.cn/f6835ead437948e3804c4432ceb812ad.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>自定义属性目的：</p><p>保存并保存数据，有些数据可以保存到页面中而不用保存到数据库中</p><p>有些自定义属性很容易引起歧义，不容易判断到底是内置属性还是自定义的，所以H5有了规定</p><h3 id="设置H5自定义属性"><a href="#设置H5自定义属性" class="headerlink" title="设置H5自定义属性"></a>设置H5自定义属性</h3><p>H5规定自定义属性 <code>data-</code>开头作为属性名并赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-index = <span class="string">&quot;1&quot;</span>&gt;&lt;/&gt;</span><br><span class="line"><span class="comment">// 或者使用JavaScript设置</span></span><br><span class="line">div.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="获取H5自定义属性"><a href="#获取H5自定义属性" class="headerlink" title="获取H5自定义属性"></a>获取H5自定义属性</h3><p>兼容性获取 element.getAttribute(‘data-index’)<br>H5新增的：element.dataset.index 或element.dataset[‘index’] IE11才开始支持</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> getTime=&quot;<span class="number">20</span>&quot; data-index=&quot;<span class="number">2</span>&quot; data-list-name=&quot;andy&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">div</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">div</span>&#x27;);</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.getAttribute</span>(&#x27;getTime&#x27;));</span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-class">.setAttribute</span>(&#x27;data-<span class="selector-tag">time</span>&#x27;, <span class="number">20</span>);</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.getAttribute</span>(&#x27;data-index&#x27;));</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.getAttribute</span>(&#x27;data-list-name&#x27;));</span><br><span class="line">        // <span class="selector-tag">h5</span>新增的获取自定义属性的方法 它只能获取data-开头的</span><br><span class="line">        // dataset 是一个集合里面存放了所有以data开头的自定义属性</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.dataset</span>);</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.dataset</span><span class="selector-class">.index</span>);</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.dataset</span><span class="selector-attr">[<span class="string">&#x27;index&#x27;</span>]</span>);</span><br><span class="line">        // 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.dataset</span><span class="selector-class">.listName</span>);</span><br><span class="line">        console<span class="selector-class">.log</span>(<span class="selector-tag">div</span><span class="selector-class">.dataset</span><span class="selector-attr">[<span class="string">&#x27;listName&#x27;</span>]</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="移除属性"><a href="#移除属性" class="headerlink" title="移除属性"></a>移除属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;属性&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>获取元素通常使用两种方式：</p><table><thead><tr><th>1.利用DOM提供的方法获取元素</th><th>2.利用节点层级关系获取元素</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>利用父子兄节点关系获取元素</td></tr><tr><td>document.getElementsByTagName()</td><td>逻辑性强，但是兼容性较差</td></tr><tr><td>document.querySelector 等</td><td></td></tr><tr><td>逻辑性不强，繁琐</td><td></td></tr></tbody></table><p>这两种方式都可以获取元素节点，我们后面都会使用，但是节点操作更简单</p><p>一般的，节点至少拥有三个基本属性</p><h3 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h3><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/htmltree.gif" alt="img"></p><p><strong>HTML文档可以说由节点构成的集合，三种常见的DOM节点:</strong></p><p><strong>1. 元素节点：</strong>上图中<html>、<body>、<p>等都是元素节点，即标签。</p><p>**2. 文本节点:**向用户展示的内容，如<li>…</li>中的JavaScript、DOM、CSS等文本。</p><p>**3. 属性节点:**元素属性，如<a>标签的链接属性href。</p><blockquote><p>一般的，节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p></blockquote><ul><li><p>元素节点：nodeType 为1</p></li><li><p>属性节点：nodeType 为2</p></li><li><p>文本节点：nodeType 为3(文本节点包括文字、空格、换行等)</p></li></ul><p>我们在实际开发中，节点操作主要操作的是元素节点</p><p>利用 DOM 树可以把节点划分为不同的层级关系，常见的是父子兄层级关系。</p><h3 id="父级节点"><a href="#父级节点" class="headerlink" title="父级节点"></a>父级节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure><ul><li><p><code>parentNode</code>属性可以返回某节点的父结点，注意是最近的一个父结点</p></li><li><p>如果指定的节点没有父结点则返回null</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;!-- 节点的优点 --&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;我是<span class="selector-tag">div</span>&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;我是<span class="selector-tag">span</span>&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;我是<span class="selector-tag">li</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;我是<span class="selector-tag">li</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;我是<span class="selector-tag">li</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;我是<span class="selector-tag">li</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;box&quot;&gt;</span><br><span class="line">            &lt;<span class="selector-tag">span</span> class=&quot;erweima&quot;&gt;×&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // <span class="number">1</span>. 父节点 parentNode</span><br><span class="line">    <span class="selector-tag">var</span> erweima = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.erweima</span>&#x27;);</span><br><span class="line">    // <span class="selector-tag">var</span> box = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.box</span>&#x27;);</span><br><span class="line">    // 得到的是离元素最近的父级节点(亲爸爸) 如果找不到父节点就返回为 null</span><br><span class="line">    console<span class="selector-class">.log</span>(erweima<span class="selector-class">.parentNode</span>);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="子结点"><a href="#子结点" class="headerlink" title="子结点"></a>子结点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">childNodes</span>(标准)</span><br></pre></td></tr></table></figure><ul><li>返回所有的子元素节点，包括元素节点，文本节点等</li><li>如果只想要获得里面的元素节点，则需要专门处理。所以我们一般不提倡使用<code>childNodes</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">children</span>(非标准)</span><br></pre></td></tr></table></figure><p>只返回子元素节点，其余节点不返回 （<strong>这个是我们重点掌握的</strong>）</p><p>虽然 children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</p><h4 id="第一个子结点"><a href="#第一个子结点" class="headerlink" title="第一个子结点"></a>第一个子结点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">firstChild</span></span><br></pre></td></tr></table></figure><ul><li><code>firstChild</code> 返回第一个子节点，找不到则返回null</li><li>同样，也是包含所有的节点</li></ul><h4 id="最后一个子结点"><a href="#最后一个子结点" class="headerlink" title="最后一个子结点"></a>最后一个子结点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">lastChild</span></span><br></pre></td></tr></table></figure><p><code>lastChild</code> 返回最后一个子节点，找不到则返回null</p><p>同样，也是包含所有的节点</p><h4 id="子节点常用"><a href="#子节点常用" class="headerlink" title="子节点常用"></a>子节点常用</h4><p>上面的两个，firstChild lastChild 第一个子节点 不管是文本节点还是元素节点</p><p>而我们一般只是想要元素节点。</p><blockquote><p>当然，我们也可以用ol.children[0]，ol.children[ol.children.length - 1]来表示第一个和最后一个节点</p><p>这个也是解决兼容性的方案，也是直接拿到元素节点</p></blockquote><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><code>document.createElement()</code> 方法创建由 tagName 指定的HTML 元素</li><li>因为这些元素原先不存在，是根据我们的需求动态生成的，所以我们也称为<strong>动态创建元素节点</strong></li></ul><h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><blockquote><p>node为js注册的新的元素节点</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">appendChild</span>(child)</span><br></pre></td></tr></table></figure><p><code>node.appendChild()</code> 方法将一个节点添加到指定父节点的子节点列表<strong>末尾</strong>。类似于 CSS 里面的 after 伪元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">insertBefore</span>(child,指定元素)</span><br></pre></td></tr></table></figure><p><code>node.insertBefore()</code> 方法将一个节点添加到父节点的指定子节点<strong>前面</strong>。类似于 CSS 里面的 before 伪元素。</p><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;<span class="number">123</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // <span class="number">1</span>. 创建节点元素节点</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">li</span> = document<span class="selector-class">.createElement</span>(&#x27;<span class="selector-tag">li</span>&#x27;);</span><br><span class="line">        // <span class="number">2</span>. 添加节点 node<span class="selector-class">.appendChild</span>(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span><br><span class="line">        // 先获取父亲<span class="selector-tag">ul</span></span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">ul</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">ul</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.appendChild</span>(<span class="selector-tag">li</span>);</span><br><span class="line">        // <span class="number">3</span>. 添加节点 node<span class="selector-class">.insertBefore</span>(child, 指定元素);</span><br><span class="line">        <span class="selector-tag">var</span> lili = document<span class="selector-class">.createElement</span>(&#x27;<span class="selector-tag">li</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">ul</span><span class="selector-class">.insertBefore</span>(lili, <span class="selector-tag">ul</span><span class="selector-class">.children</span><span class="selector-attr">[0]</span>);</span><br><span class="line">        // <span class="number">4</span>. 我们想要页面添加一个新的元素分两步: <span class="number">1</span>. 创建元素 <span class="number">2</span>. 添加元素</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">removeChild</span>(child)</span><br></pre></td></tr></table></figure><ul><li><code>node.removeChild()</code>方法从 DOM 中删除一个子节点，返回删除的节点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">childern</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="复制节点-克隆节点"><a href="#复制节点-克隆节点" class="headerlink" title="复制节点(克隆节点)"></a>复制节点(克隆节点)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">cloneNode</span>()</span><br></pre></td></tr></table></figure><p>node.cloneNode()方法返回调用该方法的节点的一个副本。 也称为克隆节点/拷贝节点</p><p>如果括号参数为空或者为 false ，则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</p><p>如果括号参数为 true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</p><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;<span class="number">1111</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;<span class="number">2</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">li</span>&gt;<span class="number">3</span>&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="selector-tag">var</span> <span class="selector-tag">ul</span> = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-tag">ul</span>&#x27;);</span><br><span class="line">    // <span class="number">1</span>. node<span class="selector-class">.cloneNode</span>(); 括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span><br><span class="line">    // <span class="number">2</span>. node<span class="selector-class">.cloneNode</span>(true); 括号为true 深拷贝 复制标签复制里面的内容</span><br><span class="line">    <span class="selector-tag">var</span> lili = <span class="selector-tag">ul</span><span class="selector-class">.children</span><span class="selector-attr">[0]</span><span class="selector-class">.cloneNode</span>(true);</span><br><span class="line">    <span class="selector-tag">ul</span><span class="selector-class">.appendChild</span>(lili);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>三种动态创建元素的区别</p><ul><li><p>doucument.write()</p></li><li><p>element.innerHTML</p></li><li><p>document.createElement()</p></li></ul><p>区别：</p><ul><li><code>document.write()</code> 是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘(这个一般不用)</li><li><code>innerHTML</code> 是将内容写入某个 DOM 节点，不会导致页面全部重绘</li><li><code>innerHTML</code> 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li><li><code>createElement()</code>创建多个元素效率稍低一点点，但是结构更清晰</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;innner&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;create&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // <span class="number">2</span>. innerHTML 创建元素</span><br><span class="line">        <span class="selector-tag">var</span> inner = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.inner</span>&#x27;);</span><br><span class="line">        // <span class="number">2.1</span> innerHTML 用拼接字符串方法</span><br><span class="line">        for (<span class="selector-tag">var</span> <span class="selector-tag">i</span> = <span class="number">0</span>; <span class="selector-tag">i</span> &lt;= <span class="number">100</span>; <span class="selector-tag">i</span>++) &#123;</span><br><span class="line">            inner<span class="selector-class">.innerHTML</span> += &#x27;&lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;百度&lt;/<span class="selector-tag">a</span>&gt;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        // <span class="number">2.2</span> innerHTML 用数组形式拼接</span><br><span class="line">        <span class="selector-tag">var</span> arr = <span class="selector-attr">[]</span>;</span><br><span class="line">        for (<span class="selector-tag">var</span> <span class="selector-tag">i</span> = <span class="number">0</span>; <span class="selector-tag">i</span> &lt;= <span class="number">100</span>; <span class="selector-tag">i</span>++) &#123;</span><br><span class="line">            arr<span class="selector-class">.push</span>(&#x27;&lt;<span class="selector-tag">a</span> href=&quot;#&quot;&gt;百度&lt;/<span class="selector-tag">a</span>&gt;&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">        inner<span class="selector-class">.innerHTML</span> = arr<span class="selector-class">.join</span>(&#x27;&#x27;);</span><br><span class="line"></span><br><span class="line">        // <span class="number">3</span><span class="selector-class">.document</span><span class="selector-class">.createElement</span>() 创建元素</span><br><span class="line">        <span class="selector-tag">var</span> create = document<span class="selector-class">.querySelector</span>(&#x27;<span class="selector-class">.create</span>&#x27;);</span><br><span class="line">        <span class="selector-tag">var</span> <span class="selector-tag">a</span> = document<span class="selector-class">.createElement</span>(&#x27;<span class="selector-tag">a</span>&#x27;);</span><br><span class="line">        create<span class="selector-class">.appendChild</span>(<span class="selector-tag">a</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：不同浏览器下， innerHTML 效率要比 createElement 高</p></blockquote><h2 id="DOM核心"><a href="#DOM核心" class="headerlink" title="DOM核心"></a>DOM核心</h2><p>对于DOM操作，我们主要针对子元素的操作，主要有</p><ul><li>创建</li><li>增</li><li>删</li><li>改</li><li>查</li><li>属性操作</li><li>时间操作</li></ul><p>1、创建<br>document.write</p><p>innerHTML</p><p>createElement<br>2、增<br>appendChild</p><p>insertBefore<br>3、删<br>removeChild<br>4、改<br>主要修改dom的元素属性，dom元素的内容、属性、表单的值等</p><p>修改元素属性：src、href、title 等</p><p>修改普通元素内容：innerHTML、innerText</p><p>修改表单元素：value、type、disabled</p><p>修改元素样式：style、className<br>5、查<br>主要获取查询dom的元素</p><p>DOM提供的API方法：getElementById、getElementsByTagName (古老用法，不推荐)</p><p>H5提供的新方法：querySelector、querySelectorAll (提倡)</p><p>利用节点操作获取元素：父(parentNode)、子(children)、兄(previousElementSibling、nextElementSibling) 提倡<br>6、属性操作<br>主要针对于自定义属性</p><p>setAttribute：设置dom的属性值</p><p>getAttribute：得到dom的属性值</p><p>removeAttribute：移除属性</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html5</title>
      <link href="/2022/03/01/html/html5/"/>
      <url>/2022/03/01/html/html5/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h1><h2 id="1-画布"><a href="#1-画布" class="headerlink" title="1.画布"></a>1.画布</h2><p>HTML5 <canvas>元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.</p><p><canvas> 标签只是图形容器，您必须使用脚本来绘制图形。</p><p>你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。</p><h3 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h3><blockquote><p>一个画布在网页中是一个矩形框，通过 <canvas> 元素来绘制.</p><p><strong>注意:</strong> 默认情况下 <canvas> 元素没有边框和内容。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-绘制"><a href="#2-绘制" class="headerlink" title="2.绘制"></a>2.绘制</h3><p>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>); </span><br><span class="line">创建context对象</span><br><span class="line"><span class="keyword">var</span> ctx=c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>); </span><br><span class="line">下面的两行代码绘制一个红色的矩形：</span><br><span class="line">ctx.<span class="property">fillStyle</span>=<span class="string">&quot;#FF0000&quot;</span>; </span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><h3 id="3-Canvas-坐标"><a href="#3-Canvas-坐标" class="headerlink" title="3.Canvas 坐标"></a>3.Canvas 坐标</h3><ul><li><p>canvas 是一个二维网格。</p></li><li><p>canvas 的左上角坐标为 (0,0)</p></li><li><p>上面的 fillRect 方法拥有参数 (0,0,150,75)。</p></li><li><p>意思是：在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。</p><p>如下图所示，画布的 X 和 Y 坐标用于在画布上对绘画进行定位。鼠标移动的矩形框上，显示定位坐标。</p><iframe src="https://www.runoob.com/try/demo_source/tryhtml5_canvas_coordinates.htm" frameborder="0" style="border: 0px; margin: 0px; padding: 0px; overflow: hidden; width: 400px; height: 120px;"></iframe></li></ul><h3 id="4-Canvas-路径"><a href="#4-Canvas-路径" class="headerlink" title="4.Canvas - 路径"></a>4.Canvas - 路径</h3><p>在Canvas上画线，我们将使用以下两种方法：</p><ul><li>moveTo(<em>x,y</em>) 定义线条开始坐标</li><li>lineTo(<em>x,y</em>) 定义线条结束坐标</li></ul><p>绘制线条我们必须使用到 “ink” 的方法，就像stroke().</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myCanvas&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> ctx=c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>,<span class="number">0</span>); </span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>,<span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="2-内联svg"><a href="#2-内联svg" class="headerlink" title="2.内联svg"></a>2.内联svg</h2><p><strong>什么是SVG？</strong></p><ul><li><p>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)</p></li><li><p>SVG 用于定义用于网络的基于矢量的图形</p></li><li><p>SVG 使用 XML 格式定义图形</p></li><li><p>SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失</p></li><li><p>SVG 是万维网联盟的标准</p><p><strong>SVG优势</strong></p><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><ul><li>SVG 图像可通过文本编辑器来创建和修改</li><li>SVG 图像可被搜索、索引、脚本化或压缩</li><li>SVG 是可伸缩的</li><li>SVG 图像可在任何的分辨率下被高质量地打印</li><li>SVG 可在图像质量不下降的情况下被放大</li></ul></li></ul><h2 id="3-新增语义化标签"><a href="#3-新增语义化标签" class="headerlink" title="3.新增语义化标签"></a>3.新增语义化标签</h2><ul><li><p>&lt; header &gt; :头部标签</p></li><li><p>&lt; nav &gt;: 导航标签</p></li><li><p>&lt; article &gt;： 内容标签</p></li><li><p>&lt; section &gt;:定义文档某个区域</p></li><li><p>&lt; aside &gt;:侧边栏标签</p></li><li><p>&lt; footer &gt;: 尾部标签</p><p><img src="https://img-blog.csdnimg.cn/07df0702684841339d1b4884b4bdc677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0F1Z2Vuc3Rlcm5fUVhM,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p><strong>注意：</strong></p></li><li><p>这种语义化标准主要是针对<strong>搜索引擎</strong>的</p></li><li><p>这些新标签页面中可以使用<strong>多次</strong></p></li><li><p>在IE9中，需要把这些元素转换为<strong>块级元素</strong></p></li><li><p>其实，移动端更喜欢使用这些标签</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">header</span>, <span class="selector-tag">nav</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">120px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">15px</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">section</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">header</span>&gt;头部标签&lt;/<span class="selector-tag">header</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">nav</span>&gt;导航栏标签&lt;/<span class="selector-tag">nav</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">section</span>&gt;某个区域&lt;/<span class="selector-tag">section</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-Audio-标签"><a href="#4-Audio-标签" class="headerlink" title="4.Audio 标签"></a>4.Audio 标签</h2><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">autoplay</td><td align="left">autoplay</td><td align="left">如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td align="left">controls</td><td align="left">controls</td><td align="left">如果出现该属性，则向用户显示音频控件（比如播放/暂停按钮）。</td></tr><tr><td align="left">loop</td><td align="left">loop</td><td align="left">如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td align="left">muted</td><td align="left">muted</td><td align="left">如果出现该属性，则音频输出为静音。</td></tr><tr><td align="left">preload</td><td align="left">auto metadata none</td><td align="left">规定当网页加载时，音频是否默认被加载以及如何被加载。</td></tr><tr><td align="left">src</td><td align="left"><em>URL</em></td><td align="left">规定音频文件的 URL。</td></tr></tbody></table><p>##5.video视频</p><table><thead><tr><th align="center">属性</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">视频就绪自动播放(谷歌浏览器需要添加muted来解决自动播放问题)</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">向用户显示播放控件</td></tr><tr><td align="center">width</td><td align="center">pixels(像素)</td><td align="center">设置播放器宽度</td></tr><tr><td align="center">height</td><td align="center">pixels(像素)</td><td align="center">设置播放器高度</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">播放完是否继续播放该视频,循环播放</td></tr><tr><td align="center">preload</td><td align="center">auto(预先加载视频)none(不应加载视频)</td><td align="center">规定是否预加载视频(如果有了autoplay 就忽略该属性)</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">视频url的地址</td></tr><tr><td align="center">poster</td><td align="center">lmgurl</td><td align="center">加载等待的画面图片</td></tr><tr><td align="center">muted</td><td align="center">muted</td><td align="center">静音播放</td></tr></tbody></table><p>一般不显示controls，让视频循环播放</p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css(下)</title>
      <link href="/2022/03/01/css/css-%E4%B8%8B/"/>
      <url>/2022/03/01/css/css-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<hr><p>title: css3下<br>date: 2021-11-24 16:20:51<br>tags:</p><hr><h2 id="变形"><a href="#变形" class="headerlink" title="变形"></a>变形</h2><h3 id="2d转换"><a href="#2d转换" class="headerlink" title="2d转换"></a>2d转换</h3><p><code>转换(transform)</code>是CSS3中具有颠覆性的特征之一，可以实现元素的位移，旋转，缩放等效果</p><ul><li>移动：translate</li><li>旋转：rotate</li><li>缩放：scale</li></ul><h4 id="移动translate🔥"><a href="#移动translate🔥" class="headerlink" title="移动translate🔥"></a>移动translate🔥</h4><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似定位。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">transform:translate(x,y); </span><br><span class="line">/* 或者分开写 */</span><br><span class="line">transform:translateX(n);</span><br><span class="line">transform:translateY(n);</span><br><span class="line"></span><br><span class="line">transform:translate(100px,100px);</span><br><span class="line">/* 如果只移动X轴           */</span><br><span class="line">transform:translate(100px,0);</span><br><span class="line">translateX(100px);</span><br></pre></td></tr></table></figure><p>定义2D转换中的移动，沿着X和Y轴移动元素<br>translate 最大的优点：不会影响到其他元素的位置<br>translate 中的百分比单位是相对于自身元素的<br><code>translate:(50%,50%);</code><br>对<code>行内标签</code>没有效果</p><h4 id="旋转rotate🔥"><a href="#旋转rotate🔥" class="headerlink" title="旋转rotate🔥"></a>旋转rotate🔥</h4><p>2D旋转指的是让元素在2维平面内顺时针旋转或者逆时针旋转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(度数)</span><br></pre></td></tr></table></figure><ol><li><p>rotate 里面跟度数，单位是 deg 比如 rotate(45deg)</p></li><li><p><strong>角度为正时，顺时针，负时，为逆时针</strong></p></li><li><p>默认旋转的中心点是元素的中心点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">            <span class="comment">/* 过渡写到本身，谁做动画给谁加 */</span></span><br><span class="line">            <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  &lt;head&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">            <span class="comment">/* 过渡写到本身，谁做动画给谁加 */</span></span><br><span class="line">            <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    <span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">img</span> <span class="attribute">src</span>=&quot;#&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="旋转中心点transform-origin🔥"><a href="#旋转中心点transform-origin🔥" class="headerlink" title="旋转中心点transform-origin🔥"></a>旋转中心点transform-origin🔥</h4><p>2D转换中心点：我们可以设置元素转换的中心点 <code>transform-origin</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure><p>注意后面的参数x 和 y 用空格隔开<br>x y 默认转换的中心点是元素的中心点(50% 50%)<br>还可以给x y 设置 像素或者方位名词(top bottom left right center)</p></li></ol>   <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    &lt;head&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">            <span class="comment">/* 1.可以跟方位名词 ,以左下角为轴进行旋转*/</span></span><br><span class="line">            <span class="attribute">transform-origin</span>: left bottom;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="缩放scale🔥"><a href="#缩放scale🔥" class="headerlink" title="缩放scale🔥"></a>缩放scale🔥</h4><p>   缩放：scale,只要给元素添加上了这个属性就能控制它放大还是缩小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x,y);</span><br></pre></td></tr></table></figure><p>   注意其中的x和y用逗号分割<br>   transform:scale(1,1): 宽和高都放大一倍，相当于没有放大<br>   transform:scale(2,2)：宽和高都放大了2倍<br>   transform:scale(2)：只写一个参数，第二个参数则和第一个参数一样，相当于 scale(2,2)<br>   transform:scale(0.5,0.5)：缩小<br>   sacle缩放最大的优势：可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="comment">/* 1.里面写的数字不跟单位 就是倍数的意思 1就是1倍，2就是2倍 */</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="2D转换综合写法🔥"><a href="#2D转换综合写法🔥" class="headerlink" title="2D转换综合写法🔥"></a>2D转换综合写法🔥</h4><blockquote><ol><li>同时使用多个转换，其格式为: transform:translate() rotate() scale() 移动-旋转-缩放</li><li>其顺序会影响转换的效果(先旋转会改变坐标轴方向)</li><li><strong>当我们同时有位移和其他属性时候，记得要将位移放到最前面</strong></li></ol></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;   </span><br><span class="line">   &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="comment">/* 我们同时有位移和其他属性，我们需要把位移放到最前面 位移，旋转，缩放*/</span></span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">150px</span>, <span class="number">50px</span>) <span class="built_in">rotate</span>(<span class="number">180deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2D转换总结🔥"><a href="#2D转换总结🔥" class="headerlink" title="2D转换总结🔥"></a>2D转换总结🔥</h4><blockquote><ul><li>转换transform 我们简单理解就是变形 有2D 和 3D 之分</li><li>我们暂且学了三个 分别是 位移 旋转 和 缩放</li><li>2D 移动 translate(x, y) 最大的优势是不影响其他盒子， 里面参数用%，是相对于自身宽度和高度来计算的</li><li>可以分开写比如 translateX(x) 和 translateY(y)</li><li>2D 旋转 rotate(度数) 可以实现旋转元素 度数的单位是deg</li><li>2D 缩放 sacle(x,y) 里面参数是数字 不跟单位 可以是小数 最大的优势 不影响其他盒子</li><li>设置转换中心点 transform-origin : x y; 参数可以百分比、像素或者是方位名词</li><li>当我们进行综合写法，同时有位移和其他属性的时候，记得要将位移放到最前</li></ul></blockquote><h3 id="动画🔥"><a href="#动画🔥" class="headerlink" title="动画🔥"></a>动画🔥</h3><ul><li>先定义动画</li><li>再使用（调用）动画</li></ul><h4 id="用keyframs定义动画🔥"><a href="#用keyframs定义动画🔥" class="headerlink" title="用keyframs定义动画🔥"></a>用keyframs定义动画🔥</h4><p>用 keyframes 定义动画（类似定义类选择器）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">background-color</span>: aqua;</span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">       <span class="comment">/* 调用动画 */</span></span><br><span class="line">       <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">       <span class="comment">/* 持续时间 */</span></span><br><span class="line">       <span class="attribute">animation-duration</span>: 持续时间;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="动画常用属性🔥"><a href="#动画常用属性🔥" class="headerlink" title="动画常用属性🔥"></a>动画常用属性🔥</h4><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">@keyframes</td><td align="center">规定动画</td></tr><tr><td align="center">animation</td><td align="center">所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td align="center">animation-name</td><td align="center">规定@keyframes动画的名称。（必须的）</td></tr><tr><td align="center">animation-duration</td><td align="center">规定动画完成一个周期所花费的秒或毫秒，默认是0。（必须的）</td></tr><tr><td align="center">animation-timing-function</td><td align="center">规定动画的速度曲线，默认是“ease”。</td></tr><tr><td align="center">animation-delay</td><td align="center">规定动画何时开始，默认是0。</td></tr><tr><td align="center">animation-iteration-count</td><td align="center">规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td align="center">animation-direction</td><td align="center">规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td align="center">animation-play-state</td><td align="center">规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td align="center">animation-fill-mode</td><td align="center">规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table><h4 id="动画简写属性🔥"><a href="#动画简写属性🔥" class="headerlink" title="动画简写属性🔥"></a>动画简写属性🔥</h4><blockquote><pre><code>   animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态;</code></pre></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br></pre></td></tr></table></figure><ul><li>简写属性里面不包含 animation-play-state</li><li>暂停动画：animation-play-state: puased; 经常和鼠标经过等其他配合使用</li><li>想要动画走回来 ，而不是直接跳回来：animation-direction: alternate</li><li>盒子动画结束后，停在结束位置： animation-fill-mode : forwards</li></ul><h4 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h4><ul><li><code>animation-timing-function</code>：规定动画的速度曲线，默认是“ease”</li></ul><table><thead><tr><th><strong>值</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>linear</td><td>动画从头到尾的速度是相同的。匀速</td></tr><tr><td>ease</td><td>默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td>ease-in</td><td>动画以低速开始。</td></tr><tr><td>ease-out</td><td>动画以低速结束。</td></tr><tr><td>ease-in-out</td><td>动画以低速开始和结束。</td></tr><tr><td>steps()</td><td>指定了时间函数中的间隔数量（步长）</td></tr></tbody></table><h3 id="3D转换🔥"><a href="#3D转换🔥" class="headerlink" title="3D转换🔥"></a>3D转换🔥</h3><p>我们生活的环境是3D的，照片就是3D物体在2D平面呈现的例子.</p><p>3D转换的特点：</p><ul><li>近大远小。</li><li>物体后面遮挡不可见</li></ul><p>当我们在网页上构建3D效果的时候参考这些特点就能产出3D效果。</p><ul><li>x轴：水平向右 <strong>注意： x 右边是正值，左边是负值</strong></li><li>y轴：垂直向下 <strong>注意： y 下面是正值，上面是负值</strong></li><li>z轴：垂直屏幕 <strong>注意： 往外面是正值，往里面是负值</strong></li></ul><h4 id="3D位移translate3d🔥"><a href="#3D位移translate3d🔥" class="headerlink" title="3D位移translate3d🔥"></a>3D位移translate3d🔥</h4><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向</p><ul><li>translform:translateX(100px)：仅仅是在x轴上移动</li><li>translform:translateY(100px)：仅仅是在Y轴上移动</li><li>translform:translateZ(100px)：仅仅是在Z轴上移动（注意：translateZ一般用px单位）</li><li>transform:translate3d(x,y,z)：其中 x、y、z 分别指要移动的轴的方向的距离</li></ul><p>因为z轴是垂直屏幕，由里指向外面，所以默认是看不到元素在z轴的方向上移动</p><h4 id="透视perspective🔥"><a href="#透视perspective🔥" class="headerlink" title="透视perspective🔥"></a>透视perspective🔥</h4><p>透视：在2D平面产生近大远小视觉立体，但是只是效果二维的</p><ul><li><p>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）</p></li><li><p>模拟人类的视觉位置，可认为安排一只眼睛去看</p></li><li><p>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</p></li><li><p>距离视觉点越近的在电脑平面成像越大，越远成像越小</p></li><li><p>透视的单位是像素</p><p><strong>透视写在被观察元素的父盒子上面的</strong></p></li></ul><h4 id="translateZ🔥"><a href="#translateZ🔥" class="headerlink" title="translateZ🔥"></a>translateZ🔥</h4><ul><li>translform:translateZ(100px)：仅仅是在Z轴上移动。</li><li>有了透视，就能看到translateZ 引起的变化了<ul><li>translateZ：近大远小</li><li>translateZ：往外是正值</li><li>translateZ：往里是负值</li></ul></li></ul><h4 id="3D旋转rotate3d🔥"><a href="#3D旋转rotate3d🔥" class="headerlink" title="3D旋转rotate3d🔥"></a>3D旋转rotate3d🔥</h4><p>3D旋转：3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p><p>transform: rotateX(45deg) ：沿着X轴正方向旋转45度<br>transform: rotateY(45deg) ：沿着Y轴正方向旋转45度<br>transform: rotateZ(45deg) ：沿着Z轴正方向旋转45度<br>transform: rotate3d(x,y,z,deg) ：沿着自定义轴旋转 deg为角度(了解即可)<br>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*沿着X轴旋转45deg*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br><span class="line"><span class="comment">/*沿着对角线旋转45deg*/</span></span><br><span class="line">transform: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">45deg</span>) transform: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br></pre></td></tr></table></figure><h4 id="3D呈现transform-style🔥"><a href="#3D呈现transform-style🔥" class="headerlink" title="3D呈现transform-style🔥"></a>3D呈现transform-style🔥</h4><p>3D呈现：transform-style</p><ol><li>控制子元素是否开启三维立体环境</li><li>transform-style: flat 子元素不开启3d立体空间 默认的</li><li>transform-style: preserve-3d 子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li><li>这个属性很重要</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-渐变色"><a href="#1-渐变色" class="headerlink" title="1.渐变色"></a>1.渐变色</h3><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/54b72b2e0001500103790158.jpg" alt="img"></p><p><strong>参数：</strong></p><p>第一个参数:<strong>指定渐变方向</strong>，可以用“<strong>角度</strong>”的关键词或<strong>“英文”</strong>来表示：</p><p><img src="https://img.mukewang.com/542a25da00017e9406980223.jpg" alt="img"></p><p>第一个参数省略时，默认为“180deg”，等同于“to bottom”。</p><p>第二个和第三个参数，<strong>表示颜色的起始点和结束点</strong>，可以有多个颜色值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">linear-gradient</span>(to left, red, orange,yellow,green,blue,indigo,violet);</span><br></pre></td></tr></table></figure><h3 id="2-鼠标样式"><a href="#2-鼠标样式" class="headerlink" title="2.鼠标样式"></a>2.鼠标样式</h3><p>鼠标样式<code>cursor</code></p><ul><li>设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>default</td><td>小白，默认</td></tr><tr><td>pointer</td><td>小手</td></tr><tr><td>move</td><td>移动</td></tr><tr><td>text</td><td>文本</td></tr><tr><td>not-allowed</td><td>禁止</td></tr></tbody></table><h3 id="3-轮廓线outline"><a href="#3-轮廓线outline" class="headerlink" title="3.轮廓线outline"></a>3.轮廓线outline</h3><p>轮廓线<code>outline</code>：</p><ul><li>给表单添加 <code>outline:0</code>; 或者<code>outline: none</code>;样式后，就可以去掉默认的蓝色边框</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>outline属性的基本语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outline: ［outline-color］ || [outline-style] || [outline-width] || [outline-offset] || inherit</span><br></pre></td></tr></table></figure><p>有一个border属性，外面还有outline</p><h3 id="4-自由缩放属性resize"><a href="#4-自由缩放属性resize" class="headerlink" title="4.自由缩放属性resize"></a>4.自由缩放属性resize</h3><blockquote><p>为了增强用户体验，CSS3增加了很多新的属性，其中<strong>resize</strong>就是一个重要的属性，它允许用户通过拖动的方式来修改元素的尺寸来改变元素的大小。到目前为止，可以使用overflow属性的任何容器元素。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">resize</span>: none | both | horizontal | vertical | inherit</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性值</strong></th><th><strong>取值说明</strong></th></tr></thead><tbody><tr><td>none</td><td>用户不能拖动元素修改尺寸大小。</td></tr><tr><td>both</td><td>用户可以拖动元素，同时修改元素的宽度和高度</td></tr><tr><td>horizontal</td><td>用户可以拖动元素，仅可以修改元素的宽度，但不能修改元素的高度。</td></tr><tr><td>vertical</td><td>用户可以拖动元素，仅可以修改元素的高度，但不能修改元素的宽度。</td></tr><tr><td>inherit</td><td>继承父元素的resize属性值。</td></tr></tbody></table><h3 id="5-多列布局Columns"><a href="#5-多列布局Columns" class="headerlink" title="5.多列布局Columns"></a>5.多列布局Columns</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">columns：&lt;column-width&gt; || &lt;column-count&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>参数</strong></th><th><strong>参数说明</strong></th></tr></thead><tbody><tr><td>column-width</td><td>主要用来定义多列中每列的宽度</td></tr><tr><td>column-count</td><td>主要用来定义多列中的列数</td></tr><tr><td>column-gap</td><td>设置列与列之间的<strong>间距</strong></td></tr></tbody></table><h4 id="列表边框column-rule"><a href="#列表边框column-rule" class="headerlink" title="列表边框column-rule"></a>列表边框column-rule</h4><blockquote><p>column-rule主要是用来定义列与列之间的<strong>边框宽度、边框样式</strong>和<strong>边框颜色</strong>。简单点说，就有点类似于常用的border属性。但column-rule是不占用任何空间位置的，在列与列之间改变其宽度不会改变任何列的位置。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">column-rule</span>:&lt;column-rule-width&gt;|&lt;column-rule-style&gt;|&lt;column-rule-color&gt;</span><br></pre></td></tr></table></figure><h4 id="跨列设置column-span"><a href="#跨列设置column-span" class="headerlink" title="跨列设置column-span"></a>跨列设置column-span</h4><blockquote><p>column-span主要用来定义一个分列元素中的子元素能跨列多少。column-width、column-count等属性能让一元素分成多列，不管里面元素如何排放顺序，他们都是从左向右的放置内容，但有时我们需要基中一段内容或一个标题不进行分列，也就是横跨所有列，此时column-span就可以轻松实现，此属性的语法如下。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column-span: none | all</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>属性值</strong></th><th><strong>属性值说明</strong></th></tr></thead><tbody><tr><td>none</td><td>此值为column-span的默认值，表示不跨越任何列。</td></tr><tr><td>all</td><td>这个值跟none值刚好相反，表示的是元素跨越所有列，并定位在列的Ｚ轴之上。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2022/03/01/css/css/"/>
      <url>/2022/03/01/css/css/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS3的使用"><a href="#CSS3的使用" class="headerlink" title="CSS3的使用"></a>CSS3的使用</h1><img src="https://i.ibb.co/Y0BKPYF/CSS3.png" style="zoom:67%;" /><h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><h3 id="1-border-radius"><a href="#1-border-radius" class="headerlink" title="1.border-radius"></a>1.border-radius</h3><p>给边框加圆角效果，</p><p><strong>border-radius:10px;</strong></p><p><a href="https://img.mukewang.com/52e216d2000195ef01110111.jpg"><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/52e216d2000195ef01110111.jpg" alt="img"></a></p><p><strong>border-radius: 5px 4px 3px 2px;</strong> </p><p><a href="https://img.mukewang.com/52e216f9000131a201110111.jpg"><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/52e216f9000131a201110111.jpg" alt="img"></a></p><p>还可以使用百分比，如50%，是一个圆，em</p><h3 id="2-border-shadow"><a href="#2-border-shadow" class="headerlink" title="2.border-shadow"></a>2.border-shadow</h3><p>box-shadow是向盒子添加阴影。支持添加一个或者多个。</p><p><code>box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</code></p><p><img src="https://img.mukewang.com/54292d620001ffb107080250.jpg" alt="img"></p><p>注意：inset 可以写在参数的第一个或最后一个，其它位置是无效的。</p><p>如果添加多个阴影，只需用逗号隔开即可。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box_shadow&#123;</span><br><span class="line">    box-shadow:4px 2px 6px #f00, -4px -2px 6px #000, 0px 0px 12px 5px #33CC00 inset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>1、阴影模糊半径与阴影扩展半径的区别</strong></p></blockquote><p>阴影模糊半径：此参数可选，其值只能是为正值，如果其值为0时，表示阴影不具有模糊效果，其值越大阴影的边缘就越模糊；</p><p>阴影扩展半径：此参数可选，其值可以是正负值，如果值为正，则整个阴影都延展扩大，反之值为负值时，则缩小；</p><blockquote><p><strong>2、X轴偏移量和Y轴偏移量值可以设置为负数</strong></p></blockquote><h3 id="3-border-image"><a href="#3-border-image" class="headerlink" title="3.border-image"></a>3.border-image</h3><p>这个属性和background-image相似。</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/52e2201a0001b1e004720260.jpg" alt="img"></p><p><strong>repeat</strong>就是一直重复，然后超出部分剪裁掉，而且是居中开始重复</p><p><strong>Round</strong>可以理解为圆满的铺满。为了实现圆满所以会压缩（或拉伸）</p><p>Stretch 很好理解就是拉伸，有多长拉多长。有多远“滚”多远。</p><h2 id="文字与字体"><a href="#文字与字体" class="headerlink" title="文字与字体"></a>文字与字体</h2><h3 id="1-text-overflow"><a href="#1-text-overflow" class="headerlink" title="1.text-overflow"></a>1.text-overflow</h3><blockquote><p><strong>text-overflow</strong>只是用来说明文字溢出时用什么方式显示，要实现溢出时产生<strong>省略号</strong>的效果，还须定义<strong>强制文本在一行内显示</strong>（white-space:nowrap）及<strong>溢出内容为隐藏</strong>（overflow:hidden），只有这样才能实现<strong>溢出文本显示省略号</strong>的效果</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-overflow:ellipsis; </span><br><span class="line">overflow:hidden; </span><br><span class="line">white-space:nowrap; </span><br></pre></td></tr></table></figure><p>上面这个只是一行的</p><blockquote><p>同时，<strong>word-wrap</strong>也可以用来设置<strong>文本行为</strong>，当前行超过指定容器的边界时是否断开转行。</p></blockquote><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/53070cf700018a2b06000200.jpg" alt="img"></p><p><strong>如果要实现多行文本隐藏，用这个</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 这个是一段文字的 */</span><br><span class="line">        .text &#123;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-line-clamp: 2;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2-嵌入字体"><a href="#2-嵌入字体" class="headerlink" title="2.嵌入字体"></a>2.嵌入字体</h3><blockquote><p><strong>@font-face</strong>可以找网上的字体</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family : 字体名称;</span><br><span class="line">    src : 字体文件在服务器上的相对或绝对路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">    font-size :12px;</span><br><span class="line">    font-family : &quot;My Font&quot;;</span><br><span class="line">    /*必须项，设置@font-face中font-family同样的值*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-文字阴影"><a href="#3-文字阴影" class="headerlink" title="3.文字阴影"></a>3.文字阴影</h3><blockquote><p>text-shadow可以用来设置文本的阴影效果。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-shadow: X-Offset Y-Offset blur color;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">X-Offset</td><td align="center">表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移</td></tr><tr><td align="center">Y-Offset</td><td align="center">是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移</td></tr><tr><td align="center">Blur</td><td align="center">是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0</td></tr><tr><td align="center">Color</td><td align="center">是指阴影的颜色，其可以使用rgba色</td></tr></tbody></table><h2 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h2><h3 id="1-background-origin"><a href="#1-background-origin" class="headerlink" title="1.background-origin"></a>1.background-origin</h3><blockquote><p>设置元素背景图片的<strong>原始起始位置</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-origin ： border-box | padding-box | content-box;</span><br></pre></td></tr></table></figure><p>参数分别表示背景图片是从<strong>边框</strong>，还是<strong>内边距（默认值）</strong>，或者是<strong>内容区域</strong>开始显示。</p><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/531003de0001166903660166.jpg" alt="img"></p><p><strong>需要注意的是</strong>，如果背景不是<strong>no-repeat</strong>，这个属性无效，它会从边框开始显示。</p><blockquote><p>这个属性是起始位置，可以在设置background-position改变具体的位置</p></blockquote><h3 id="2-background-clip"><a href="#2-background-clip" class="headerlink" title="2.background-clip"></a>2.background-clip</h3><blockquote><p>用来将背景图片做适当的<strong>裁剪</strong>以适应实际需要。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-clip ： border-box | padding-box | content-box | no-clip</span><br></pre></td></tr></table></figure><p><img src="https://yuchenimage.oss-cn-shanghai.aliyuncs.com/img/5310065d0001c95103660166.jpg" alt="img"></p><h3 id="3-background-size"><a href="#3-background-size" class="headerlink" title="3.background-size"></a>3.background-size</h3><blockquote><p>设置背景图片的大小，以<strong>长度值</strong>或<strong>百分比</strong>显示，还可以通过<strong>cover</strong>和<strong>contain</strong>来对图片进行伸缩。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>auto</td><td>默认值，不改变背景图片的原始高度和宽度</td></tr><tr><td>&lt;长度值&gt;</td><td>成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来<strong>等比缩放</strong></td></tr><tr><td>&lt;百分比&gt;</td><td>0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上</td></tr><tr><td>cover</td><td>顾名思义为<strong>覆盖</strong>，即将背景图片等比缩放以<strong>填满整个容器</strong></td></tr><tr><td>contain</td><td>容纳，即将背景图片等比缩放至<strong>某一边紧贴容器边缘为止</strong></td></tr></tbody></table><p><strong>注：</strong>1.&lt;长度值&gt;设置两个值时，图片可以失真</p><p>2.cover,contain图片是自适应，不会失真</p><h3 id="4-multiple-backgrounds"><a href="#4-multiple-backgrounds" class="headerlink" title="4.multiple backgrounds"></a>4.multiple backgrounds</h3><blockquote><p>多重背景</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),</span><br><span class="line">                     url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),</span><br><span class="line">                     url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);</span><br><span class="line">   background-position: left top, 100px 0, 200px 0;</span><br><span class="line">   background-repeat: no-repeat, no-repeat, no-repeat;</span><br><span class="line">   margin:0 0 20px 0;</span><br></pre></td></tr></table></figure><p>可以是多个背景图片</p><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="1-通配符"><a href="#1-通配符" class="headerlink" title="1.通配符"></a>1.<strong>通配符</strong></h3><table><thead><tr><th>^=</th><th>选择以这个开头的</th></tr></thead><tbody><tr><td>$=</td><td>选择以这个结尾的</td></tr><tr><td>*=</td><td>选择包含这个的</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;xxx.pdf&quot;&gt;我链接的是PDF文件&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; class=&quot;icon&quot;&gt;我类名是icon&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot; title=&quot;我的title是more&quot;&gt;我的title是more&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a[class^=&quot;icon&quot;]&#123;</span><br><span class="line">  background: green;</span><br><span class="line">  color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">a[href$=&quot;pdf&quot;]&#123;</span><br><span class="line">  background: orange;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">a[title*=&quot;more&quot;]&#123;</span><br><span class="line">  background: blue;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数目选择"><a href="#2-数目选择" class="headerlink" title="2.数目选择"></a>2.数目选择</h3><h4 id="1-root"><a href="#1-root" class="headerlink" title="1.root"></a>1.root</h4><blockquote><p><code>:root</code>选择器，从字面上我们就可以很清楚的理解是根选择器，他的意思就是匹配元素E所在文档的根元素。在HTML文档中，根元素始终是<html>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:root &#123;</span><br><span class="line">  background:orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-not"><a href="#2-not" class="headerlink" title="2.not"></a>2.not</h4><blockquote><p><code>:not</code>选择器称为<strong>否定选择器</strong>，选择没有这个的，可以是类，也可以是下面这种</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input:not([type=&quot;submit&quot;])&#123;</span><br><span class="line">  border:1px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-target"><a href="#3-target" class="headerlink" title="3.target"></a>3.target</h4><blockquote><p><code>:target</code>选择器称为目标选择器，用来匹配文档(页面)的<strong>url的某个标志符的目标元素</strong>。我们先来上个例子，然后再做分析。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;&lt;a href=&quot;#brand&quot;&gt;Brand&lt;/a&gt;&lt;/h2&gt;</span><br><span class="line">&lt;div class=&quot;menuSection&quot; id=&quot;brand&quot;&gt;</span><br><span class="line">    content for Brand</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:target&#123;/*这里的:target就是指id=&quot;brand&quot;的div对象*/</span><br><span class="line">  display:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 主要href和id一样就可以 </p><h4 id="4-child"><a href="#4-child" class="headerlink" title="4.child"></a>4.child</h4><blockquote><p>选择父元素的子元素</p></blockquote><table><thead><tr><th align="center">first-child</th><th align="center">选择元素的第一个子元素</th></tr></thead><tbody><tr><td align="center">last-child</td><td align="center">元素的最后一个子元素</td></tr><tr><td align="center">nth-child(n+5)</td><td align="center">选第五个之后的</td></tr><tr><td align="center">nth-child(odd)</td><td align="center">选奇数</td></tr><tr><td align="center">nth-child(even)</td><td align="center">选偶数</td></tr><tr><td align="center">nth-last-child(n)</td><td align="center">从某父元素的最后一个子元素开始计算，来选择特定的元素</td></tr></tbody></table><h4 id="5-of-type"><a href="#5-of-type" class="headerlink" title="5. -of-type"></a>5. -of-type</h4><blockquote><p><strong>指定了元素的类型</strong>,其主要用来定位一个父元素下的某个类型的第一个子元素。</p><p>使用和child一样</p></blockquote><p>只要使用nth-of-type(n)</p><h4 id="6-only"><a href="#6-only" class="headerlink" title="6.only"></a>6.only</h4><table><thead><tr><th>only-child</th><th>匹配的元素的父元素中仅有一个子元素，而且是一个<strong>唯一的子元素</strong>才生效</th></tr></thead><tbody><tr><td>only-of-type</td><td>一个元素他有很多个子元素，而其中只有一种类型的子元素是唯一的</td></tr></tbody></table><h3 id="3-状态选择"><a href="#3-状态选择" class="headerlink" title="3.状态选择"></a>3.状态选择</h3><h4 id="1-enabled"><a href="#1-enabled" class="headerlink" title="1.enabled"></a>1.enabled</h4><p>在Web的表单中，有些表单元素有可用（<strong>“:enabled”</strong>）和不可用（“**:disabled**”）状态</p><p>选enabled</p><h4 id="2-disabled"><a href="#2-disabled" class="headerlink" title="2.disabled"></a>2.disabled</h4><h4 id="3-checked"><a href="#3-checked" class="headerlink" title="3.checked"></a>3.checked</h4><blockquote><p>在表单元素中，单选按钮和复选按钮都具有<strong>选中</strong>和<strong>未选中</strong>状态。</p></blockquote><p>在CSS3中，我们可以通过状态选择器“:checked”配合其他标签实现<strong>自定义样式</strong>。而“**:checked**”表示的是选中状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input[type=&quot;checkbox&quot;] &#123;</span><br><span class="line">  opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input[type=&quot;checkbox&quot;]:checked  &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-selection"><a href="#4-selection" class="headerlink" title="4.::selection"></a>4.::selection</h4><blockquote><p>注：这个要写两个冒号</p></blockquote><p>“**::selection<strong>”伪元素是用来匹配</strong>突出显示**的文本(用鼠标选择文本时的文本)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::selection &#123;</span><br><span class="line">  background: red;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-read-only和read-write"><a href="#5-read-only和read-write" class="headerlink" title="5.read-only和read-write"></a>5.read-only和read-write</h4><blockquote><p>read-only，input添加了read-only就起作用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">input[type=&quot;text&quot;]:read-only&#123;</span><br><span class="line">  border-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line">input[type=&quot;text&quot;]:read-write&#123;</span><br><span class="line">  border-color: #f36;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-before和-after"><a href="#6-before和-after" class="headerlink" title="6.:before和::after"></a>6.:before和::after</h4><blockquote><p>这个一个冒号和两个冒号都可以，但是是伪元素，本来是两个的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
